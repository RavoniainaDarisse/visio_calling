{
  "version": 3,
  "sources": ["../../../../../../node_modules/sdp/sdp.js", "../../../../../../node_modules/@stream-io/video-client/node_modules/ua-parser-js/src/ua-parser.js", "../../../../../../node_modules/sdp-transform/lib/grammar.js", "../../../../../../node_modules/sdp-transform/lib/parser.js", "../../../../../../node_modules/sdp-transform/lib/writer.js", "../../../../../../node_modules/sdp-transform/lib/index.js", "../../../../../../node_modules/webrtc-adapter/src/js/utils.js", "../../../../../../node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js", "../../../../../../node_modules/webrtc-adapter/src/js/chrome/getusermedia.js", "../../../../../../node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js", "../../../../../../node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js", "../../../../../../node_modules/webrtc-adapter/src/js/firefox/getusermedia.js", "../../../../../../node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js", "../../../../../../node_modules/webrtc-adapter/src/js/safari/safari_shim.js", "../../../../../../node_modules/webrtc-adapter/src/js/common_shim.js", "../../../../../../node_modules/webrtc-adapter/src/js/adapter_factory.js", "../../../../../../node_modules/webrtc-adapter/src/js/adapter_core.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/base64.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/assert.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/oneof.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js", "../../../../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/reflection-info.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-error.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-options.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/deferred.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-output-stream.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/unary-call.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/server-streaming-call.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/client-streaming-call.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/duplex-streaming-call.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/test-transport.js", "../../../../../../node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js", "../../../../../../node_modules/@protobuf-ts/twirp-transport/build/es2015/twitch-twirp-error-code.js", "../../../../../../node_modules/@protobuf-ts/twirp-transport/build/es2015/twirp-format.js", "../../../../../../node_modules/@protobuf-ts/twirp-transport/build/es2015/twirp-transport.js", "../../../../../../node_modules/@stream-io/video-client/dist/index.browser.es.js"],
  "sourcesContent": ["/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function () {\n  return Math.random().toString(36).substring(2, 12);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function (blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function (blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ? 'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function (blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function (blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function (blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function (line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n  const candidate = {\n    foundation: parts[0],\n    component: {\n      1: 'rtp',\n      2: 'rtcp'\n    }[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4],\n    // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default:\n        // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function (candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function (line) {\n  return line.substring(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function (line) {\n  let parts = line.substring(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n  parts = parts[0].split('/');\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function (codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function (line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n    attributes: parts.slice(2).join(' ')\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function (headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + (headerExtension.attributes ? ' ' + headerExtension.attributes : '') + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function (line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substring(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function (codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function (line) {\n  const parts = line.substring(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function (codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function (line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substring(7, sp), 10)\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substring(sp + 1, colon);\n    parts.value = line.substring(colon + 1);\n  } else {\n    parts.attribute = line.substring(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function (line) {\n  const parts = line.substring(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10))\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function (mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substring(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function (line) {\n  const parts = line.substring(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(),\n    // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function (params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function (line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3)\n  };\n};\nSDPUtils.writeCryptoLine = function (parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function (keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substring(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined\n  };\n};\nSDPUtils.writeCryptoKeyParams = function (keyParams) {\n  return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function (mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substring(12),\n    password: pwd.substring(10)\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function (params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' + 'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function (mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  description.profile = mline[2];\n  for (let i = 3; i < mline.length; i++) {\n    // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default:\n          // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ').map(SDPUtils.parseRtcpFb);\n  description.codecs.forEach(codec => {\n    wildcardRtcpFb.forEach(fb => {\n      const duplicate = codec.rtcpFeedback.find(existingFeedback => {\n        return existingFeedback.type === fb.type && existingFeedback.parameter === fb.parameter;\n      });\n      if (!duplicate) {\n        codec.rtcpFeedback.push(fb);\n      }\n    });\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function (kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function (mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(line => {\n    const parts = line.substring(17).split(' ');\n    return parts.map(part => parseInt(part, 10));\n  });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {\n          ssrc: secondarySsrc\n        };\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substring(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95 - 50 * 40 * 8;\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function (mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n  return rtcpParameters;\n};\nSDPUtils.writeRtcpParameters = function (rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function (mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substring(7).split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {\n      stream: parts[0],\n      track: parts[1]\n    };\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function (mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substring(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0].substring(10).split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function (media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctp-port:' + sctp.port + '\\r\\n'];\n  } else {\n    output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function () {\n  return Math.random().toString().substr(2, 22);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' + 's=-\\r\\n' + 't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function (mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substring(2);\n      default:\n      // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\nSDPUtils.getKind = function (mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substring(2);\n};\nSDPUtils.isRejected = function (mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\nSDPUtils.parseMLine = function (mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substring(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\nSDPUtils.parseOLine = function (mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substring(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function (blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}", "/////////////////////////////////////////////////////////////////////////////////\n/* UAParser.js v1.0.40\n   Copyright © 2012-2024 Faisal Salman <f@faisalman.com>\n   MIT License */ /*\n                  Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n                  Supports browser & node.js environment. \n                  Demo   : https://faisalman.github.io/ua-parser-js\n                  Source : https://github.com/faisalman/ua-parser-js */\n/////////////////////////////////////////////////////////////////////////////////\n\n(function (window, undefined) {\n  'use strict';\n\n  //////////////\n  // Constants\n  /////////////\n  var LIBVERSION = '1.0.40',\n    EMPTY = '',\n    UNKNOWN = '?',\n    FUNC_TYPE = 'function',\n    UNDEF_TYPE = 'undefined',\n    OBJ_TYPE = 'object',\n    STR_TYPE = 'string',\n    MAJOR = 'major',\n    MODEL = 'model',\n    NAME = 'name',\n    TYPE = 'type',\n    VENDOR = 'vendor',\n    VERSION = 'version',\n    ARCHITECTURE = 'architecture',\n    CONSOLE = 'console',\n    MOBILE = 'mobile',\n    TABLET = 'tablet',\n    SMARTTV = 'smarttv',\n    WEARABLE = 'wearable',\n    EMBEDDED = 'embedded',\n    UA_MAX_LENGTH = 500;\n  var AMAZON = 'Amazon',\n    APPLE = 'Apple',\n    ASUS = 'ASUS',\n    BLACKBERRY = 'BlackBerry',\n    BROWSER = 'Browser',\n    CHROME = 'Chrome',\n    EDGE = 'Edge',\n    FIREFOX = 'Firefox',\n    GOOGLE = 'Google',\n    HUAWEI = 'Huawei',\n    LG = 'LG',\n    MICROSOFT = 'Microsoft',\n    MOTOROLA = 'Motorola',\n    OPERA = 'Opera',\n    SAMSUNG = 'Samsung',\n    SHARP = 'Sharp',\n    SONY = 'Sony',\n    XIAOMI = 'Xiaomi',\n    ZEBRA = 'Zebra',\n    FACEBOOK = 'Facebook',\n    CHROMIUM_OS = 'Chromium OS',\n    MAC_OS = 'Mac OS',\n    SUFFIX_BROWSER = ' Browser';\n\n  ///////////\n  // Helper\n  //////////\n\n  var extend = function (regexes, extensions) {\n      var mergedRegexes = {};\n      for (var i in regexes) {\n        if (extensions[i] && extensions[i].length % 2 === 0) {\n          mergedRegexes[i] = extensions[i].concat(regexes[i]);\n        } else {\n          mergedRegexes[i] = regexes[i];\n        }\n      }\n      return mergedRegexes;\n    },\n    enumerize = function (arr) {\n      var enums = {};\n      for (var i = 0; i < arr.length; i++) {\n        enums[arr[i].toUpperCase()] = arr[i];\n      }\n      return enums;\n    },\n    has = function (str1, str2) {\n      return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n    },\n    lowerize = function (str) {\n      return str.toLowerCase();\n    },\n    majorize = function (version) {\n      return typeof version === STR_TYPE ? version.replace(/[^\\d\\.]/g, EMPTY).split('.')[0] : undefined;\n    },\n    trim = function (str, len) {\n      if (typeof str === STR_TYPE) {\n        str = str.replace(/^\\s\\s*/, EMPTY);\n        return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n      }\n    };\n\n  ///////////////\n  // Map helper\n  //////////////\n\n  var rgxMapper = function (ua, arrays) {\n      var i = 0,\n        j,\n        k,\n        p,\n        q,\n        matches,\n        match;\n\n      // loop through all regexes maps\n      while (i < arrays.length && !matches) {\n        var regex = arrays[i],\n          // even sequence (0,2,4,..)\n          props = arrays[i + 1]; // odd sequence (1,3,5,..)\n        j = k = 0;\n\n        // try matching uastring with regexes\n        while (j < regex.length && !matches) {\n          if (!regex[j]) {\n            break;\n          }\n          matches = regex[j++].exec(ua);\n          if (!!matches) {\n            for (p = 0; p < props.length; p++) {\n              match = matches[++k];\n              q = props[p];\n              // check if given property is actually array\n              if (typeof q === OBJ_TYPE && q.length > 0) {\n                if (q.length === 2) {\n                  if (typeof q[1] == FUNC_TYPE) {\n                    // assign modified match\n                    this[q[0]] = q[1].call(this, match);\n                  } else {\n                    // assign given value, ignore regex match\n                    this[q[0]] = q[1];\n                  }\n                } else if (q.length === 3) {\n                  // check whether function or regex\n                  if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                    // call function (usually string mapper)\n                    this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;\n                  } else {\n                    // sanitize match using given regex\n                    this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;\n                  }\n                } else if (q.length === 4) {\n                  this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;\n                }\n              } else {\n                this[q] = match ? match : undefined;\n              }\n            }\n          }\n        }\n        i += 2;\n      }\n    },\n    strMapper = function (str, map) {\n      for (var i in map) {\n        // check if current value is array\n        if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n          for (var j = 0; j < map[i].length; j++) {\n            if (has(map[i][j], str)) {\n              return i === UNKNOWN ? undefined : i;\n            }\n          }\n        } else if (has(map[i], str)) {\n          return i === UNKNOWN ? undefined : i;\n        }\n      }\n      return map.hasOwnProperty('*') ? map['*'] : str;\n    };\n\n  ///////////////\n  // String map\n  //////////////\n\n  // Safari < 3.0\n  var oldSafariMap = {\n      '1.0': '/8',\n      '1.2': '/1',\n      '1.3': '/3',\n      '2.0': '/412',\n      '2.0.2': '/416',\n      '2.0.3': '/417',\n      '2.0.4': '/419',\n      '?': '/'\n    },\n    windowsVersionMap = {\n      'ME': '4.90',\n      'NT 3.11': 'NT3.51',\n      'NT 4.0': 'NT4.0',\n      '2000': 'NT 5.0',\n      'XP': ['NT 5.1', 'NT 5.2'],\n      'Vista': 'NT 6.0',\n      '7': 'NT 6.1',\n      '8': 'NT 6.2',\n      '8.1': 'NT 6.3',\n      '10': ['NT 6.4', 'NT 10.0'],\n      'RT': 'ARM'\n    };\n\n  //////////////\n  // Regex map\n  /////////////\n\n  var regexes = {\n    browser: [[/\\b(?:crmo|crios)\\/([\\w\\.]+)/i // Chrome for Android/iOS\n    ], [VERSION, [NAME, 'Chrome']], [/edg(?:e|ios|a)?\\/([\\w\\.]+)/i // Microsoft Edge\n    ], [VERSION, [NAME, 'Edge']], [\n    // Presto based\n    /(opera mini)\\/([-\\w\\.]+)/i,\n    // Opera Mini\n    /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,\n    // Opera Mobi/Tablet\n    /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i // Opera\n    ], [NAME, VERSION], [/opios[\\/ ]+([\\w\\.]+)/i // Opera mini on iphone >= 8.0\n    ], [VERSION, [NAME, OPERA + ' Mini']], [/\\bop(?:rg)?x\\/([\\w\\.]+)/i // Opera GX\n    ], [VERSION, [NAME, OPERA + ' GX']], [/\\bopr\\/([\\w\\.]+)/i // Opera Webkit\n    ], [VERSION, [NAME, OPERA]], [\n    // Mixed\n    /\\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\\/ ]?([\\w\\.]+)/i // Baidu\n    ], [VERSION, [NAME, 'Baidu']], [/\\b(?:mxbrowser|mxios|myie2)\\/?([-\\w\\.]*)\\b/i // Maxthon\n    ], [VERSION, [NAME, 'Maxthon']], [/(kindle)\\/([\\w\\.]+)/i,\n    // Kindle\n    /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\\/ ]?([\\w\\.]*)/i,\n    // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir\n    // Trident based\n    /(avant|iemobile|slim(?:browser|boat|jet))[\\/ ]?([\\d\\.]*)/i,\n    // Avant/IEMobile/SlimBrowser/SlimBoat/Slimjet\n    /(?:ms|\\()(ie) ([\\w\\.]+)/i,\n    // Internet Explorer\n\n    // Blink/Webkit/KHTML based                                         // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon\n    /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\\/([-\\w\\.]+)/i,\n    // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio/Dragon\n    /(heytap|ovi|115)browser\\/([\\d\\.]+)/i,\n    // HeyTap/Ovi/115\n    /(weibo)__([\\d\\.]+)/i // Weibo\n    ], [NAME, VERSION], [/quark(?:pc)?\\/([-\\w\\.]+)/i // Quark\n    ], [VERSION, [NAME, 'Quark']], [/\\bddg\\/([\\w\\.]+)/i // DuckDuckGo\n    ], [VERSION, [NAME, 'DuckDuckGo']], [/(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i // UCBrowser\n    ], [VERSION, [NAME, 'UC' + BROWSER]], [/microm.+\\bqbcore\\/([\\w\\.]+)/i,\n    // WeChat Desktop for Windows Built-in Browser\n    /\\bqbcore\\/([\\w\\.]+).+microm/i, /micromessenger\\/([\\w\\.]+)/i // WeChat\n    ], [VERSION, [NAME, 'WeChat']], [/konqueror\\/([\\w\\.]+)/i // Konqueror\n    ], [VERSION, [NAME, 'Konqueror']], [/trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i // IE11\n    ], [VERSION, [NAME, 'IE']], [/ya(?:search)?browser\\/([\\w\\.]+)/i // Yandex\n    ], [VERSION, [NAME, 'Yandex']], [/slbrowser\\/([\\w\\.]+)/i // Smart Lenovo Browser\n    ], [VERSION, [NAME, 'Smart Lenovo ' + BROWSER]], [/(avast|avg)\\/([\\w\\.]+)/i // Avast/AVG Secure Browser\n    ], [[NAME, /(.+)/, '$1 Secure ' + BROWSER], VERSION], [/\\bfocus\\/([\\w\\.]+)/i // Firefox Focus\n    ], [VERSION, [NAME, FIREFOX + ' Focus']], [/\\bopt\\/([\\w\\.]+)/i // Opera Touch\n    ], [VERSION, [NAME, OPERA + ' Touch']], [/coc_coc\\w+\\/([\\w\\.]+)/i // Coc Coc Browser\n    ], [VERSION, [NAME, 'Coc Coc']], [/dolfin\\/([\\w\\.]+)/i // Dolphin\n    ], [VERSION, [NAME, 'Dolphin']], [/coast\\/([\\w\\.]+)/i // Opera Coast\n    ], [VERSION, [NAME, OPERA + ' Coast']], [/miuibrowser\\/([\\w\\.]+)/i // MIUI Browser\n    ], [VERSION, [NAME, 'MIUI' + SUFFIX_BROWSER]], [/fxios\\/([\\w\\.-]+)/i // Firefox for iOS\n    ], [VERSION, [NAME, FIREFOX]], [/\\bqihoobrowser\\/?([\\w\\.]*)/i // 360\n    ], [VERSION, [NAME, '360']], [/\\b(qq)\\/([\\w\\.]+)/i // QQ\n    ], [[NAME, /(.+)/, '$1Browser'], VERSION], [/(oculus|sailfish|huawei|vivo|pico)browser\\/([\\w\\.]+)/i], [[NAME, /(.+)/, '$1' + SUFFIX_BROWSER], VERSION], [\n    // Oculus/Sailfish/HuaweiBrowser/VivoBrowser/PicoBrowser\n    /samsungbrowser\\/([\\w\\.]+)/i // Samsung Internet\n    ], [VERSION, [NAME, SAMSUNG + ' Internet']], [/metasr[\\/ ]?([\\d\\.]+)/i // Sogou Explorer\n    ], [VERSION, [NAME, 'Sogou Explorer']], [/(sogou)mo\\w+\\/([\\d\\.]+)/i // Sogou Mobile\n    ], [[NAME, 'Sogou Mobile'], VERSION], [/(electron)\\/([\\w\\.]+) safari/i,\n    // Electron-based App\n    /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,\n    // Tesla\n    /m?(qqbrowser|2345(?=browser|chrome|explorer))\\w*[\\/ ]?v?([\\w\\.]+)/i // QQ/2345\n    ], [NAME, VERSION], [/(lbbrowser|rekonq)/i,\n    // LieBao Browser/Rekonq\n    /\\[(linkedin)app\\]/i // LinkedIn App for iOS & Android\n    ], [NAME], [/ome\\/([\\w\\.]+) \\w* ?(iron) saf/i,\n    // Iron\n    /ome\\/([\\w\\.]+).+qihu (360)[es]e/i // 360\n    ], [VERSION, NAME], [\n    // WebView\n    /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i // Facebook App for iOS & Android\n    ], [[NAME, FACEBOOK], VERSION], [/(Klarna)\\/([\\w\\.]+)/i,\n    // Klarna Shopping Browser for iOS & Android\n    /(kakao(?:talk|story))[\\/ ]([\\w\\.]+)/i,\n    // Kakao App\n    /(naver)\\(.*?(\\d+\\.[\\w\\.]+).*\\)/i,\n    // Naver InApp\n    /safari (line)\\/([\\w\\.]+)/i,\n    // Line App for iOS\n    /\\b(line)\\/([\\w\\.]+)\\/iab/i,\n    // Line App for Android\n    /(alipay)client\\/([\\w\\.]+)/i,\n    // Alipay\n    /(twitter)(?:and| f.+e\\/([\\w\\.]+))/i,\n    // Twitter\n    /(chromium|instagram|snapchat)[\\/ ]([-\\w\\.]+)/i // Chromium/Instagram/Snapchat\n    ], [NAME, VERSION], [/\\bgsa\\/([\\w\\.]+) .*safari\\//i // Google Search Appliance on iOS\n    ], [VERSION, [NAME, 'GSA']], [/musical_ly(?:.+app_?version\\/|_)([\\w\\.]+)/i // TikTok\n    ], [VERSION, [NAME, 'TikTok']], [/headlesschrome(?:\\/([\\w\\.]+)| )/i // Chrome Headless\n    ], [VERSION, [NAME, CHROME + ' Headless']], [/ wv\\).+(chrome)\\/([\\w\\.]+)/i // Chrome WebView\n    ], [[NAME, CHROME + ' WebView'], VERSION], [/droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i // Android Browser\n    ], [VERSION, [NAME, 'Android ' + BROWSER]], [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia\n    ], [NAME, VERSION], [/version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i // Mobile Safari\n    ], [VERSION, [NAME, 'Mobile Safari']], [/version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile\n    ], [VERSION, NAME], [/webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i // Safari < 3.0\n    ], [NAME, [VERSION, strMapper, oldSafariMap]], [/(webkit|khtml)\\/([\\w\\.]+)/i], [NAME, VERSION], [\n    // Gecko based\n    /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i // Netscape\n    ], [[NAME, 'Netscape'], VERSION], [/(wolvic|librewolf)\\/([\\w\\.]+)/i // Wolvic/LibreWolf\n    ], [NAME, VERSION], [/mobile vr; rv:([\\w\\.]+)\\).+firefox/i // Firefox Reality\n    ], [VERSION, [NAME, FIREFOX + ' Reality']], [/ekiohf.+(flow)\\/([\\w\\.]+)/i,\n    // Flow\n    /(swiftfox)/i,\n    // Swiftfox\n    /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\\/ ]?([\\w\\.\\+]+)/i,\n    // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror\n    /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n    // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n    /(firefox)\\/([\\w\\.]+)/i,\n    // Other Firefox-based\n    /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,\n    // Mozilla\n\n    // Other\n    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n    // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser\n    /(links) \\(([\\w\\.]+)/i // Links\n    ], [NAME, [VERSION, /_/g, '.']], [/(cobalt)\\/([\\w\\.]+)/i // Cobalt\n    ], [NAME, [VERSION, /master.|lts./, \"\"]]],\n    cpu: [[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\\)]/i // AMD64 (x64)\n    ], [[ARCHITECTURE, 'amd64']], [/(ia32(?=;))/i // IA32 (quicktime)\n    ], [[ARCHITECTURE, lowerize]], [/((?:i[346]|x)86)[;\\)]/i // IA32 (x86)\n    ], [[ARCHITECTURE, 'ia32']], [/\\b(aarch64|arm(v?8e?l?|_?64))\\b/i // ARM64\n    ], [[ARCHITECTURE, 'arm64']], [/\\b(arm(?:v[67])?ht?n?[fl]p?)\\b/i // ARMHF\n    ], [[ARCHITECTURE, 'armhf']], [\n    // PocketPC mistakenly identified as PowerPC\n    /windows (ce|mobile); ppc;/i], [[ARCHITECTURE, 'arm']], [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\\))/i // PowerPC\n    ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [/(sun4\\w)[;\\)]/i // SPARC\n    ], [[ARCHITECTURE, 'sparc']], [/((?:avr32|ia64(?=;))|68k(?=\\))|\\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\\b|pa-risc)/i\n    // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n    ], [[ARCHITECTURE, lowerize]]],\n    device: [[\n    //////////////////////////\n    // MOBILES & TABLETS\n    /////////////////////////\n\n    // Samsung\n    /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [/\\b((?:s[cgp]h|gt|sm)-(?![lr])\\w+|sc[g-]?[\\d]+a?|galaxy nexus)/i, /samsung[- ]((?!sm-[lr])[-\\w]+)/i, /sec-(sgh\\w+)/i], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [\n    // Apple\n    /(?:\\/|\\()(ip(?:hone|od)[\\w, ]*)(?:\\/|;)/i // iPod/iPhone\n    ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [/\\((ipad);[-\\w\\),; ]+apple/i,\n    // iPad\n    /applecoremedia\\/[\\w\\.]+ \\((ipad)/i, /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [/(macintosh);/i], [MODEL, [VENDOR, APPLE]], [\n    // Sharp\n    /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [\n    // Honor\n    /(?:honor)([-\\w ]+)[;\\)]/i], [MODEL, [VENDOR, 'Honor'], [TYPE, MOBILE]], [\n    // Huawei\n    /\\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\\d{2})\\b(?!.+d\\/s)/i], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [/(?:huawei)([-\\w ]+)[;\\)]/i, /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [\n    // Xiaomi\n    /\\b(poco[\\w ]+|m2\\d{3}j\\d\\d[a-z]{2})(?: bui|\\))/i,\n    // Xiaomi POCO\n    /\\b; (\\w+) build\\/hm\\1/i,\n    // Xiaomi Hongmi 'numeric' models\n    /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,\n    // Xiaomi Hongmi\n    /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,\n    // Xiaomi Redmi\n    /oid[^\\)]+; (m?[12][0-389][01]\\w{3,6}[c-y])( bui|; wv|\\))/i,\n    // Xiaomi Redmi 'numeric' models\n    /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\\))/i // Xiaomi Mi\n    ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [/oid[^\\)]+; (2\\d{4}(283|rpbf)[cgl])( bui|\\))/i,\n    // Redmi Pad\n    /\\b(mi[-_ ]?(?:pad)(?:[\\w_ ]+))(?: bui|\\))/i // Mi Pad tablets\n    ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [\n    // OPPO\n    /; (\\w+) bui.+ oppo/i, /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [/\\b(opd2\\d{3}a?) bui/i], [MODEL, [VENDOR, 'OPPO'], [TYPE, TABLET]], [\n    // Vivo\n    /vivo (\\w+)(?: bui|\\))/i, /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [\n    // Realme\n    /\\b(rmx[1-3]\\d{3})(?: bui|;|\\))/i], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [\n    // Motorola\n    /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i, /\\bmot(?:orola)?[- ](\\w*)/i, /((?:moto[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [/\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [\n    // LG\n    /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [/(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i, /\\blg[-e;\\/ ]+((?!browser|netcast|android tv)\\w+)/i, /\\blg-?([\\d\\w]+) bui/i], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [\n    // Lenovo\n    /(ideatab[-\\w ]+)/i, /lenovo ?(s[56]000[-\\w]+|tab(?:[\\w ]+)|yt[-\\d\\w]{6}|tb[-\\d\\w]{6})/i], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [\n    // Nokia\n    /(?:maemo|nokia).*(n900|lumia \\d+)/i, /nokia[-_ ]?([-\\w\\.]*)/i], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [\n    // Google\n    /(pixel c)\\b/i // Google Pixel C\n    ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [/droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i // Google Pixel\n    ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [\n    // Sony\n    /droid.+; (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [/sony tablet [ps]/i, /\\b(?:sony)?sgp\\w+(?: bui|\\))/i], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [\n    // OnePlus\n    / (kb2005|in20[12]5|be20[12][59])\\b/i, /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [\n    // Amazon\n    /(alexa)webm/i, /(kf[a-z]{2}wi|aeo(?!bc)\\w\\w)( bui|\\))/i,\n    // Kindle Fire without Silk / Echo Show\n    /(kf[a-z]+)( bui|\\)).+silk\\//i // Kindle Fire HD\n    ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [/((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i // Fire Phone\n    ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [\n    // BlackBerry\n    /(playbook);[-\\w\\),; ]+(rim)/i // BlackBerry PlayBook\n    ], [MODEL, VENDOR, [TYPE, TABLET]], [/\\b((?:bb[a-f]|st[hv])100-\\d)/i, /\\(bb10; (\\w+)/i // BlackBerry 10\n    ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [\n    // Asus\n    /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [/ (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [\n    // HTC\n    /(nexus 9)/i // HTC Nexus 9\n    ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [/(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,\n    // HTC\n\n    // ZTE\n    /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i, /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\\.))|sony(?!-bra))[-_ ]?([-\\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n    ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [\n    // TCL\n    /droid [\\w\\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\\w*(\\)| bui)/i], [MODEL, [VENDOR, 'TCL'], [TYPE, TABLET]], [\n    // itel\n    /(itel) ((\\w+))/i], [[VENDOR, lowerize], MODEL, [TYPE, strMapper, {\n      'tablet': ['p10001l', 'w7001'],\n      '*': 'mobile'\n    }]], [\n    // Acer\n    /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [\n    // Meizu\n    /droid.+; (m[1-5] note) bui/i, /\\bmz-([-\\w]{2,})/i], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\n    // Ulefone\n    /; ((?:power )?armor(?:[\\w ]{0,8}))(?: bui|\\))/i], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [\n    // Energizer\n    /; (energy ?\\w+)(?: bui|\\))/i, /; energizer ([\\w ]+)(?: bui|\\))/i], [MODEL, [VENDOR, 'Energizer'], [TYPE, MOBILE]], [\n    // Cat\n    /; cat (b35);/i, /; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\\))/i], [MODEL, [VENDOR, 'Cat'], [TYPE, MOBILE]], [\n    // Smartfren\n    /((?:new )?andromax[\\w- ]+)(?: bui|\\))/i], [MODEL, [VENDOR, 'Smartfren'], [TYPE, MOBILE]], [\n    // Nothing\n    /droid.+; (a(?:015|06[35]|142p?))/i], [MODEL, [VENDOR, 'Nothing'], [TYPE, MOBILE]], [\n    // MIXED\n    /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\\w]*)/i,\n    // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron/Infinix/Tecno/Micromax/Advan\n    /; (imo) ((?!tab)[\\w ]+?)(?: bui|\\))/i,\n    // IMO\n    /(hp) ([\\w ]+\\w)/i,\n    // HP iPAQ\n    /(asus)-?(\\w+)/i,\n    // Asus\n    /(microsoft); (lumia[\\w ]+)/i,\n    // Microsoft Lumia\n    /(lenovo)[-_ ]?([-\\w]+)/i,\n    // Lenovo\n    /(jolla)/i,\n    // Jolla\n    /(oppo) ?([\\w ]+) bui/i // OPPO\n    ], [VENDOR, MODEL, [TYPE, MOBILE]], [/(imo) (tab \\w+)/i,\n    // IMO\n    /(kobo)\\s(ereader|touch)/i,\n    // Kobo\n    /(archos) (gamepad2?)/i,\n    // Archos\n    /(hp).+(touchpad(?!.+tablet)|tablet)/i,\n    // HP TouchPad\n    /(kindle)\\/([\\w\\.]+)/i,\n    // Kindle\n    /(nook)[\\w ]+build\\/(\\w+)/i,\n    // Nook\n    /(dell) (strea[kpr\\d ]*[\\dko])/i,\n    // Dell Streak\n    /(le[- ]+pan)[- ]+(\\w{1,9}) bui/i,\n    // Le Pan Tablets\n    /(trinity)[- ]*(t\\d{3}) bui/i,\n    // Trinity Tablets\n    /(gigaset)[- ]+(q\\w{1,9}) bui/i,\n    // Gigaset Tablets\n    /(vodafone) ([\\w ]+)(?:\\)| bui)/i // Vodafone\n    ], [VENDOR, MODEL, [TYPE, TABLET]], [/(surface duo)/i // Surface Duo\n    ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [/droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i // Fairphone\n    ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [/(u304aa)/i // AT&T\n    ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [/\\bsie-(\\w*)/i // Siemens\n    ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [/\\b(rct\\w+) b/i // RCA Tablets\n    ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [/\\b(venue[\\d ]{2,7}) b/i // Dell Venue Tablets\n    ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [/\\b(q(?:mv|ta)\\w+) b/i // Verizon Tablet\n    ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [/\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i // Barnes & Noble Tablet\n    ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [/\\b(tm\\d{3}\\w+) b/i], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [/\\b(k88) b/i // ZTE K Series Tablet\n    ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [/\\b(nx\\d{3}j) b/i // ZTE Nubia\n    ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [/\\b(gen\\d{3}) b.+49h/i // Swiss GEN Mobile\n    ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [/\\b(zur\\d{3}) b/i // Swiss ZUR Tablet\n    ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [/\\b((zeki)?tb.*\\b) b/i // Zeki Tablets\n    ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [/\\b([yr]\\d{2}) b/i, /\\b(dragon[- ]+touch |dt)(\\w{5}) b/i // Dragon Touch Tablet\n    ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [/\\b(ns-?\\w{0,9}) b/i // Insignia Tablets\n    ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [/\\b((nxa|next)-?\\w{0,9}) b/i // NextBook Tablets\n    ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [/\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones\n    ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [/\\b(lvtel\\-)?(v1[12]) b/i // LvTel Phones\n    ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [/\\b(ph-1) /i // Essential PH-1\n    ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [/\\b(v(100md|700na|7011|917g).*\\b) b/i // Envizen Tablets\n    ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [/\\b(trio[-\\w\\. ]+) b/i // MachSpeed Tablets\n    ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [/\\btu_(1491) b/i // Rotor Tablets\n    ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [/(shield[\\w ]+) b/i // Nvidia Shield Tablets\n    ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [/(sprint) (\\w+)/i // Sprint Phones\n    ], [VENDOR, MODEL, [TYPE, MOBILE]], [/(kin\\.[onetw]{3})/i // Microsoft Kin\n    ], [[MODEL, /\\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i // Zebra\n    ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [/droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [\n    ///////////////////\n    // SMARTTVS\n    ///////////////////\n\n    /smart-tv.+(samsung)/i // Samsung\n    ], [VENDOR, [TYPE, SMARTTV]], [/hbbtv.+maple;(\\d+)/i], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [/(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i // LG SmartTV\n    ], [[VENDOR, LG], [TYPE, SMARTTV]], [/(apple) ?tv/i // Apple TV\n    ], [VENDOR, [MODEL, APPLE + ' TV'], [TYPE, SMARTTV]], [/crkey/i // Google Chromecast\n    ], [[MODEL, CHROME + 'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [/droid.+aft(\\w+)( bui|\\))/i // Fire TV\n    ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [/\\(dtv[\\);].+(aquos)/i, /(aquos-tv[\\w ]+)\\)/i // Sharp\n    ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]], [/(bravia[\\w ]+)( bui|\\))/i // Sony\n    ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [/(mitv-\\w{5}) bui/i // Xiaomi\n    ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [/Hbbtv.*(technisat) (.*);/i // TechniSAT\n    ], [VENDOR, MODEL, [TYPE, SMARTTV]], [/\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,\n    // Roku\n    /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w\\+ ]*; *([\\w\\d][^;]*);([^;]*)/i // HbbTV devices\n    ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [/\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i // SmartTV from Unidentified Vendors\n    ], [[TYPE, SMARTTV]], [\n    ///////////////////\n    // CONSOLES\n    ///////////////////\n\n    /(ouya)/i,\n    // Ouya\n    /(nintendo) ([wids3utch]+)/i // Nintendo\n    ], [VENDOR, MODEL, [TYPE, CONSOLE]], [/droid.+; (shield) bui/i // Nvidia\n    ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [/(playstation [345portablevi]+)/i // Playstation\n    ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [/\\b(xbox(?: one)?(?!; xbox))[\\); ]/i // Microsoft Xbox\n    ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [\n    ///////////////////\n    // WEARABLES\n    ///////////////////\n\n    /\\b(sm-[lr]\\d\\d[05][fnuw]?s?)\\b/i // Samsung Galaxy Watch\n    ], [MODEL, [VENDOR, SAMSUNG], [TYPE, WEARABLE]], [/((pebble))app/i // Pebble\n    ], [VENDOR, MODEL, [TYPE, WEARABLE]], [/(watch)(?: ?os[,\\/]|\\d,\\d\\/)[\\d\\.]+/i // Apple Watch\n    ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [/droid.+; (glass) \\d/i // Google Glass\n    ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [/droid.+; (wt63?0{2,3})\\)/i], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [\n    ///////////////////\n    // XR\n    ///////////////////\n\n    /droid.+; (glass) \\d/i // Google Glass\n    ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [/(pico) (4|neo3(?: link|pro)?)/i // Pico\n    ], [VENDOR, MODEL, [TYPE, WEARABLE]], [/; (quest( \\d| pro)?)/i // Oculus Quest\n    ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [\n    ///////////////////\n    // EMBEDDED\n    ///////////////////\n\n    /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i // Tesla\n    ], [VENDOR, [TYPE, EMBEDDED]], [/(aeobc)\\b/i // Echo Dot\n    ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [\n    ////////////////////\n    // MIXED (GENERIC)\n    ///////////////////\n\n    /droid .+?; ([^;]+?)(?: bui|; wv\\)|\\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors\n    ], [MODEL, [TYPE, MOBILE]], [/droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors\n    ], [MODEL, [TYPE, TABLET]], [/\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i // Unidentifiable Tablet\n    ], [[TYPE, TABLET]], [/(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile\n    ], [[TYPE, MOBILE]], [/(android[-\\w\\. ]{0,9});.+buil/i // Generic Android Device\n    ], [MODEL, [VENDOR, 'Generic']]],\n    engine: [[/windows.+ edge\\/([\\w\\.]+)/i // EdgeHTML\n    ], [VERSION, [NAME, EDGE + 'HTML']], [/(arkweb)\\/([\\w\\.]+)/i // ArkWeb\n    ], [NAME, VERSION], [/webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i // Blink\n    ], [VERSION, [NAME, 'Blink']], [/(presto)\\/([\\w\\.]+)/i,\n    // Presto\n    /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\\/([\\w\\.]+)/i,\n    // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna/Servo\n    /ekioh(flow)\\/([\\w\\.]+)/i,\n    // Flow\n    /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,\n    // KHTML/Tasman/Links\n    /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i,\n    // iCab\n    /\\b(libweb)/i], [NAME, VERSION], [/rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i // Gecko\n    ], [VERSION, NAME]],\n    os: [[\n    // Windows\n    /microsoft (windows) (vista|xp)/i // Windows (iTunes)\n    ], [NAME, VERSION], [/(windows (?:phone(?: os)?|mobile))[\\/ ]?([\\d\\.\\w ]*)/i // Windows Phone\n    ], [NAME, [VERSION, strMapper, windowsVersionMap]], [/windows nt 6\\.2; (arm)/i,\n    // Windows RT\n    /windows[\\/ ]?([ntce\\d\\. ]+\\w)(?!.+xbox)/i, /(?:win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [\n    // iOS/macOS\n    /ip[honead]{2,4}\\b(?:.*os ([\\w]+) like mac|; opera)/i,\n    // iOS\n    /(?:ios;fbsv\\/|iphone.+ios[\\/ ])([\\d\\.]+)/i, /cfnetwork\\/.+darwin/i], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [/(mac os x) ?([\\w\\. ]*)/i, /(macintosh|mac_powerpc\\b)(?!.+haiku)/i // Mac OS\n    ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [\n    // Mobile OSes\n    /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i // Android-x86/HarmonyOS\n    ], [VERSION, NAME], [\n    // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS/OpenHarmony\n    /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish|openharmony)[-\\/ ]?([\\w\\.]*)/i, /(blackberry)\\w*\\/([\\w\\.]*)/i,\n    // Blackberry\n    /(tizen|kaios)[\\/ ]([\\w\\.]+)/i,\n    // Tizen/KaiOS\n    /\\((series40);/i // Series 40\n    ], [NAME, VERSION], [/\\(bb(10);/i // BlackBerry 10\n    ], [VERSION, [NAME, BLACKBERRY]], [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\\/ ]?([\\w\\.]*)/i // Symbian\n    ], [VERSION, [NAME, 'Symbian']], [/mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n    ], [VERSION, [NAME, FIREFOX + ' OS']], [/web0s;.+rt(tv)/i, /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i // WebOS\n    ], [VERSION, [NAME, 'webOS']], [/watch(?: ?os[,\\/]|\\d,\\d\\/)([\\d\\.]+)/i // watchOS\n    ], [VERSION, [NAME, 'watchOS']], [\n    // Google Chromecast\n    /crkey\\/([\\d\\.]+)/i // Google Chromecast\n    ], [VERSION, [NAME, CHROME + 'cast']], [/(cros) [\\w]+(?:\\)| ([\\w\\.]+)\\b)/i // Chromium OS\n    ], [[NAME, CHROMIUM_OS], VERSION], [\n    // Smart TVs\n    /panasonic;(viera)/i,\n    // Panasonic Viera\n    /(netrange)mmh/i,\n    // Netrange\n    /(nettv)\\/(\\d+\\.[\\w\\.]+)/i,\n    // NetTV\n\n    // Console\n    /(nintendo|playstation) ([wids345portablevuch]+)/i,\n    // Nintendo/Playstation\n    /(xbox); +xbox ([^\\);]+)/i,\n    // Microsoft Xbox (360, One, X, S, Series X, Series S)\n\n    // Other\n    /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,\n    // Joli/Palm\n    /(mint)[\\/\\(\\) ]?(\\w*)/i,\n    // Mint\n    /(mageia|vectorlinux)[; ]/i,\n    // Mageia/VectorLinux\n    /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n    // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n    /(hurd|linux) ?([\\w\\.]*)/i,\n    // Hurd/Linux\n    /(gnu) ?([\\w\\.]*)/i,\n    // GNU\n    /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i,\n    // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n    /(haiku) (\\w+)/i // Haiku\n    ], [NAME, VERSION], [/(sunos) ?([\\w\\.\\d]*)/i // Solaris\n    ], [[NAME, 'Solaris'], VERSION], [/((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,\n    // Solaris\n    /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,\n    // AIX\n    /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,\n    // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS\n    /(unix) ?([\\w\\.]*)/i // UNIX\n    ], [NAME, VERSION]]\n  };\n\n  /////////////////\n  // Constructor\n  ////////////////\n\n  var UAParser = function (ua, extensions) {\n    if (typeof ua === OBJ_TYPE) {\n      extensions = ua;\n      ua = undefined;\n    }\n    if (!(this instanceof UAParser)) {\n      return new UAParser(ua, extensions).getResult();\n    }\n    var _navigator = typeof window !== UNDEF_TYPE && window.navigator ? window.navigator : undefined;\n    var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);\n    var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined;\n    var _rgxmap = extensions ? extend(regexes, extensions) : regexes;\n    var _isSelfNav = _navigator && _navigator.userAgent == _ua;\n    this.getBrowser = function () {\n      var _browser = {};\n      _browser[NAME] = undefined;\n      _browser[VERSION] = undefined;\n      rgxMapper.call(_browser, _ua, _rgxmap.browser);\n      _browser[MAJOR] = majorize(_browser[VERSION]);\n      // Brave-specific detection\n      if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {\n        _browser[NAME] = 'Brave';\n      }\n      return _browser;\n    };\n    this.getCPU = function () {\n      var _cpu = {};\n      _cpu[ARCHITECTURE] = undefined;\n      rgxMapper.call(_cpu, _ua, _rgxmap.cpu);\n      return _cpu;\n    };\n    this.getDevice = function () {\n      var _device = {};\n      _device[VENDOR] = undefined;\n      _device[MODEL] = undefined;\n      _device[TYPE] = undefined;\n      rgxMapper.call(_device, _ua, _rgxmap.device);\n      if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {\n        _device[TYPE] = MOBILE;\n      }\n      // iPadOS-specific detection: identified as Mac, but has some iOS-only properties\n      if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {\n        _device[MODEL] = 'iPad';\n        _device[TYPE] = TABLET;\n      }\n      return _device;\n    };\n    this.getEngine = function () {\n      var _engine = {};\n      _engine[NAME] = undefined;\n      _engine[VERSION] = undefined;\n      rgxMapper.call(_engine, _ua, _rgxmap.engine);\n      return _engine;\n    };\n    this.getOS = function () {\n      var _os = {};\n      _os[NAME] = undefined;\n      _os[VERSION] = undefined;\n      rgxMapper.call(_os, _ua, _rgxmap.os);\n      if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != 'Unknown') {\n        _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS); // backward compatibility\n      }\n      return _os;\n    };\n    this.getResult = function () {\n      return {\n        ua: this.getUA(),\n        browser: this.getBrowser(),\n        engine: this.getEngine(),\n        os: this.getOS(),\n        device: this.getDevice(),\n        cpu: this.getCPU()\n      };\n    };\n    this.getUA = function () {\n      return _ua;\n    };\n    this.setUA = function (ua) {\n      _ua = typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;\n      return this;\n    };\n    this.setUA(_ua);\n    return this;\n  };\n  UAParser.VERSION = LIBVERSION;\n  UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);\n  UAParser.CPU = enumerize([ARCHITECTURE]);\n  UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);\n  UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\n\n  ///////////\n  // Export\n  //////////\n\n  // check js environment\n  if (typeof exports !== UNDEF_TYPE) {\n    // nodejs env\n    if (typeof module !== UNDEF_TYPE && module.exports) {\n      exports = module.exports = UAParser;\n    }\n    exports.UAParser = UAParser;\n  } else {\n    // requirejs env (optional)\n    if (typeof define === FUNC_TYPE && define.amd) {\n      define(function () {\n        return UAParser;\n      });\n    } else if (typeof window !== UNDEF_TYPE) {\n      // browser env\n      window.UAParser = UAParser;\n    }\n  }\n\n  // jQuery/Zepto specific (optional)\n  // Note:\n  //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n  //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n  //   and we should catch that.\n  var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);\n  if ($ && !$.ua) {\n    var parser = new UAParser();\n    $.ua = parser.getResult();\n    $.ua.get = function () {\n      return parser.getUA();\n    };\n    $.ua.set = function (ua) {\n      parser.setUA(ua);\n      var result = parser.getResult();\n      for (var prop in result) {\n        $.ua[prop] = result[prop];\n      }\n    };\n  }\n})(typeof window === 'object' ? window : this);", "var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{\n    name: 'name'\n  }],\n  i: [{\n    name: 'description'\n  }],\n  u: [{\n    name: 'uri'\n  }],\n  e: [{\n    name: 'email'\n  }],\n  p: [{\n    name: 'phone'\n  }],\n  z: [{\n    name: 'timezones'\n  }],\n  // TODO: this one can actually be parsed properly...\n  r: [{\n    name: 'repeats'\n  }],\n  // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [{\n    // a=rtpmap:110 opus/48000/2\n    push: 'rtp',\n    reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n    names: ['payload', 'codec', 'rate', 'encoding'],\n    format: function (o) {\n      return o.encoding ? 'rtpmap:%d %s/%s/%s' : o.rate ? 'rtpmap:%d %s/%s' : 'rtpmap:%d %s';\n    }\n  }, {\n    // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n    // a=fmtp:111 minptime=10; useinbandfec=1\n    push: 'fmtp',\n    reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n    names: ['payload', 'config'],\n    format: 'fmtp:%d %s'\n  }, {\n    // a=control:streamid=0\n    name: 'control',\n    reg: /^control:(.*)/,\n    format: 'control:%s'\n  }, {\n    // a=rtcp:65179 IN IP4 193.84.77.194\n    name: 'rtcp',\n    reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n    names: ['port', 'netType', 'ipVer', 'address'],\n    format: function (o) {\n      return o.address != null ? 'rtcp:%d %s IP%d %s' : 'rtcp:%d';\n    }\n  }, {\n    // a=rtcp-fb:98 trr-int 100\n    push: 'rtcpFbTrrInt',\n    reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n    names: ['payload', 'value'],\n    format: 'rtcp-fb:%s trr-int %d'\n  }, {\n    // a=rtcp-fb:98 nack rpsi\n    push: 'rtcpFb',\n    reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n    names: ['payload', 'type', 'subtype'],\n    format: function (o) {\n      return o.subtype != null ? 'rtcp-fb:%s %s %s' : 'rtcp-fb:%s %s';\n    }\n  }, {\n    // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n    // a=extmap:1/recvonly URI-gps-string\n    // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n    push: 'ext',\n    reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n    names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n    format: function (o) {\n      return 'extmap:%d' + (o.direction ? '/%s' : '%v') + (o['encrypt-uri'] ? ' %s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n    }\n  }, {\n    // a=extmap-allow-mixed\n    name: 'extmapAllowMixed',\n    reg: /^(extmap-allow-mixed)/\n  }, {\n    // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n    push: 'crypto',\n    reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n    names: ['id', 'suite', 'config', 'sessionConfig'],\n    format: function (o) {\n      return o.sessionConfig != null ? 'crypto:%d %s %s %s' : 'crypto:%d %s %s';\n    }\n  }, {\n    // a=setup:actpass\n    name: 'setup',\n    reg: /^setup:(\\w*)/,\n    format: 'setup:%s'\n  }, {\n    // a=connection:new\n    name: 'connectionType',\n    reg: /^connection:(new|existing)/,\n    format: 'connection:%s'\n  }, {\n    // a=mid:1\n    name: 'mid',\n    reg: /^mid:([^\\s]*)/,\n    format: 'mid:%s'\n  }, {\n    // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n    name: 'msid',\n    reg: /^msid:(.*)/,\n    format: 'msid:%s'\n  }, {\n    // a=ptime:20\n    name: 'ptime',\n    reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n    format: 'ptime:%d'\n  }, {\n    // a=maxptime:60\n    name: 'maxptime',\n    reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n    format: 'maxptime:%d'\n  }, {\n    // a=sendrecv\n    name: 'direction',\n    reg: /^(sendrecv|recvonly|sendonly|inactive)/\n  }, {\n    // a=ice-lite\n    name: 'icelite',\n    reg: /^(ice-lite)/\n  }, {\n    // a=ice-ufrag:F7gI\n    name: 'iceUfrag',\n    reg: /^ice-ufrag:(\\S*)/,\n    format: 'ice-ufrag:%s'\n  }, {\n    // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n    name: 'icePwd',\n    reg: /^ice-pwd:(\\S*)/,\n    format: 'ice-pwd:%s'\n  }, {\n    // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n    name: 'fingerprint',\n    reg: /^fingerprint:(\\S*) (\\S*)/,\n    names: ['type', 'hash'],\n    format: 'fingerprint:%s %s'\n  }, {\n    // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n    // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n    // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n    // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n    // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n    push: 'candidates',\n    reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n    names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n    format: function (o) {\n      var str = 'candidate:%s %d %s %d %s %d typ %s';\n      str += o.raddr != null ? ' raddr %s rport %d' : '%v%v';\n\n      // NB: candidate has three optional chunks, so %void middles one if it's missing\n      str += o.tcptype != null ? ' tcptype %s' : '%v';\n      if (o.generation != null) {\n        str += ' generation %d';\n      }\n      str += o['network-id'] != null ? ' network-id %d' : '%v';\n      str += o['network-cost'] != null ? ' network-cost %d' : '%v';\n      return str;\n    }\n  }, {\n    // a=end-of-candidates (keep after the candidates line for readability)\n    name: 'endOfCandidates',\n    reg: /^(end-of-candidates)/\n  }, {\n    // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n    name: 'remoteCandidates',\n    reg: /^remote-candidates:(.*)/,\n    format: 'remote-candidates:%s'\n  }, {\n    // a=ice-options:google-ice\n    name: 'iceOptions',\n    reg: /^ice-options:(\\S*)/,\n    format: 'ice-options:%s'\n  }, {\n    // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n    push: 'ssrcs',\n    reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n    names: ['id', 'attribute', 'value'],\n    format: function (o) {\n      var str = 'ssrc:%d';\n      if (o.attribute != null) {\n        str += ' %s';\n        if (o.value != null) {\n          str += ':%s';\n        }\n      }\n      return str;\n    }\n  }, {\n    // a=ssrc-group:FEC 1 2\n    // a=ssrc-group:FEC-FR 3004364195 1080772241\n    push: 'ssrcGroups',\n    // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n    reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n    names: ['semantics', 'ssrcs'],\n    format: 'ssrc-group:%s %s'\n  }, {\n    // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n    name: 'msidSemantic',\n    reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n    names: ['semantic', 'token'],\n    format: 'msid-semantic: %s %s' // space after ':' is not accidental\n  }, {\n    // a=group:BUNDLE audio video\n    push: 'groups',\n    reg: /^group:(\\w*) (.*)/,\n    names: ['type', 'mids'],\n    format: 'group:%s %s'\n  }, {\n    // a=rtcp-mux\n    name: 'rtcpMux',\n    reg: /^(rtcp-mux)/\n  }, {\n    // a=rtcp-rsize\n    name: 'rtcpRsize',\n    reg: /^(rtcp-rsize)/\n  }, {\n    // a=sctpmap:5000 webrtc-datachannel 1024\n    name: 'sctpmap',\n    reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n    names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n    format: function (o) {\n      return o.maxMessageSize != null ? 'sctpmap:%s %s %s' : 'sctpmap:%s %s';\n    }\n  }, {\n    // a=x-google-flag:conference\n    name: 'xGoogleFlag',\n    reg: /^x-google-flag:([^\\s]*)/,\n    format: 'x-google-flag:%s'\n  }, {\n    // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n    push: 'rids',\n    reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n    names: ['id', 'direction', 'params'],\n    format: function (o) {\n      return o.params ? 'rid:%s %s %s' : 'rid:%s %s';\n    }\n  }, {\n    // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n    // a=imageattr:* send [x=800,y=640] recv *\n    // a=imageattr:100 recv [x=320,y=240]\n    push: 'imageattrs',\n    reg: new RegExp(\n    // a=imageattr:97\n    '^imageattr:(\\\\d+|\\\\*)' +\n    // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n    '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n    // recv [x=330,y=250]\n    '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'),\n    names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n    format: function (o) {\n      return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n    }\n  }, {\n    // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n    // a=simulcast:recv 1;4,5 send 6;7\n    name: 'simulcast',\n    reg: new RegExp(\n    // a=simulcast:\n    '^simulcast:' +\n    // send 1,2,3;~4,~5\n    '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n    // space + recv 6;~7,~8\n    '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n    // end\n    '$'),\n    names: ['dir1', 'list1', 'dir2', 'list2'],\n    format: function (o) {\n      return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n    }\n  }, {\n    // old simulcast draft 03 (implemented by Firefox)\n    //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n    // a=simulcast: recv pt=97;98 send pt=97\n    // a=simulcast: send rid=5;6;7 paused=6,7\n    name: 'simulcast_03',\n    reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n    names: ['value'],\n    format: 'simulcast: %s'\n  }, {\n    // a=framerate:25\n    // a=framerate:29.97\n    name: 'framerate',\n    reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n    format: 'framerate:%s'\n  }, {\n    // RFC4570\n    // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n    name: 'sourceFilter',\n    reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n    names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n    format: 'source-filter: %s %s %s %s %s'\n  }, {\n    // a=bundle-only\n    name: 'bundleOnly',\n    reg: /^(bundle-only)/\n  }, {\n    // a=label:1\n    name: 'label',\n    reg: /^label:(.+)/,\n    format: 'label:%s'\n  }, {\n    // RFC version 26 for SCTP over DTLS\n    // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n    name: 'sctpPort',\n    reg: /^sctp-port:(\\d+)$/,\n    format: 'sctp-port:%s'\n  }, {\n    // RFC version 26 for SCTP over DTLS\n    // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n    name: 'maxMessageSize',\n    reg: /^max-message-size:(\\d+)$/,\n    format: 'max-message-size:%s'\n  }, {\n    // RFC7273\n    // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n    push: 'tsRefClocks',\n    reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n    names: ['clksrc', 'clksrcExt'],\n    format: function (o) {\n      return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n    }\n  }, {\n    // RFC7273\n    // a=mediaclk:direct=963214424\n    name: 'mediaClk',\n    reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n    names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n    format: function (o) {\n      var str = 'mediaclk:';\n      str += o.id != null ? 'id=%s %s' : '%v%s';\n      str += o.mediaClockValue != null ? '=%s' : '';\n      str += o.rateNumerator != null ? ' rate=%s' : '';\n      str += o.rateDenominator != null ? '/%s' : '';\n      return str;\n    }\n  }, {\n    // a=keywds:keywords\n    name: 'keywords',\n    reg: /^keywds:(.+)$/,\n    format: 'keywds:%s'\n  }, {\n    // a=content:main\n    name: 'content',\n    reg: /^content:(.+)/,\n    format: 'content:%s'\n  },\n  // BFCP https://tools.ietf.org/html/rfc4583\n  {\n    // a=floorctrl:c-s\n    name: 'bfcpFloorCtrl',\n    reg: /^floorctrl:(c-only|s-only|c-s)/,\n    format: 'floorctrl:%s'\n  }, {\n    // a=confid:1\n    name: 'bfcpConfId',\n    reg: /^confid:(\\d+)/,\n    format: 'confid:%s'\n  }, {\n    // a=userid:1\n    name: 'bfcpUserId',\n    reg: /^userid:(\\d+)/,\n    format: 'userid:%s'\n  }, {\n    // a=floorid:1\n    name: 'bfcpFloorId',\n    reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n    names: ['id', 'mStream'],\n    format: 'floorid:%s mstrm:%s'\n  }, {\n    // any a= that we don't understand is kept verbatim on media.invalid\n    push: 'invalid',\n    names: ['value']\n  }]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});", "var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  } else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i + 1] != null) {\n        location[names[i]] = toIntIfInt(match[i + 1]);\n      }\n    }\n  }\n};\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  } else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ? {} :\n  // blank object that will be pushed\n  needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\nexports.parse = function (sdp) {\n  var session = {},\n    media = [],\n    location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({\n        rtp: [],\n        fmtp: []\n      });\n      location = media[media.length - 1]; // point at latest media line\n    }\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n  session.media = media; // link it up\n  return session;\n};\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length - 1).split(',').reduce(paramReducer, {});\n  });\n};\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid,\n        paused = false;\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};", "var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n      case '%%':\n        return '%';\n      case '%s':\n        return String(arg);\n      case '%d':\n        return Number(arg);\n      case '%v':\n        return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      } else {\n        // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  } else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = ['v', 'o', 's', 'i', 'u', 'e', 'p', 'c', 'b', 't', 'r', 'z', 'a'];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      } else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        } else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n  return sdp.join('\\r\\n') + '\\r\\n';\n};", "var parser = require('./parser');\nvar writer = require('./writer');\nvar grammar = require('./grammar');\nexports.grammar = grammar;\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;", "/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function (nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = e => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);\n  };\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function (nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);\n  };\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {\n    browser: null,\n    version: null\n  };\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator || !window.navigator.userAgent) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n  const {\n    navigator\n  } = window;\n  if (navigator.mozGetUserMedia) {\n    // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent, /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n    // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent, /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else {\n    // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n  return Object.keys(data).reduce(function (accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {\n      [key]: value\n    });\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' && value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}", "/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils.js';\nexport { shimGetUserMedia } from './getusermedia';\nexport { shimGetDisplayMedia } from './getdisplaymedia';\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n      if (!this._ontrackpoly) {\n        this._ontrackpoly = e => {\n          // onaddstream does not fire when a track is added to an existing\n          // stream. But stream.onaddtrack is implemented so we use that.\n          e.stream.addEventListener('addtrack', te => {\n            let receiver;\n            if (window.RTCPeerConnection.prototype.getReceivers) {\n              receiver = this.getReceivers().find(r => r.track && r.track.id === te.track.id);\n            } else {\n              receiver = {\n                track: te.track\n              };\n            }\n            const event = new Event('track');\n            event.track = te.track;\n            event.receiver = receiver;\n            event.transceiver = {\n              receiver\n            };\n            event.streams = [e.stream];\n            this.dispatchEvent(event);\n          });\n          e.stream.getTracks().forEach(track => {\n            let receiver;\n            if (window.RTCPeerConnection.prototype.getReceivers) {\n              receiver = this.getReceivers().find(r => r.track && r.track.id === track.id);\n            } else {\n              receiver = {\n                track\n              };\n            }\n            const event = new Event('track');\n            event.track = track;\n            event.receiver = receiver;\n            event.transceiver = {\n              receiver\n            };\n            event.streams = [e.stream];\n            this.dispatchEvent(event);\n          });\n        };\n        this.addEventListener('addstream', this._ontrackpoly);\n      }\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver', {\n          value: {\n            receiver: e.receiver\n          }\n        });\n      }\n      return e;\n    });\n  }\n}\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function (pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\n        let sender = origAddTrack.apply(this, arguments);\n        if (!sender) {\n          sender = shimSenderWithDtmf(this, track);\n          this._senders.push(sender);\n        }\n        return sender;\n      };\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n        origRemoveTrack.apply(this, arguments);\n        const idx = this._senders.indexOf(sender);\n        if (idx !== -1) {\n          this._senders.splice(idx, 1);\n        }\n      };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n      this._senders = this._senders || [];\n      origRemoveStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        const sender = this._senders.find(s => s.track === track);\n        if (sender) {\n          // remove sender\n          this._senders.splice(this._senders.indexOf(sender), 1);\n        }\n      });\n    };\n  } else if (typeof window === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n    const fixChromeStats_ = function (response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function (stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function (response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n      return origGetStats.apply(this, [successCallbackWrapper_, selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [function (response) {\n        resolve(makeMapStats(fixChromeStats_(response)));\n      }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n      /* Note: this will include stats of all senders that\n       *   send a track with the same id as sender.track as\n       *   it is not possible to identify the RTCRtpSender.\n       */\n      utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n        const receivers = origGetReceivers.apply(this, []);\n        receivers.forEach(receiver => receiver._pc = this);\n        return receivers;\n      };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result => utils.filterStats(result, receiver.track, false));\n    };\n  }\n  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || sender && receiver) {\n        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    return Object.keys(this._shimmedLocalStreams).map(streamId => this._shimmedLocalStreams[streamId][0]);\n  };\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\n    if (!stream) {\n      return origAddTrack.apply(this, arguments);\n    }\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    const sender = origAddTrack.apply(this, arguments);\n    if (!this._shimmedLocalStreams[stream.id]) {\n      this._shimmedLocalStreams[stream.id] = [stream, sender];\n    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n      this._shimmedLocalStreams[stream.id].push(sender);\n    }\n    return sender;\n  };\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.', 'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders().filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    delete this._shimmedLocalStreams[stream.id];\n    return origRemoveStream.apply(this, arguments);\n  };\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n    if (sender) {\n      Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n        const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n        if (idx !== -1) {\n          this._shimmedLocalStreams[streamId].splice(idx, 1);\n        }\n        if (this._shimmedLocalStreams[streamId].length === 1) {\n          delete this._shimmedLocalStreams[streamId];\n        }\n      });\n    }\n    return origRemoveTrack.apply(this, arguments);\n  };\n}\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\n    const nativeStreams = origGetLocalStreams.apply(this);\n    this._reverseStreams = this._reverseStreams || {};\n    return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n  };\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.', 'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);\n    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];\n    delete this._streams[stream.id];\n  };\n  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\n    if (this.signalingState === 'closed') {\n      throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.', 'InvalidStateError');\n    }\n    const streams = [].slice.call(arguments, 1);\n    if (streams.length !== 1 || !streams[0].getTracks().find(t => t === track)) {\n      // this is not fully correct but all we can manage without\n      // [[associated MediaStreams]] internal slot.\n      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');\n    }\n    const alreadyExists = this.getSenders().find(s => s.track === track);\n    if (alreadyExists) {\n      throw new DOMException('Track already exists.', 'InvalidAccessError');\n    }\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n    const oldStream = this._streams[stream.id];\n    if (oldStream) {\n      // this is using odd Chrome behaviour, use with caution:\n      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n      // Note: we rely on the high-level addTrack/dtmf shim to\n      // create the sender with a dtmf sender.\n      oldStream.addTrack(track);\n\n      // Trigger ONN async.\n      Promise.resolve().then(() => {\n        this.dispatchEvent(new Event('negotiationneeded'));\n      });\n    } else {\n      const newStream = new window.MediaStream([track]);\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      this.addStream(newStream);\n    }\n    return this.getSenders().find(s => s.track === track);\n  };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function (method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {\n      [method]() {\n        const args = arguments;\n        const isLegacyCall = arguments.length && typeof arguments[0] === 'function';\n        if (isLegacyCall) {\n          return nativeMethod.apply(this, [description => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          }, err => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]]);\n        }\n        return nativeMethod.apply(this, arguments).then(description => replaceInternalStreamId(this, description));\n      }\n    };\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n  const origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {\n    if (!arguments.length || !arguments[0].type) {\n      return origSetLocalDescription.apply(this, arguments);\n    }\n    arguments[0] = replaceExternalStreamId(this, arguments[0]);\n    return origSetLocalDescription.apply(this, arguments);\n  };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {\n    get() {\n      const description = origLocalDescription.get.apply(this);\n      if (description.type === '') {\n        return description;\n      }\n      return replaceInternalStreamId(this, description);\n    }\n  });\n  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\n    if (this.signalingState === 'closed') {\n      throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.', 'InvalidStateError');\n    }\n    // We can not yet check for sender instanceof RTCRtpSender\n    // since we shim RTPSender. So we check if sender._pc is set.\n    if (!sender._pc) {\n      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');\n    }\n    const isLocal = sender._pc === this;\n    if (!isLocal) {\n      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');\n    }\n\n    // Search for the native stream the senders track belongs to.\n    this._streams = this._streams || {};\n    let stream;\n    Object.keys(this._streams).forEach(streamid => {\n      const hasTrack = this._streams[streamid].getTracks().find(track => sender.track === track);\n      if (hasTrack) {\n        stream = this._streams[streamid];\n      }\n    });\n    if (stream) {\n      if (stream.getTracks().length === 1) {\n        // if this is the last track of the stream, remove the stream. This\n        // takes care of any shimmed _senders.\n        this.removeStream(this._reverseStreams[stream.id]);\n      } else {\n        // relying on the same odd chrome behaviour as above.\n        stream.removeTrack(sender.track);\n      }\n      this.dispatchEvent(new Event('negotiationneeded'));\n    }\n  };\n}\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n      const nativeMethod = window.RTCPeerConnection.prototype[method];\n      const methodObj = {\n        [method]() {\n          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n          return nativeMethod.apply(this, arguments);\n        }\n      };\n      window.RTCPeerConnection.prototype[method] = methodObj[method];\n    });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}", "/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils.js';\nconst logging = utils.log;\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  if (!navigator.mediaDevices) {\n    return;\n  }\n  const constraintsToChrome_ = function (c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = typeof c[key] === 'object' ? c[key] : {\n        ideal: c[key]\n      };\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function (prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return name === 'deviceId' ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n  const shimConstraints_ = function (constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function (obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && (typeof face === 'object' ? face : {\n        ideal: face\n      });\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices().then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match => d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {\n                exact: dev.deviceId\n              } : {\n                ideal: dev.deviceId\n              };\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n  const shimError_ = function (e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n  const getUserMedia_ = function (constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function (cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}", "/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!window.navigator.mediaDevices) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' + 'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {\n    return getSourceId(constraints).then(sourceId => {\n      const widthSpecified = constraints.video && constraints.video.width;\n      const heightSpecified = constraints.video && constraints.video.height;\n      const frameRateSpecified = constraints.video && constraints.video.frameRate;\n      constraints.video = {\n        mandatory: {\n          chromeMediaSource: 'desktop',\n          chromeMediaSourceId: sourceId,\n          maxFrameRate: frameRateSpecified || 3\n        }\n      };\n      if (widthSpecified) {\n        constraints.video.mandatory.maxWidth = widthSpecified;\n      }\n      if (heightSpecified) {\n        constraints.video.mandatory.maxHeight = heightSpecified;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    });\n  };\n}", "/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport { shimGetUserMedia } from './getusermedia';\nexport { shimGetDisplayMedia } from './getdisplaymedia';\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {\n          receiver: this.receiver\n        };\n      }\n    });\n  }\n}\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\n      const nativeMethod = window.RTCPeerConnection.prototype[method];\n      const methodObj = {\n        [method]() {\n          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\n          return nativeMethod.apply(this, arguments);\n        }\n      };\n      window.RTCPeerConnection.prototype[method] = methodObj[method];\n    });\n  }\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null]).then(stats => {\n      if (browserDetails.version < 53 && !onSucc) {\n        // Shim only promise getStats with spec-hyphens in type names\n        // Leave callback version alone; misc old uses of forEach before Map\n        try {\n          stats.forEach(stat => {\n            stat.type = modernStatsTypes[stat.type] || stat.type;\n          });\n        } catch (e) {\n          if (e.name !== 'TypeError') {\n            throw e;\n          }\n          // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n          stats.forEach((stat, i) => {\n            stats.set(i, Object.assign({}, stat, {\n              type: modernStatsTypes[stat.type] || stat.type\n            }));\n          });\n        }\n      }\n      return stats;\n    }).then(onSucc, onErr);\n  };\n}\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());\n  };\n}\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n    utils.deprecated('removeStream', 'removeTrack');\n    this.getSenders().forEach(sender => {\n      if (sender.track && stream.getTracks().includes(sender.track)) {\n        this.removeTrack(sender);\n      }\n    });\n  };\n}\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\n      this.setParametersPromises = [];\n      // WebIDL input coercion and validation\n      let sendEncodings = arguments[1] && arguments[1].sendEncodings;\n      if (sendEncodings === undefined) {\n        sendEncodings = [];\n      }\n      sendEncodings = [...sendEncodings];\n      const shouldPerformCheck = sendEncodings.length > 0;\n      if (shouldPerformCheck) {\n        // If sendEncodings params are provided, validate grammar\n        sendEncodings.forEach(encodingParam => {\n          if ('rid' in encodingParam) {\n            const ridRegex = /^[a-z0-9]{0,16}$/i;\n            if (!ridRegex.test(encodingParam.rid)) {\n              throw new TypeError('Invalid RID value provided.');\n            }\n          }\n          if ('scaleResolutionDownBy' in encodingParam) {\n            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n              throw new RangeError('scale_resolution_down_by must be >= 1.0');\n            }\n          }\n          if ('maxFramerate' in encodingParam) {\n            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n              throw new RangeError('max_framerate must be >= 0.0');\n            }\n          }\n        });\n      }\n      const transceiver = origAddTransceiver.apply(this, arguments);\n      if (shouldPerformCheck) {\n        // Check if the init options were applied. If not we do this in an\n        // asynchronous way and save the promise reference in a global object.\n        // This is an ugly hack, but at the same time is way more robust than\n        // checking the sender parameters before and after the createOffer\n        // Also note that after the createoffer we are not 100% sure that\n        // the params were asynchronously applied so we might miss the\n        // opportunity to recreate offer.\n        const {\n          sender\n        } = transceiver;\n        const params = sender.getParameters();\n        if (!('encodings' in params) ||\n        // Avoid being fooled by patched getParameters() below.\n        params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {\n          params.encodings = sendEncodings;\n          sender.sendEncodings = sendEncodings;\n          this.setParametersPromises.push(sender.setParameters(params).then(() => {\n            delete sender.sendEncodings;\n          }).catch(() => {\n            delete sender.sendEncodings;\n          }));\n        }\n      }\n      return transceiver;\n    };\n  }\n}\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters = function getParameters() {\n      const params = origGetParameters.apply(this, arguments);\n      if (!('encodings' in params)) {\n        params.encodings = [].concat(this.sendEncodings || [{}]);\n      }\n      return params;\n    };\n  }\n}\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises).then(() => {\n        return origCreateOffer.apply(this, arguments);\n      }).finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises).then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      }).finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}", "/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n  navigator.getUserMedia = function (constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function (obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function (c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function () {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function (c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}", "/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {\n    if (!(constraints && constraints.video)) {\n      const err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');\n      err.name = 'NotFoundError';\n      // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n      err.code = 8;\n      return Promise.reject(err);\n    }\n    if (constraints.video === true) {\n      constraints.video = {\n        mediaSource: preferredMediaSource\n      };\n    } else {\n      constraints.video.mediaSource = preferredMediaSource;\n    }\n    return window.navigator.mediaDevices.getUserMedia(constraints);\n  };\n}", "/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\n\nimport * as utils from '../utils';\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      return this._localStreams;\n    };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track, stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track, stream));\n    };\n    window.RTCPeerConnection.prototype.addTrack = function addTrack(track, ...streams) {\n      if (streams) {\n        streams.forEach(stream => {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (!this._localStreams.includes(stream)) {\n            this._localStreams.push(stream);\n          }\n        });\n      }\n      return _addTrack.apply(this, arguments);\n    };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      const index = this._localStreams.indexOf(stream);\n      if (index === -1) {\n        return;\n      }\n      this._localStreams.splice(index, 1);\n      const tracks = stream.getTracks();\n      this.getSenders().forEach(sender => {\n        if (tracks.includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n  }\n}\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {\n      return this._remoteStreams ? this._remoteStreams : [];\n    };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = e => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n      const pc = this;\n      if (!this._onaddstreampoly) {\n        this.addEventListener('track', this._onaddstreampoly = function (e) {\n          e.streams.forEach(stream => {\n            if (!pc._remoteStreams) {\n              pc._remoteStreams = [];\n            }\n            if (pc._remoteStreams.indexOf(stream) >= 0) {\n              return;\n            }\n            pc._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            pc.dispatchEvent(event);\n          });\n        });\n      }\n      return origSetRemoteDescription.apply(pc, arguments);\n    };\n  }\n}\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n  prototype.createOffer = function createOffer(successCallback, failureCallback) {\n    const options = arguments.length >= 2 ? arguments[2] : arguments[0];\n    const promise = origCreateOffer.apply(this, [options]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {\n    const options = arguments.length >= 2 ? arguments[2] : arguments[0];\n    const promise = origCreateAnswer.apply(this, [options]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  let withCallback = function (description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n  withCallback = function (description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n  withCallback = function (candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = constraints => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);\n    }.bind(navigator);\n  }\n}\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({}, constraints, {\n      video: utils.compactObject(constraints.video)\n    });\n  }\n  return constraints;\n}\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {\n    if (pcConfig && pcConfig.iceServers) {\n      const newIceServers = [];\n      for (let i = 0; i < pcConfig.iceServers.length; i++) {\n        let server = pcConfig.iceServers[i];\n        if (server.urls === undefined && server.url) {\n          utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n          server = JSON.parse(JSON.stringify(server));\n          server.urls = server.url;\n          delete server.url;\n          newIceServers.push(server);\n        } else {\n          newIceServers.push(pcConfig.iceServers[i]);\n        }\n      }\n      pcConfig.iceServers = newIceServers;\n    }\n    return new OrigPeerConnection(pcConfig, pcConstraints);\n  };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {\n          receiver: this.receiver\n        };\n      }\n    });\n  }\n}\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {\n    if (offerOptions) {\n      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n        // support bit values\n        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;\n      }\n      const audioTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'audio');\n      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n        if (audioTransceiver.direction === 'sendrecv') {\n          if (audioTransceiver.setDirection) {\n            audioTransceiver.setDirection('sendonly');\n          } else {\n            audioTransceiver.direction = 'sendonly';\n          }\n        } else if (audioTransceiver.direction === 'recvonly') {\n          if (audioTransceiver.setDirection) {\n            audioTransceiver.setDirection('inactive');\n          } else {\n            audioTransceiver.direction = 'inactive';\n          }\n        }\n      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {\n        this.addTransceiver('audio', {\n          direction: 'recvonly'\n        });\n      }\n      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n        // support bit values\n        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;\n      }\n      const videoTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'video');\n      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n        if (videoTransceiver.direction === 'sendrecv') {\n          if (videoTransceiver.setDirection) {\n            videoTransceiver.setDirection('sendonly');\n          } else {\n            videoTransceiver.direction = 'sendonly';\n          }\n        } else if (videoTransceiver.direction === 'recvonly') {\n          if (videoTransceiver.setDirection) {\n            videoTransceiver.setDirection('inactive');\n          } else {\n            videoTransceiver.direction = 'inactive';\n          }\n        }\n      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {\n        this.addTransceiver('video', {\n          direction: 'recvonly'\n        });\n      }\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}", "/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {\n    return;\n  }\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substring(2);\n    }\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      for (const key in parsedCandidate) {\n        if (!(key in nativeCandidate)) {\n          Object.defineProperty(nativeCandidate, key, {\n            value: parsedCandidate[key]\n          });\n        }\n      }\n\n      // Override serializer to not serialize the extra attributes.\n      nativeCandidate.toJSON = function toJSON() {\n        return {\n          candidate: nativeCandidate.candidate,\n          sdpMid: nativeCandidate.sdpMid,\n          sdpMLineIndex: nativeCandidate.sdpMLineIndex,\n          usernameFragment: nativeCandidate.usernameFragment\n        };\n      };\n      return nativeCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\nexport function shimRTCIceCandidateRelayProtocol(window) {\n  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'relayProtocol' in window.RTCIceCandidate.prototype) {\n    return;\n  }\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      const parsedCandidate = SDPUtils.parseCandidate(e.candidate.candidate);\n      if (parsedCandidate.type === 'relay') {\n        // This is a libwebrtc-specific mapping of local type preference\n        // to relayProtocol.\n        e.candidate.relayProtocol = {\n          0: 'tls',\n          1: 'tcp',\n          2: 'udp'\n        }[parsedCandidate.priority >> 24];\n      }\n    }\n    return e;\n  });\n}\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n  const sctpInDescription = function (description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n  const getRemoteFirefoxVersion = function (description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n  const getCanSendMaxMessageSize = function (remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n  const getMaxMessageSize = function (description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n    const match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substring(19), 10);\n    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n  const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\n    this._sctp = null;\n    // Chrome decided to not expose .sctp in plan-b mode.\n    // As usual, adapter.js has to do an 'ugly worakaround'\n    // to cover up the mess.\n    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n      const {\n        sdpSemantics\n      } = this.getConfiguration();\n      if (sdpSemantics === 'plan-b') {\n        Object.defineProperty(this, 'sctp', {\n          get() {\n            return typeof this._sctp === 'undefined' ? null : this._sctp;\n          },\n          enumerable: true,\n          configurable: true\n        });\n      }\n    }\n    if (sctpInDescription(arguments[0])) {\n      // Check if the remote is FF.\n      const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n      // Get the maximum message size the local peer is capable of sending\n      const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n      // Get the maximum message size of the remote peer.\n      const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n      // Determine final maximum message size\n      let maxMessageSize;\n      if (canSendMMS === 0 && remoteMMS === 0) {\n        maxMessageSize = Number.POSITIVE_INFINITY;\n      } else if (canSendMMS === 0 || remoteMMS === 0) {\n        maxMessageSize = Math.max(canSendMMS, remoteMMS);\n      } else {\n        maxMessageSize = Math.min(canSendMMS, remoteMMS);\n      }\n\n      // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n      // attribute.\n      const sctp = {};\n      Object.defineProperty(sctp, 'maxMessageSize', {\n        get() {\n          return maxMessageSize;\n        }\n      });\n      this._sctp = sctp;\n    }\n    return origSetRemoteDescription.apply(this, arguments);\n  };\n}\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {\n    const dataChannel = origCreateDataChannel.apply(this, arguments);\n    wrapDcSend(dataChannel, this);\n    return dataChannel;\n  };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ['setLocalDescription', 'setRemoteDescription'].forEach(method => {\n    const origMethod = proto[method];\n    proto[method] = function () {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter(line => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {\n    if (!arguments[0]) {\n      if (arguments[1]) {\n        arguments[1].apply(null);\n      }\n      return Promise.resolve();\n    }\n    // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n    // in older versions.\n    // Native support for ignoring exists for Chrome M77+.\n    // Safari ignores as well, exact version unknown but works in the same\n    // version that also ignores addIceCandidate(null).\n    if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {\n      return Promise.resolve();\n    }\n    return nativeAddIceCandidate.apply(this, arguments);\n  };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {\n    let desc = arguments[0] || {};\n    if (typeof desc !== 'object' || desc.type && desc.sdp) {\n      return nativeSetLocalDescription.apply(this, arguments);\n    }\n    // The remaining steps should technically happen when SLD comes off the\n    // RTCPeerConnection's operations chain (not ahead of going on it), but\n    // this is too difficult to shim. Instead, this shim only covers the\n    // common case where the operations chain is empty. This is imperfect, but\n    // should cover many cases. Rationale: Even if we can't reduce the glare\n    // window to zero on imperfect implementations, there's value in tapping\n    // into the perfect negotiation pattern that several browsers support.\n    desc = {\n      type: desc.type,\n      sdp: desc.sdp\n    };\n    if (!desc.type) {\n      switch (this.signalingState) {\n        case 'stable':\n        case 'have-local-offer':\n        case 'have-remote-pranswer':\n          desc.type = 'offer';\n          break;\n        default:\n          desc.type = 'answer';\n          break;\n      }\n    }\n    if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {\n      return nativeSetLocalDescription.apply(this, [desc]);\n    }\n    const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n    return func.apply(this).then(d => nativeSetLocalDescription.apply(this, [d]));\n  };\n}", "/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n// Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({\n  window\n} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection || !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimRTCIceCandidateRelayProtocol(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection || !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimRTCIceCandidateRelayProtocol(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n  return adapter;\n}", "/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport { adapterFactory } from './adapter_factory.js';\nconst adapter = adapterFactory({\n  window: typeof window === 'undefined' ? undefined : window\n});\nexport default adapter;", "/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n  let t = typeof value;\n  if (t == \"object\") {\n    if (Array.isArray(value)) return \"array\";\n    if (value === null) return \"null\";\n  }\n  return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n  return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}", "// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++) decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n  // estimate byte size, not accounting for inner padding and whitespace\n  let es = base64Str.length * 3 / 4;\n  // if (es % 3 !== 0)\n  // throw new Error('invalid base64 string');\n  if (base64Str[base64Str.length - 2] == '=') es -= 2;else if (base64Str[base64Str.length - 1] == '=') es -= 1;\n  let bytes = new Uint8Array(es),\n    bytePos = 0,\n    // position in byte array\n    groupPos = 0,\n    // position in base64 group\n    b,\n    // current byte\n    p = 0 // previous byte\n  ;\n  for (let i = 0; i < base64Str.length; i++) {\n    b = decTable[base64Str.charCodeAt(i)];\n    if (b === undefined) {\n      // noinspection FallThroughInSwitchStatementJS\n      switch (base64Str[i]) {\n        case '=':\n          groupPos = 0;\n        // reset state when padding found\n        case '\\n':\n        case '\\r':\n        case '\\t':\n        case ' ':\n          continue;\n        // skip white-space, and padding\n        default:\n          throw Error(`invalid base64 string.`);\n      }\n    }\n    switch (groupPos) {\n      case 0:\n        p = b;\n        groupPos = 1;\n        break;\n      case 1:\n        bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n        p = b;\n        groupPos = 2;\n        break;\n      case 2:\n        bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n        p = b;\n        groupPos = 3;\n        break;\n      case 3:\n        bytes[bytePos++] = (p & 3) << 6 | b;\n        groupPos = 0;\n        break;\n    }\n  }\n  if (groupPos == 1) throw Error(`invalid base64 string.`);\n  return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n  let base64 = '',\n    groupPos = 0,\n    // position in base64 group\n    b,\n    // current byte\n    p = 0; // carry over from previous byte\n  for (let i = 0; i < bytes.length; i++) {\n    b = bytes[i];\n    switch (groupPos) {\n      case 0:\n        base64 += encTable[b >> 2];\n        p = (b & 3) << 4;\n        groupPos = 1;\n        break;\n      case 1:\n        base64 += encTable[p | b >> 4];\n        p = (b & 15) << 2;\n        groupPos = 2;\n        break;\n      case 2:\n        base64 += encTable[p | b >> 6];\n        base64 += encTable[b & 63];\n        groupPos = 0;\n        break;\n    }\n  }\n  // padding required?\n  if (groupPos) {\n    base64 += encTable[p];\n    base64 += '=';\n    if (groupPos == 1) base64 += '=';\n  }\n  return base64;\n}", "/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n  /**\n   * The symbol used to store unknown fields for a message.\n   * The property must conform to `UnknownFieldContainer`.\n   */\n  UnknownFieldHandler.symbol = Symbol.for(\"protobuf-ts/unknown\");\n  /**\n   * Store an unknown field during binary read directly on the message.\n   * This method is compatible with `BinaryReadOptions.readUnknownField`.\n   */\n  UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n    let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n    container.push({\n      no: fieldNo,\n      wireType,\n      data\n    });\n  };\n  /**\n   * Write unknown fields stored for the message to the writer.\n   * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n   */\n  UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n    for (let {\n      no,\n      wireType,\n      data\n    } of UnknownFieldHandler.list(message)) writer.tag(no, wireType).raw(data);\n  };\n  /**\n   * List unknown fields stored for the message.\n   * Note that there may be multiples fields with the same number.\n   */\n  UnknownFieldHandler.list = (message, fieldNo) => {\n    if (is(message)) {\n      let all = message[UnknownFieldHandler.symbol];\n      return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n    }\n    return [];\n  };\n  /**\n   * Returns the last unknown field by field number.\n   */\n  UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n  const is = message => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n  return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n  /**\n   * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n   */\n  WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n  /**\n   * Used for fixed64, sfixed64, double.\n   * Always 8 bytes with little-endian byte order.\n   */\n  WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n  /**\n   * Used for string, bytes, embedded messages, packed repeated fields\n   *\n   * Only repeated numeric types (types which use the varint, 32-bit,\n   * or 64-bit wire types) can be packed. In proto3, such fields are\n   * packed by default.\n   */\n  WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n  /**\n   * Used for groups\n   * @deprecated\n   */\n  WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n  /**\n   * Used for groups\n   * @deprecated\n   */\n  WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n  /**\n   * Used for fixed32, sfixed32, float.\n   * Always 4 bytes with little-endian byte order.\n   */\n  WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));", "// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n  let lowBits = 0;\n  let highBits = 0;\n  for (let shift = 0; shift < 28; shift += 7) {\n    let b = this.buf[this.pos++];\n    lowBits |= (b & 0x7F) << shift;\n    if ((b & 0x80) == 0) {\n      this.assertBounds();\n      return [lowBits, highBits];\n    }\n  }\n  let middleByte = this.buf[this.pos++];\n  // last four bits of the first 32 bit number\n  lowBits |= (middleByte & 0x0F) << 28;\n  // 3 upper bits are part of the next 32 bit number\n  highBits = (middleByte & 0x70) >> 4;\n  if ((middleByte & 0x80) == 0) {\n    this.assertBounds();\n    return [lowBits, highBits];\n  }\n  for (let shift = 3; shift <= 31; shift += 7) {\n    let b = this.buf[this.pos++];\n    highBits |= (b & 0x7F) << shift;\n    if ((b & 0x80) == 0) {\n      this.assertBounds();\n      return [lowBits, highBits];\n    }\n  }\n  throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n  for (let i = 0; i < 28; i = i + 7) {\n    const shift = lo >>> i;\n    const hasNext = !(shift >>> 7 == 0 && hi == 0);\n    const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n    bytes.push(byte);\n    if (!hasNext) {\n      return;\n    }\n  }\n  const splitBits = lo >>> 28 & 0x0F | (hi & 0x07) << 4;\n  const hasMoreBits = !(hi >> 3 == 0);\n  bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n  if (!hasMoreBits) {\n    return;\n  }\n  for (let i = 3; i < 31; i = i + 7) {\n    const shift = hi >>> i;\n    const hasNext = !(shift >>> 7 == 0);\n    const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n    bytes.push(byte);\n    if (!hasNext) {\n      return;\n    }\n  }\n  bytes.push(hi >>> 31 & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n  // Check for minus sign.\n  let minus = dec[0] == '-';\n  if (minus) dec = dec.slice(1);\n  // Work 6 decimal digits at a time, acting like we're converting base 1e6\n  // digits to binary. This is safe to do with floating point math because\n  // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n  const base = 1e6;\n  let lowBits = 0;\n  let highBits = 0;\n  function add1e6digit(begin, end) {\n    // Note: Number('') is 0.\n    const digit1e6 = Number(dec.slice(begin, end));\n    highBits *= base;\n    lowBits = lowBits * base + digit1e6;\n    // Carry bits from lowBits to highBits\n    if (lowBits >= TWO_PWR_32_DBL) {\n      highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);\n      lowBits = lowBits % TWO_PWR_32_DBL;\n    }\n  }\n  add1e6digit(-24, -18);\n  add1e6digit(-18, -12);\n  add1e6digit(-12, -6);\n  add1e6digit(-6);\n  return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n  // Skip the expensive conversion if the number is small enough to use the\n  // built-in conversions.\n  if (bitsHigh >>> 0 <= 0x1FFFFF) {\n    return '' + (TWO_PWR_32_DBL * bitsHigh + (bitsLow >>> 0));\n  }\n  // What this code is doing is essentially converting the input number from\n  // base-2 to base-1e7, which allows us to represent the 64-bit range with\n  // only 3 (very large) digits. Those digits are then trivial to convert to\n  // a base-10 string.\n  // The magic numbers used here are -\n  // 2^24 = 16777216 = (1,6777216) in base-1e7.\n  // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n  // Split 32:32 representation into 16:24:24 representation so our\n  // intermediate digits don't overflow.\n  let low = bitsLow & 0xFFFFFF;\n  let mid = (bitsLow >>> 24 | bitsHigh << 8) >>> 0 & 0xFFFFFF;\n  let high = bitsHigh >> 16 & 0xFFFF;\n  // Assemble our three base-1e7 digits, ignoring carries. The maximum\n  // value in a digit at this step is representable as a 48-bit integer, which\n  // can be stored in a 64-bit floating point number.\n  let digitA = low + mid * 6777216 + high * 6710656;\n  let digitB = mid + high * 8147497;\n  let digitC = high * 2;\n  // Apply carries from A to B and from B to C.\n  let base = 10000000;\n  if (digitA >= base) {\n    digitB += Math.floor(digitA / base);\n    digitA %= base;\n  }\n  if (digitB >= base) {\n    digitC += Math.floor(digitB / base);\n    digitB %= base;\n  }\n  // Convert base-1e7 digits to base-10, with optional leading zeroes.\n  function decimalFrom1e7(digit1e7, needLeadingZeros) {\n    let partial = digit1e7 ? String(digit1e7) : '';\n    if (needLeadingZeros) {\n      return '0000000'.slice(partial.length) + partial;\n    }\n    return partial;\n  }\n  return decimalFrom1e7(digitC, /*needLeadingZeros=*/0) + decimalFrom1e7(digitB, /*needLeadingZeros=*/digitC) +\n  // If the final 1e7 digit didn't need leading zeros, we would have\n  // returned via the trivial code path at the top.\n  decimalFrom1e7(digitA, /*needLeadingZeros=*/1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n  if (value >= 0) {\n    // write value as varint 32\n    while (value > 0x7f) {\n      bytes.push(value & 0x7f | 0x80);\n      value = value >>> 7;\n    }\n    bytes.push(value);\n  } else {\n    for (let i = 0; i < 9; i++) {\n      bytes.push(value & 127 | 128);\n      value = value >> 7;\n    }\n    bytes.push(1);\n  }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n  let b = this.buf[this.pos++];\n  let result = b & 0x7F;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7F) << 7;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7F) << 14;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7F) << 21;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  // Extract only last 4 bits\n  b = this.buf[this.pos++];\n  result |= (b & 0x0F) << 28;\n  for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++) b = this.buf[this.pos++];\n  if ((b & 0x80) != 0) throw new Error('invalid varint');\n  this.assertBounds();\n  // Result can have 32 bits, convert it to unsigned\n  return result >>> 0;\n}", "import { int64fromString, int64toString } from \"./goog-varint\";\nlet BI;\nexport function detectBi() {\n  const dv = new DataView(new ArrayBuffer(8));\n  const ok = globalThis.BigInt !== undefined && typeof dv.getBigInt64 === \"function\" && typeof dv.getBigUint64 === \"function\" && typeof dv.setBigInt64 === \"function\" && typeof dv.setBigUint64 === \"function\";\n  BI = ok ? {\n    MIN: BigInt(\"-9223372036854775808\"),\n    MAX: BigInt(\"9223372036854775807\"),\n    UMIN: BigInt(\"0\"),\n    UMAX: BigInt(\"18446744073709551615\"),\n    C: BigInt,\n    V: dv\n  } : undefined;\n}\ndetectBi();\nfunction assertBi(bi) {\n  if (!bi) throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\nconst HALF_2_PWR_32 = 0x080000000;\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n  /**\n   * Create a new instance with the given bits.\n   */\n  constructor(lo, hi) {\n    this.lo = lo | 0;\n    this.hi = hi | 0;\n  }\n  /**\n   * Is this instance equal to 0?\n   */\n  isZero() {\n    return this.lo == 0 && this.hi == 0;\n  }\n  /**\n   * Convert to a native number.\n   */\n  toNumber() {\n    let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n    if (!Number.isSafeInteger(result)) throw new Error(\"cannot convert to safe number\");\n    return result;\n  }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n  /**\n   * Create instance from a `string`, `number` or `bigint`.\n   */\n  static from(value) {\n    if (BI)\n      // noinspection FallThroughInSwitchStatementJS\n      switch (typeof value) {\n        case \"string\":\n          if (value == \"0\") return this.ZERO;\n          if (value == \"\") throw new Error('string is no integer');\n          value = BI.C(value);\n        case \"number\":\n          if (value === 0) return this.ZERO;\n          value = BI.C(value);\n        case \"bigint\":\n          if (!value) return this.ZERO;\n          if (value < BI.UMIN) throw new Error('signed value for ulong');\n          if (value > BI.UMAX) throw new Error('ulong too large');\n          BI.V.setBigUint64(0, value, true);\n          return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n      } else switch (typeof value) {\n      case \"string\":\n        if (value == \"0\") return this.ZERO;\n        value = value.trim();\n        if (!RE_DECIMAL_STR.test(value)) throw new Error('string is no integer');\n        let [minus, lo, hi] = int64fromString(value);\n        if (minus) throw new Error('signed value for ulong');\n        return new PbULong(lo, hi);\n      case \"number\":\n        if (value == 0) return this.ZERO;\n        if (!Number.isSafeInteger(value)) throw new Error('number is no integer');\n        if (value < 0) throw new Error('signed value for ulong');\n        return new PbULong(value, value / TWO_PWR_32_DBL);\n    }\n    throw new Error('unknown value ' + typeof value);\n  }\n  /**\n   * Convert to decimal string.\n   */\n  toString() {\n    return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n  }\n  /**\n   * Convert to native bigint.\n   */\n  toBigInt() {\n    assertBi(BI);\n    BI.V.setInt32(0, this.lo, true);\n    BI.V.setInt32(4, this.hi, true);\n    return BI.V.getBigUint64(0, true);\n  }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n  /**\n   * Create instance from a `string`, `number` or `bigint`.\n   */\n  static from(value) {\n    if (BI)\n      // noinspection FallThroughInSwitchStatementJS\n      switch (typeof value) {\n        case \"string\":\n          if (value == \"0\") return this.ZERO;\n          if (value == \"\") throw new Error('string is no integer');\n          value = BI.C(value);\n        case \"number\":\n          if (value === 0) return this.ZERO;\n          value = BI.C(value);\n        case \"bigint\":\n          if (!value) return this.ZERO;\n          if (value < BI.MIN) throw new Error('signed long too small');\n          if (value > BI.MAX) throw new Error('signed long too large');\n          BI.V.setBigInt64(0, value, true);\n          return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n      } else switch (typeof value) {\n      case \"string\":\n        if (value == \"0\") return this.ZERO;\n        value = value.trim();\n        if (!RE_DECIMAL_STR.test(value)) throw new Error('string is no integer');\n        let [minus, lo, hi] = int64fromString(value);\n        if (minus) {\n          if (hi > HALF_2_PWR_32 || hi == HALF_2_PWR_32 && lo != 0) throw new Error('signed long too small');\n        } else if (hi >= HALF_2_PWR_32) throw new Error('signed long too large');\n        let pbl = new PbLong(lo, hi);\n        return minus ? pbl.negate() : pbl;\n      case \"number\":\n        if (value == 0) return this.ZERO;\n        if (!Number.isSafeInteger(value)) throw new Error('number is no integer');\n        return value > 0 ? new PbLong(value, value / TWO_PWR_32_DBL) : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n    }\n    throw new Error('unknown value ' + typeof value);\n  }\n  /**\n   * Do we have a minus sign?\n   */\n  isNegative() {\n    return (this.hi & HALF_2_PWR_32) !== 0;\n  }\n  /**\n   * Negate two's complement.\n   * Invert all the bits and add one to the result.\n   */\n  negate() {\n    let hi = ~this.hi,\n      lo = this.lo;\n    if (lo) lo = ~lo + 1;else hi += 1;\n    return new PbLong(lo, hi);\n  }\n  /**\n   * Convert to decimal string.\n   */\n  toString() {\n    if (BI) return this.toBigInt().toString();\n    if (this.isNegative()) {\n      let n = this.negate();\n      return '-' + int64toString(n.lo, n.hi);\n    }\n    return int64toString(this.lo, this.hi);\n  }\n  /**\n   * Convert to native bigint.\n   */\n  toBigInt() {\n    assertBi(BI);\n    BI.V.setInt32(0, this.lo, true);\n    BI.V.setInt32(4, this.hi, true);\n    return BI.V.getBigInt64(0, true);\n  }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);", "import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nconst defaultsRead = {\n  readUnknownField: true,\n  readerFactory: bytes => new BinaryReader(bytes)\n};\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n  return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nexport class BinaryReader {\n  constructor(buf, textDecoder) {\n    this.varint64 = varint64read; // dirty cast for `this`\n    /**\n     * Read a `uint32` field, an unsigned 32 bit varint.\n     */\n    this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n    this.buf = buf;\n    this.len = buf.length;\n    this.pos = 0;\n    this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder(\"utf-8\", {\n      fatal: true,\n      ignoreBOM: true\n    });\n  }\n  /**\n   * Reads a tag - field number and wire type.\n   */\n  tag() {\n    let tag = this.uint32(),\n      fieldNo = tag >>> 3,\n      wireType = tag & 7;\n    if (fieldNo <= 0 || wireType < 0 || wireType > 5) throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n    return [fieldNo, wireType];\n  }\n  /**\n   * Skip one element on the wire and return the skipped data.\n   * Supports WireType.StartGroup since v2.0.0-alpha.23.\n   */\n  skip(wireType) {\n    let start = this.pos;\n    // noinspection FallThroughInSwitchStatementJS\n    switch (wireType) {\n      case WireType.Varint:\n        while (this.buf[this.pos++] & 0x80) {\n          // ignore\n        }\n        break;\n      case WireType.Bit64:\n        this.pos += 4;\n      case WireType.Bit32:\n        this.pos += 4;\n        break;\n      case WireType.LengthDelimited:\n        let len = this.uint32();\n        this.pos += len;\n        break;\n      case WireType.StartGroup:\n        // From descriptor.proto: Group type is deprecated, not supported in proto3.\n        // But we must still be able to parse and treat as unknown.\n        let t;\n        while ((t = this.tag()[1]) !== WireType.EndGroup) {\n          this.skip(t);\n        }\n        break;\n      default:\n        throw new Error(\"cant skip wire type \" + wireType);\n    }\n    this.assertBounds();\n    return this.buf.subarray(start, this.pos);\n  }\n  /**\n   * Throws error if position in byte array is out of range.\n   */\n  assertBounds() {\n    if (this.pos > this.len) throw new RangeError(\"premature EOF\");\n  }\n  /**\n   * Read a `int32` field, a signed 32 bit varint.\n   */\n  int32() {\n    return this.uint32() | 0;\n  }\n  /**\n   * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n   */\n  sint32() {\n    let zze = this.uint32();\n    // decode zigzag\n    return zze >>> 1 ^ -(zze & 1);\n  }\n  /**\n   * Read a `int64` field, a signed 64-bit varint.\n   */\n  int64() {\n    return new PbLong(...this.varint64());\n  }\n  /**\n   * Read a `uint64` field, an unsigned 64-bit varint.\n   */\n  uint64() {\n    return new PbULong(...this.varint64());\n  }\n  /**\n   * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n   */\n  sint64() {\n    let [lo, hi] = this.varint64();\n    // decode zig zag\n    let s = -(lo & 1);\n    lo = (lo >>> 1 | (hi & 1) << 31) ^ s;\n    hi = hi >>> 1 ^ s;\n    return new PbLong(lo, hi);\n  }\n  /**\n   * Read a `bool` field, a variant.\n   */\n  bool() {\n    let [lo, hi] = this.varint64();\n    return lo !== 0 || hi !== 0;\n  }\n  /**\n   * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n   */\n  fixed32() {\n    return this.view.getUint32((this.pos += 4) - 4, true);\n  }\n  /**\n   * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n   */\n  sfixed32() {\n    return this.view.getInt32((this.pos += 4) - 4, true);\n  }\n  /**\n   * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n   */\n  fixed64() {\n    return new PbULong(this.sfixed32(), this.sfixed32());\n  }\n  /**\n   * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n   */\n  sfixed64() {\n    return new PbLong(this.sfixed32(), this.sfixed32());\n  }\n  /**\n   * Read a `float` field, 32-bit floating point number.\n   */\n  float() {\n    return this.view.getFloat32((this.pos += 4) - 4, true);\n  }\n  /**\n   * Read a `double` field, a 64-bit floating point number.\n   */\n  double() {\n    return this.view.getFloat64((this.pos += 8) - 8, true);\n  }\n  /**\n   * Read a `bytes` field, length-delimited arbitrary data.\n   */\n  bytes() {\n    let len = this.uint32();\n    let start = this.pos;\n    this.pos += len;\n    this.assertBounds();\n    return this.buf.subarray(start, start + len);\n  }\n  /**\n   * Read a `string` field, length-delimited data converted to UTF-8 text.\n   */\n  string() {\n    return this.textDecoder.decode(this.bytes());\n  }\n}", "/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n  if (!condition) {\n    throw new Error(msg);\n  }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n  throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38,\n  FLOAT32_MIN = -3.4028234663852886e+38,\n  UINT32_MAX = 0xFFFFFFFF,\n  INT32_MAX = 0X7FFFFFFF,\n  INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n  if (typeof arg !== \"number\") throw new Error('invalid int 32: ' + typeof arg);\n  if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN) throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n  if (typeof arg !== \"number\") throw new Error('invalid uint 32: ' + typeof arg);\n  if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0) throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n  if (typeof arg !== \"number\") throw new Error('invalid float 32: ' + typeof arg);\n  if (!Number.isFinite(arg)) return;\n  if (arg > FLOAT32_MAX || arg < FLOAT32_MIN) throw new Error('invalid float 32: ' + arg);\n}", "import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nconst defaultsWrite = {\n  writeUnknownFields: true,\n  writerFactory: () => new BinaryWriter()\n};\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n  return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\nexport class BinaryWriter {\n  constructor(textEncoder) {\n    /**\n     * Previous fork states.\n     */\n    this.stack = [];\n    this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n    this.chunks = [];\n    this.buf = [];\n  }\n  /**\n   * Return all bytes written and reset this writer.\n   */\n  finish() {\n    this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n    let len = 0;\n    for (let i = 0; i < this.chunks.length; i++) len += this.chunks[i].length;\n    let bytes = new Uint8Array(len);\n    let offset = 0;\n    for (let i = 0; i < this.chunks.length; i++) {\n      bytes.set(this.chunks[i], offset);\n      offset += this.chunks[i].length;\n    }\n    this.chunks = [];\n    return bytes;\n  }\n  /**\n   * Start a new fork for length-delimited data like a message\n   * or a packed repeated field.\n   *\n   * Must be joined later with `join()`.\n   */\n  fork() {\n    this.stack.push({\n      chunks: this.chunks,\n      buf: this.buf\n    });\n    this.chunks = [];\n    this.buf = [];\n    return this;\n  }\n  /**\n   * Join the last fork. Write its length and bytes, then\n   * return to the previous state.\n   */\n  join() {\n    // get chunk of fork\n    let chunk = this.finish();\n    // restore previous state\n    let prev = this.stack.pop();\n    if (!prev) throw new Error('invalid state, fork stack empty');\n    this.chunks = prev.chunks;\n    this.buf = prev.buf;\n    // write length of chunk as varint\n    this.uint32(chunk.byteLength);\n    return this.raw(chunk);\n  }\n  /**\n   * Writes a tag (field number and wire type).\n   *\n   * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n   *\n   * Generated code should compute the tag ahead of time and call `uint32()`.\n   */\n  tag(fieldNo, type) {\n    return this.uint32((fieldNo << 3 | type) >>> 0);\n  }\n  /**\n   * Write a chunk of raw bytes.\n   */\n  raw(chunk) {\n    if (this.buf.length) {\n      this.chunks.push(new Uint8Array(this.buf));\n      this.buf = [];\n    }\n    this.chunks.push(chunk);\n    return this;\n  }\n  /**\n   * Write a `uint32` value, an unsigned 32 bit varint.\n   */\n  uint32(value) {\n    assertUInt32(value);\n    // write value as varint 32, inlined for speed\n    while (value > 0x7f) {\n      this.buf.push(value & 0x7f | 0x80);\n      value = value >>> 7;\n    }\n    this.buf.push(value);\n    return this;\n  }\n  /**\n   * Write a `int32` value, a signed 32 bit varint.\n   */\n  int32(value) {\n    assertInt32(value);\n    varint32write(value, this.buf);\n    return this;\n  }\n  /**\n   * Write a `bool` value, a variant.\n   */\n  bool(value) {\n    this.buf.push(value ? 1 : 0);\n    return this;\n  }\n  /**\n   * Write a `bytes` value, length-delimited arbitrary data.\n   */\n  bytes(value) {\n    this.uint32(value.byteLength); // write length of chunk as varint\n    return this.raw(value);\n  }\n  /**\n   * Write a `string` value, length-delimited data converted to UTF-8 text.\n   */\n  string(value) {\n    let chunk = this.textEncoder.encode(value);\n    this.uint32(chunk.byteLength); // write length of chunk as varint\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `float` value, 32-bit floating point number.\n   */\n  float(value) {\n    assertFloat32(value);\n    let chunk = new Uint8Array(4);\n    new DataView(chunk.buffer).setFloat32(0, value, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `double` value, a 64-bit floating point number.\n   */\n  double(value) {\n    let chunk = new Uint8Array(8);\n    new DataView(chunk.buffer).setFloat64(0, value, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n   */\n  fixed32(value) {\n    assertUInt32(value);\n    let chunk = new Uint8Array(4);\n    new DataView(chunk.buffer).setUint32(0, value, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n   */\n  sfixed32(value) {\n    assertInt32(value);\n    let chunk = new Uint8Array(4);\n    new DataView(chunk.buffer).setInt32(0, value, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n   */\n  sint32(value) {\n    assertInt32(value);\n    // zigzag encode\n    value = (value << 1 ^ value >> 31) >>> 0;\n    varint32write(value, this.buf);\n    return this;\n  }\n  /**\n   * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n   */\n  sfixed64(value) {\n    let chunk = new Uint8Array(8);\n    let view = new DataView(chunk.buffer);\n    let long = PbLong.from(value);\n    view.setInt32(0, long.lo, true);\n    view.setInt32(4, long.hi, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n   */\n  fixed64(value) {\n    let chunk = new Uint8Array(8);\n    let view = new DataView(chunk.buffer);\n    let long = PbULong.from(value);\n    view.setInt32(0, long.lo, true);\n    view.setInt32(4, long.hi, true);\n    return this.raw(chunk);\n  }\n  /**\n   * Write a `int64` value, a signed 64-bit varint.\n   */\n  int64(value) {\n    let long = PbLong.from(value);\n    varint64write(long.lo, long.hi, this.buf);\n    return this;\n  }\n  /**\n   * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n   */\n  sint64(value) {\n    let long = PbLong.from(value),\n      // zigzag encode\n      sign = long.hi >> 31,\n      lo = long.lo << 1 ^ sign,\n      hi = (long.hi << 1 | long.lo >>> 31) ^ sign;\n    varint64write(lo, hi, this.buf);\n    return this;\n  }\n  /**\n   * Write a `uint64` value, an unsigned 64-bit varint.\n   */\n  uint64(value) {\n    let long = PbULong.from(value);\n    varint64write(long.lo, long.hi, this.buf);\n    return this;\n  }\n}", "const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0\n  },\n  defaultsRead = {\n    ignoreUnknownFields: false\n  };\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n  return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n  return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n  var _a, _b;\n  let c = Object.assign(Object.assign({}, a), b);\n  c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n  return c;\n}", "/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol.for(\"protobuf-ts/message-type\");", "/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n  let capNext = false;\n  const sb = [];\n  for (let i = 0; i < snakeCase.length; i++) {\n    let next = snakeCase.charAt(i);\n    if (next == '_') {\n      capNext = true;\n    } else if (/\\d/.test(next)) {\n      sb.push(next);\n      capNext = true;\n    } else if (capNext) {\n      sb.push(next.toUpperCase());\n      capNext = false;\n    } else if (i == 0) {\n      sb.push(next.toLowerCase());\n    } else {\n      sb.push(next);\n    }\n  }\n  return sb.join('');\n}", "import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n  // 0 is reserved for errors.\n  // Order is weird for historical reasons.\n  ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n  ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n  // negative values are likely.\n  ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n  ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n  // negative values are likely.\n  ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n  ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n  ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n  ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n  ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n  // Tag-delimited aggregate.\n  // Group type is deprecated and not supported in proto3. However, Proto3\n  // implementations should still be able to parse the group wire format and\n  // treat group fields as unknown fields.\n  // TYPE_GROUP = 10,\n  // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n  // New in version 2.\n  ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n  ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n  // TYPE_ENUM = 14,\n  ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n  ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n  ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n  ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n  /**\n   * Use JavaScript `bigint`.\n   *\n   * Field option `[jstype = JS_NORMAL]`.\n   */\n  LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n  /**\n   * Use JavaScript `string`.\n   *\n   * Field option `[jstype = JS_STRING]`.\n   */\n  LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n  /**\n   * Use JavaScript `number`.\n   *\n   * Large values will loose precision.\n   *\n   * Field option `[jstype = JS_NUMBER]`.\n   */\n  LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n  /**\n   * The field is not repeated.\n   */\n  RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n  /**\n   * The field is repeated and should be packed.\n   * Invalid for `bytes` and `string`, they cannot be packed.\n   */\n  RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n  /**\n   * The field is repeated but should not be packed.\n   * The only valid repeat type for repeated `bytes` and `string`.\n   */\n  RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n  var _a, _b, _c, _d;\n  field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n  field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n  field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n  field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : field.repeat ? false : field.oneof ? false : field.kind == \"message\";\n  return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n  var _a;\n  const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n  return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n  var _a;\n  const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n  if (!options) {\n    return undefined;\n  }\n  const optionVal = options[extensionName];\n  if (optionVal === undefined) {\n    return optionVal;\n  }\n  return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n  const options = messageType.options;\n  const optionVal = options[extensionName];\n  if (optionVal === undefined) {\n    return optionVal;\n  }\n  return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}", "/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n  if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n    return false;\n  }\n  switch (typeof any.oneofKind) {\n    case \"string\":\n      if (any[any.oneofKind] === undefined) return false;\n      return Object.keys(any).length == 2;\n    case \"undefined\":\n      return Object.keys(any).length == 1;\n    default:\n      return false;\n  }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n  return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n  if (oneof.oneofKind !== undefined) {\n    delete oneof[oneof.oneofKind];\n  }\n  oneof.oneofKind = kind;\n  if (value !== undefined) {\n    oneof[kind] = value;\n  }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n  if (oneof.oneofKind !== undefined) {\n    delete oneof[oneof.oneofKind];\n  }\n  oneof.oneofKind = kind;\n  if (value !== undefined && kind !== undefined) {\n    oneof[kind] = value;\n  }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n  if (oneof.oneofKind !== undefined) {\n    delete oneof[oneof.oneofKind];\n  }\n  oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n  if (oneof.oneofKind === undefined) {\n    return undefined;\n  }\n  return oneof[oneof.oneofKind];\n}", "import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n  constructor(info) {\n    var _a;\n    this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n  }\n  prepare() {\n    if (this.data) return;\n    const req = [],\n      known = [],\n      oneofs = [];\n    for (let field of this.fields) {\n      if (field.oneof) {\n        if (!oneofs.includes(field.oneof)) {\n          oneofs.push(field.oneof);\n          req.push(field.oneof);\n          known.push(field.oneof);\n        }\n      } else {\n        known.push(field.localName);\n        switch (field.kind) {\n          case \"scalar\":\n          case \"enum\":\n            if (!field.opt || field.repeat) req.push(field.localName);\n            break;\n          case \"message\":\n            if (field.repeat) req.push(field.localName);\n            break;\n          case \"map\":\n            req.push(field.localName);\n            break;\n        }\n      }\n    }\n    this.data = {\n      req,\n      known,\n      oneofs: Object.values(oneofs)\n    };\n  }\n  /**\n   * Is the argument a valid message as specified by the\n   * reflection information?\n   *\n   * Checks all field types recursively. The `depth`\n   * specifies how deep into the structure the check will be.\n   *\n   * With a depth of 0, only the presence of fields\n   * is checked.\n   *\n   * With a depth of 1 or more, the field types are checked.\n   *\n   * With a depth of 2 or more, the members of map, repeated\n   * and message fields are checked.\n   *\n   * Message fields will be checked recursively with depth - 1.\n   *\n   * The number of map entries / repeated values being checked\n   * is < depth.\n   */\n  is(message, depth, allowExcessProperties = false) {\n    if (depth < 0) return true;\n    if (message === null || message === undefined || typeof message != 'object') return false;\n    this.prepare();\n    let keys = Object.keys(message),\n      data = this.data;\n    // if a required field is missing in arg, this cannot be a T\n    if (keys.length < data.req.length || data.req.some(n => !keys.includes(n))) return false;\n    if (!allowExcessProperties) {\n      // if the arg contains a key we dont know, this is not a literal T\n      if (keys.some(k => !data.known.includes(k))) return false;\n    }\n    // \"With a depth of 0, only the presence and absence of fields is checked.\"\n    // \"With a depth of 1 or more, the field types are checked.\"\n    if (depth < 1) {\n      return true;\n    }\n    // check oneof group\n    for (const name of data.oneofs) {\n      const group = message[name];\n      if (!isOneofGroup(group)) return false;\n      if (group.oneofKind === undefined) continue;\n      const field = this.fields.find(f => f.localName === group.oneofKind);\n      if (!field) return false; // we found no field, but have a kind, something is wrong\n      if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth)) return false;\n    }\n    // check types\n    for (const field of this.fields) {\n      if (field.oneof !== undefined) continue;\n      if (!this.field(message[field.localName], field, allowExcessProperties, depth)) return false;\n    }\n    return true;\n  }\n  field(arg, field, allowExcessProperties, depth) {\n    let repeated = field.repeat;\n    switch (field.kind) {\n      case \"scalar\":\n        if (arg === undefined) return field.opt;\n        if (repeated) return this.scalars(arg, field.T, depth, field.L);\n        return this.scalar(arg, field.T, field.L);\n      case \"enum\":\n        if (arg === undefined) return field.opt;\n        if (repeated) return this.scalars(arg, ScalarType.INT32, depth);\n        return this.scalar(arg, ScalarType.INT32);\n      case \"message\":\n        if (arg === undefined) return true;\n        if (repeated) return this.messages(arg, field.T(), allowExcessProperties, depth);\n        return this.message(arg, field.T(), allowExcessProperties, depth);\n      case \"map\":\n        if (typeof arg != 'object' || arg === null) return false;\n        if (depth < 2) return true;\n        if (!this.mapKeys(arg, field.K, depth)) return false;\n        switch (field.V.kind) {\n          case \"scalar\":\n            return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n          case \"enum\":\n            return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n          case \"message\":\n            return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n        }\n        break;\n    }\n    return true;\n  }\n  message(arg, type, allowExcessProperties, depth) {\n    if (allowExcessProperties) {\n      return type.isAssignable(arg, depth);\n    }\n    return type.is(arg, depth);\n  }\n  messages(arg, type, allowExcessProperties, depth) {\n    if (!Array.isArray(arg)) return false;\n    if (depth < 2) return true;\n    if (allowExcessProperties) {\n      for (let i = 0; i < arg.length && i < depth; i++) if (!type.isAssignable(arg[i], depth - 1)) return false;\n    } else {\n      for (let i = 0; i < arg.length && i < depth; i++) if (!type.is(arg[i], depth - 1)) return false;\n    }\n    return true;\n  }\n  scalar(arg, type, longType) {\n    let argType = typeof arg;\n    switch (type) {\n      case ScalarType.UINT64:\n      case ScalarType.FIXED64:\n      case ScalarType.INT64:\n      case ScalarType.SFIXED64:\n      case ScalarType.SINT64:\n        switch (longType) {\n          case LongType.BIGINT:\n            return argType == \"bigint\";\n          case LongType.NUMBER:\n            return argType == \"number\" && !isNaN(arg);\n          default:\n            return argType == \"string\";\n        }\n      case ScalarType.BOOL:\n        return argType == 'boolean';\n      case ScalarType.STRING:\n        return argType == 'string';\n      case ScalarType.BYTES:\n        return arg instanceof Uint8Array;\n      case ScalarType.DOUBLE:\n      case ScalarType.FLOAT:\n        return argType == 'number' && !isNaN(arg);\n      default:\n        // case ScalarType.UINT32:\n        // case ScalarType.FIXED32:\n        // case ScalarType.INT32:\n        // case ScalarType.SINT32:\n        // case ScalarType.SFIXED32:\n        return argType == 'number' && Number.isInteger(arg);\n    }\n  }\n  scalars(arg, type, depth, longType) {\n    if (!Array.isArray(arg)) return false;\n    if (depth < 2) return true;\n    if (Array.isArray(arg)) for (let i = 0; i < arg.length && i < depth; i++) if (!this.scalar(arg[i], type, longType)) return false;\n    return true;\n  }\n  mapKeys(map, type, depth) {\n    let keys = Object.keys(map);\n    switch (type) {\n      case ScalarType.INT32:\n      case ScalarType.FIXED32:\n      case ScalarType.SFIXED32:\n      case ScalarType.SINT32:\n      case ScalarType.UINT32:\n        return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n      case ScalarType.BOOL:\n        return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n      default:\n        return this.scalars(keys, type, depth, LongType.STRING);\n    }\n  }\n}", "import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n  switch (type) {\n    case LongType.BIGINT:\n      return long.toBigInt();\n    case LongType.NUMBER:\n      return long.toNumber();\n    default:\n      // case undefined:\n      // case LongType.STRING:\n      return long.toString();\n  }\n}", "import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n  constructor(info) {\n    this.info = info;\n  }\n  prepare() {\n    var _a;\n    if (this.fMap === undefined) {\n      this.fMap = {};\n      const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n      for (const field of fieldsInput) {\n        this.fMap[field.name] = field;\n        this.fMap[field.jsonName] = field;\n        this.fMap[field.localName] = field;\n      }\n    }\n  }\n  // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n  assert(condition, fieldName, jsonValue) {\n    if (!condition) {\n      let what = typeofJsonValue(jsonValue);\n      if (what == \"number\" || what == \"boolean\") what = jsonValue.toString();\n      throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n    }\n  }\n  /**\n   * Reads a message from canonical JSON format into the target message.\n   *\n   * Repeated fields are appended. Map entries are added, overwriting\n   * existing keys.\n   *\n   * If a message field is already present, it will be merged with the\n   * new data.\n   */\n  read(input, message, options) {\n    this.prepare();\n    const oneofsHandled = [];\n    for (const [jsonKey, jsonValue] of Object.entries(input)) {\n      const field = this.fMap[jsonKey];\n      if (!field) {\n        if (!options.ignoreUnknownFields) throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n        continue;\n      }\n      const localName = field.localName;\n      // handle oneof ADT\n      let target; // this will be the target for the field value, whether it is member of a oneof or not\n      if (field.oneof) {\n        if (jsonValue === null && (field.kind !== 'enum' || field.T()[0] !== 'google.protobuf.NullValue')) {\n          continue;\n        }\n        // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n        if (oneofsHandled.includes(field.oneof)) throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n        oneofsHandled.push(field.oneof);\n        target = message[field.oneof] = {\n          oneofKind: localName\n        };\n      } else {\n        target = message;\n      }\n      // we have handled oneof above. we just have read the value into `target`.\n      if (field.kind == 'map') {\n        if (jsonValue === null) {\n          continue;\n        }\n        // check input\n        this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n        // our target to put map entries into\n        const fieldObj = target[localName];\n        // read entries\n        for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n          this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n          // read value\n          let val;\n          switch (field.V.kind) {\n            case \"message\":\n              val = field.V.T().internalJsonRead(jsonObjValue, options);\n              break;\n            case \"enum\":\n              val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields);\n              if (val === false) continue;\n              break;\n            case \"scalar\":\n              val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n              break;\n          }\n          this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n          // read key\n          let key = jsonObjKey;\n          if (field.K == ScalarType.BOOL) key = key == \"true\" ? true : key == \"false\" ? false : key;\n          key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n          fieldObj[key] = val;\n        }\n      } else if (field.repeat) {\n        if (jsonValue === null) continue;\n        // check input\n        this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n        // our target to put array entries into\n        const fieldArr = target[localName];\n        // read array entries\n        for (const jsonItem of jsonValue) {\n          this.assert(jsonItem !== null, field.name, null);\n          let val;\n          switch (field.kind) {\n            case \"message\":\n              val = field.T().internalJsonRead(jsonItem, options);\n              break;\n            case \"enum\":\n              val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields);\n              if (val === false) continue;\n              break;\n            case \"scalar\":\n              val = this.scalar(jsonItem, field.T, field.L, field.name);\n              break;\n          }\n          this.assert(val !== undefined, field.name, jsonValue);\n          fieldArr.push(val);\n        }\n      } else {\n        switch (field.kind) {\n          case \"message\":\n            if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n              this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n              continue;\n            }\n            target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n            break;\n          case \"enum\":\n            let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);\n            if (val === false) continue;\n            target[localName] = val;\n            break;\n          case \"scalar\":\n            target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n            break;\n        }\n      }\n    }\n  }\n  /**\n   * Returns `false` for unrecognized string representations.\n   *\n   * google.protobuf.NullValue accepts only JSON `null` (or the old `\"NULL_VALUE\"`).\n   */\n  enum(type, json, fieldName, ignoreUnknownFields) {\n    if (type[0] == 'google.protobuf.NullValue') assert(json === null || json === \"NULL_VALUE\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n    if (json === null)\n      // we require 0 to be default value for all enums\n      return 0;\n    switch (typeof json) {\n      case \"number\":\n        assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n        return json;\n      case \"string\":\n        let localEnumName = json;\n        if (type[2] && json.substring(0, type[2].length) === type[2])\n          // lookup without the shared prefix\n          localEnumName = json.substring(type[2].length);\n        let enumNumber = type[1][localEnumName];\n        if (typeof enumNumber === 'undefined' && ignoreUnknownFields) {\n          return false;\n        }\n        assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n        return enumNumber;\n    }\n    assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n  }\n  scalar(json, type, longType, fieldName) {\n    let e;\n    try {\n      switch (type) {\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n          if (json === null) return .0;\n          if (json === \"NaN\") return Number.NaN;\n          if (json === \"Infinity\") return Number.POSITIVE_INFINITY;\n          if (json === \"-Infinity\") return Number.NEGATIVE_INFINITY;\n          if (json === \"\") {\n            e = \"empty string\";\n            break;\n          }\n          if (typeof json == \"string\" && json.trim().length !== json.length) {\n            e = \"extra whitespace\";\n            break;\n          }\n          if (typeof json != \"string\" && typeof json != \"number\") {\n            break;\n          }\n          let float = Number(json);\n          if (Number.isNaN(float)) {\n            e = \"not a number\";\n            break;\n          }\n          if (!Number.isFinite(float)) {\n            // infinity and -infinity are handled by string representation above, so this is an error\n            e = \"too large or small\";\n            break;\n          }\n          if (type == ScalarType.FLOAT) assertFloat32(float);\n          return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.UINT32:\n          if (json === null) return 0;\n          let int32;\n          if (typeof json == \"number\") int32 = json;else if (json === \"\") e = \"empty string\";else if (typeof json == \"string\") {\n            if (json.trim().length !== json.length) e = \"extra whitespace\";else int32 = Number(json);\n          }\n          if (int32 === undefined) break;\n          if (type == ScalarType.UINT32) assertUInt32(int32);else assertInt32(int32);\n          return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n          if (json === null) return reflectionLongConvert(PbLong.ZERO, longType);\n          if (typeof json != \"number\" && typeof json != \"string\") break;\n          return reflectionLongConvert(PbLong.from(json), longType);\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n          if (json === null) return reflectionLongConvert(PbULong.ZERO, longType);\n          if (typeof json != \"number\" && typeof json != \"string\") break;\n          return reflectionLongConvert(PbULong.from(json), longType);\n        // bool:\n        case ScalarType.BOOL:\n          if (json === null) return false;\n          if (typeof json !== \"boolean\") break;\n          return json;\n        // string:\n        case ScalarType.STRING:\n          if (json === null) return \"\";\n          if (typeof json !== \"string\") {\n            e = \"extra whitespace\";\n            break;\n          }\n          try {\n            encodeURIComponent(json);\n          } catch (e) {\n            e = \"invalid UTF8\";\n            break;\n          }\n          return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n          if (json === null || json === \"\") return new Uint8Array(0);\n          if (typeof json !== 'string') break;\n          return base64decode(json);\n      }\n    } catch (error) {\n      e = error.message;\n    }\n    this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n  }\n}", "import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n  constructor(info) {\n    var _a;\n    this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n  }\n  /**\n   * Converts the message to a JSON object, based on the field descriptors.\n   */\n  write(message, options) {\n    const json = {},\n      source = message;\n    for (const field of this.fields) {\n      // field is not part of a oneof, simply write as is\n      if (!field.oneof) {\n        let jsonValue = this.field(field, source[field.localName], options);\n        if (jsonValue !== undefined) json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        continue;\n      }\n      // field is part of a oneof\n      const group = source[field.oneof];\n      if (group.oneofKind !== field.localName) continue; // not selected, skip\n      const opt = field.kind == 'scalar' || field.kind == 'enum' ? Object.assign(Object.assign({}, options), {\n        emitDefaultValues: true\n      }) : options;\n      let jsonValue = this.field(field, group[field.localName], opt);\n      assert(jsonValue !== undefined);\n      json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n    }\n    return json;\n  }\n  field(field, value, options) {\n    let jsonValue = undefined;\n    if (field.kind == 'map') {\n      assert(typeof value == \"object\" && value !== null);\n      const jsonObj = {};\n      switch (field.V.kind) {\n        case \"scalar\":\n          for (const [entryKey, entryValue] of Object.entries(value)) {\n            const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n            assert(val !== undefined);\n            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n          }\n          break;\n        case \"message\":\n          const messageType = field.V.T();\n          for (const [entryKey, entryValue] of Object.entries(value)) {\n            const val = this.message(messageType, entryValue, field.name, options);\n            assert(val !== undefined);\n            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n          }\n          break;\n        case \"enum\":\n          const enumInfo = field.V.T();\n          for (const [entryKey, entryValue] of Object.entries(value)) {\n            assert(entryValue === undefined || typeof entryValue == 'number');\n            const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n            assert(val !== undefined);\n            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n          }\n          break;\n      }\n      if (options.emitDefaultValues || Object.keys(jsonObj).length > 0) jsonValue = jsonObj;\n    } else if (field.repeat) {\n      assert(Array.isArray(value));\n      const jsonArr = [];\n      switch (field.kind) {\n        case \"scalar\":\n          for (let i = 0; i < value.length; i++) {\n            const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n            assert(val !== undefined);\n            jsonArr.push(val);\n          }\n          break;\n        case \"enum\":\n          const enumInfo = field.T();\n          for (let i = 0; i < value.length; i++) {\n            assert(value[i] === undefined || typeof value[i] == 'number');\n            const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n            assert(val !== undefined);\n            jsonArr.push(val);\n          }\n          break;\n        case \"message\":\n          const messageType = field.T();\n          for (let i = 0; i < value.length; i++) {\n            const val = this.message(messageType, value[i], field.name, options);\n            assert(val !== undefined);\n            jsonArr.push(val);\n          }\n          break;\n      }\n      // add converted array to json output\n      if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues) jsonValue = jsonArr;\n    } else {\n      switch (field.kind) {\n        case \"scalar\":\n          jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n          break;\n        case \"enum\":\n          jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n          break;\n        case \"message\":\n          jsonValue = this.message(field.T(), value, field.name, options);\n          break;\n      }\n    }\n    return jsonValue;\n  }\n  /**\n   * Returns `null` as the default for google.protobuf.NullValue.\n   */\n  enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n    if (type[0] == 'google.protobuf.NullValue') return !emitDefaultValues && !optional ? undefined : null;\n    if (value === undefined) {\n      assert(optional);\n      return undefined;\n    }\n    if (value === 0 && !emitDefaultValues && !optional)\n      // we require 0 to be default value for all enums\n      return undefined;\n    assert(typeof value == 'number');\n    assert(Number.isInteger(value));\n    if (enumAsInteger || !type[1].hasOwnProperty(value))\n      // if we don't now the enum value, just return the number\n      return value;\n    if (type[2])\n      // restore the dropped prefix\n      return type[2] + type[1][value];\n    return type[1][value];\n  }\n  message(type, value, fieldName, options) {\n    if (value === undefined) return options.emitDefaultValues ? null : undefined;\n    return type.internalJsonWrite(value, options);\n  }\n  scalar(type, value, fieldName, optional, emitDefaultValues) {\n    if (value === undefined) {\n      assert(optional);\n      return undefined;\n    }\n    const ed = emitDefaultValues || optional;\n    // noinspection FallThroughInSwitchStatementJS\n    switch (type) {\n      // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n      case ScalarType.INT32:\n      case ScalarType.SFIXED32:\n      case ScalarType.SINT32:\n        if (value === 0) return ed ? 0 : undefined;\n        assertInt32(value);\n        return value;\n      case ScalarType.FIXED32:\n      case ScalarType.UINT32:\n        if (value === 0) return ed ? 0 : undefined;\n        assertUInt32(value);\n        return value;\n      // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n      // Either numbers or strings are accepted. Exponent notation is also accepted.\n      case ScalarType.FLOAT:\n        assertFloat32(value);\n      case ScalarType.DOUBLE:\n        if (value === 0) return ed ? 0 : undefined;\n        assert(typeof value == 'number');\n        if (Number.isNaN(value)) return 'NaN';\n        if (value === Number.POSITIVE_INFINITY) return 'Infinity';\n        if (value === Number.NEGATIVE_INFINITY) return '-Infinity';\n        return value;\n      // string:\n      case ScalarType.STRING:\n        if (value === \"\") return ed ? '' : undefined;\n        assert(typeof value == 'string');\n        return value;\n      // bool:\n      case ScalarType.BOOL:\n        if (value === false) return ed ? false : undefined;\n        assert(typeof value == 'boolean');\n        return value;\n      // JSON value will be a decimal string. Either numbers or strings are accepted.\n      case ScalarType.UINT64:\n      case ScalarType.FIXED64:\n        assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n        let ulong = PbULong.from(value);\n        if (ulong.isZero() && !ed) return undefined;\n        return ulong.toString();\n      // JSON value will be a decimal string. Either numbers or strings are accepted.\n      case ScalarType.INT64:\n      case ScalarType.SFIXED64:\n      case ScalarType.SINT64:\n        assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n        let long = PbLong.from(value);\n        if (long.isZero() && !ed) return undefined;\n        return long.toString();\n      // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n      // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n      case ScalarType.BYTES:\n        assert(value instanceof Uint8Array);\n        if (!value.byteLength) return ed ? \"\" : undefined;\n        return base64encode(value);\n    }\n  }\n}", "import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n  switch (type) {\n    case ScalarType.BOOL:\n      return false;\n    case ScalarType.UINT64:\n    case ScalarType.FIXED64:\n      return reflectionLongConvert(PbULong.ZERO, longType);\n    case ScalarType.INT64:\n    case ScalarType.SFIXED64:\n    case ScalarType.SINT64:\n      return reflectionLongConvert(PbLong.ZERO, longType);\n    case ScalarType.DOUBLE:\n    case ScalarType.FLOAT:\n      return 0.0;\n    case ScalarType.BYTES:\n      return new Uint8Array(0);\n    case ScalarType.STRING:\n      return \"\";\n    default:\n      // case ScalarType.INT32:\n      // case ScalarType.UINT32:\n      // case ScalarType.SINT32:\n      // case ScalarType.FIXED32:\n      // case ScalarType.SFIXED32:\n      return 0;\n  }\n}", "import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n  constructor(info) {\n    this.info = info;\n  }\n  prepare() {\n    var _a;\n    if (!this.fieldNoToField) {\n      const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n      this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n    }\n  }\n  /**\n   * Reads a message from binary format into the target message.\n   *\n   * Repeated fields are appended. Map entries are added, overwriting\n   * existing keys.\n   *\n   * If a message field is already present, it will be merged with the\n   * new data.\n   */\n  read(reader, message, options, length) {\n    this.prepare();\n    const end = length === undefined ? reader.len : reader.pos + length;\n    while (reader.pos < end) {\n      // read the tag and find the field\n      const [fieldNo, wireType] = reader.tag(),\n        field = this.fieldNoToField.get(fieldNo);\n      if (!field) {\n        let u = options.readUnknownField;\n        if (u == \"throw\") throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n        let d = reader.skip(wireType);\n        if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n        continue;\n      }\n      // target object for the field we are reading\n      let target = message,\n        repeated = field.repeat,\n        localName = field.localName;\n      // if field is member of oneof ADT, use ADT as target\n      if (field.oneof) {\n        target = target[field.oneof];\n        // if other oneof member selected, set new ADT\n        if (target.oneofKind !== localName) target = message[field.oneof] = {\n          oneofKind: localName\n        };\n      }\n      // we have handled oneof above, we just have read the value into `target[localName]`\n      switch (field.kind) {\n        case \"scalar\":\n        case \"enum\":\n          let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n          let L = field.kind == \"scalar\" ? field.L : undefined;\n          if (repeated) {\n            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n            if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n              let e = reader.uint32() + reader.pos;\n              while (reader.pos < e) arr.push(this.scalar(reader, T, L));\n            } else arr.push(this.scalar(reader, T, L));\n          } else target[localName] = this.scalar(reader, T, L);\n          break;\n        case \"message\":\n          if (repeated) {\n            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n            let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n            arr.push(msg);\n          } else target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n          break;\n        case \"map\":\n          let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n          // safe to assume presence of map object, oneof cannot contain repeated values\n          target[localName][mapKey] = mapVal;\n          break;\n      }\n    }\n  }\n  /**\n   * Read a map field, expecting key field = 1, value field = 2\n   */\n  mapEntry(field, reader, options) {\n    let length = reader.uint32();\n    let end = reader.pos + length;\n    let key = undefined; // javascript only allows number or string for object properties\n    let val = undefined;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case 1:\n          if (field.K == ScalarType.BOOL) key = reader.bool().toString();else\n            // long types are read as string, number types are okay as number\n            key = this.scalar(reader, field.K, LongType.STRING);\n          break;\n        case 2:\n          switch (field.V.kind) {\n            case \"scalar\":\n              val = this.scalar(reader, field.V.T, field.V.L);\n              break;\n            case \"enum\":\n              val = reader.int32();\n              break;\n            case \"message\":\n              val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n              break;\n          }\n          break;\n        default:\n          throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n      }\n    }\n    if (key === undefined) {\n      let keyRaw = reflectionScalarDefault(field.K);\n      key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n    }\n    if (val === undefined) switch (field.V.kind) {\n      case \"scalar\":\n        val = reflectionScalarDefault(field.V.T, field.V.L);\n        break;\n      case \"enum\":\n        val = 0;\n        break;\n      case \"message\":\n        val = field.V.T().create();\n        break;\n    }\n    return [key, val];\n  }\n  scalar(reader, type, longType) {\n    switch (type) {\n      case ScalarType.INT32:\n        return reader.int32();\n      case ScalarType.STRING:\n        return reader.string();\n      case ScalarType.BOOL:\n        return reader.bool();\n      case ScalarType.DOUBLE:\n        return reader.double();\n      case ScalarType.FLOAT:\n        return reader.float();\n      case ScalarType.INT64:\n        return reflectionLongConvert(reader.int64(), longType);\n      case ScalarType.UINT64:\n        return reflectionLongConvert(reader.uint64(), longType);\n      case ScalarType.FIXED64:\n        return reflectionLongConvert(reader.fixed64(), longType);\n      case ScalarType.FIXED32:\n        return reader.fixed32();\n      case ScalarType.BYTES:\n        return reader.bytes();\n      case ScalarType.UINT32:\n        return reader.uint32();\n      case ScalarType.SFIXED32:\n        return reader.sfixed32();\n      case ScalarType.SFIXED64:\n        return reflectionLongConvert(reader.sfixed64(), longType);\n      case ScalarType.SINT32:\n        return reader.sint32();\n      case ScalarType.SINT64:\n        return reflectionLongConvert(reader.sint64(), longType);\n    }\n  }\n}", "import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n  constructor(info) {\n    this.info = info;\n  }\n  prepare() {\n    if (!this.fields) {\n      const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n      this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n    }\n  }\n  /**\n   * Writes the message to binary format.\n   */\n  write(message, writer, options) {\n    this.prepare();\n    for (const field of this.fields) {\n      let value,\n        // this will be our field value, whether it is member of a oneof or not\n        emitDefault,\n        // whether we emit the default value (only true for oneof members)\n        repeated = field.repeat,\n        localName = field.localName;\n      // handle oneof ADT\n      if (field.oneof) {\n        const group = message[field.oneof];\n        if (group.oneofKind !== localName) continue; // if field is not selected, skip\n        value = group[localName];\n        emitDefault = true;\n      } else {\n        value = message[localName];\n        emitDefault = false;\n      }\n      // we have handled oneof above. we just have to honor `emitDefault`.\n      switch (field.kind) {\n        case \"scalar\":\n        case \"enum\":\n          let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n          if (repeated) {\n            assert(Array.isArray(value));\n            if (repeated == RepeatType.PACKED) this.packed(writer, T, field.no, value);else for (const item of value) this.scalar(writer, T, field.no, item, true);\n          } else if (value === undefined) assert(field.opt);else this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n          break;\n        case \"message\":\n          if (repeated) {\n            assert(Array.isArray(value));\n            for (const item of value) this.message(writer, options, field.T(), field.no, item);\n          } else {\n            this.message(writer, options, field.T(), field.no, value);\n          }\n          break;\n        case \"map\":\n          assert(typeof value == 'object' && value !== null);\n          for (const [key, val] of Object.entries(value)) this.mapEntry(writer, options, field, key, val);\n          break;\n      }\n    }\n    let u = options.writeUnknownFields;\n    if (u !== false) (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n  }\n  mapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    switch (field.K) {\n      case ScalarType.INT32:\n      case ScalarType.FIXED32:\n      case ScalarType.UINT32:\n      case ScalarType.SFIXED32:\n      case ScalarType.SINT32:\n        keyValue = Number.parseInt(key);\n        break;\n      case ScalarType.BOOL:\n        assert(key == 'true' || key == 'false');\n        keyValue = key == 'true';\n        break;\n    }\n    // write key, expecting key field number = 1\n    this.scalar(writer, field.K, 1, keyValue, true);\n    // write value, expecting value field number = 2\n    switch (field.V.kind) {\n      case 'scalar':\n        this.scalar(writer, field.V.T, 2, value, true);\n        break;\n      case 'enum':\n        this.scalar(writer, ScalarType.INT32, 2, value, true);\n        break;\n      case 'message':\n        this.message(writer, options, field.V.T(), 2, value);\n        break;\n    }\n    writer.join();\n  }\n  message(writer, options, handler, fieldNo, value) {\n    if (value === undefined) return;\n    handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n    writer.join();\n  }\n  /**\n   * Write a single scalar value.\n   */\n  scalar(writer, type, fieldNo, value, emitDefault) {\n    let [wireType, method, isDefault] = this.scalarInfo(type, value);\n    if (!isDefault || emitDefault) {\n      writer.tag(fieldNo, wireType);\n      writer[method](value);\n    }\n  }\n  /**\n   * Write an array of scalar values in packed format.\n   */\n  packed(writer, type, fieldNo, value) {\n    if (!value.length) return;\n    assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n    // write tag\n    writer.tag(fieldNo, WireType.LengthDelimited);\n    // begin length-delimited\n    writer.fork();\n    // write values without tags\n    let [, method] = this.scalarInfo(type);\n    for (let i = 0; i < value.length; i++) writer[method](value[i]);\n    // end length delimited\n    writer.join();\n  }\n  /**\n   * Get information for writing a scalar value.\n   *\n   * Returns tuple:\n   * [0]: appropriate WireType\n   * [1]: name of the appropriate method of IBinaryWriter\n   * [2]: whether the given value is a default value\n   *\n   * If argument `value` is omitted, [2] is always false.\n   */\n  scalarInfo(type, value) {\n    let t = WireType.Varint;\n    let m;\n    let i = value === undefined;\n    let d = value === 0;\n    switch (type) {\n      case ScalarType.INT32:\n        m = \"int32\";\n        break;\n      case ScalarType.STRING:\n        d = i || !value.length;\n        t = WireType.LengthDelimited;\n        m = \"string\";\n        break;\n      case ScalarType.BOOL:\n        d = value === false;\n        m = \"bool\";\n        break;\n      case ScalarType.UINT32:\n        m = \"uint32\";\n        break;\n      case ScalarType.DOUBLE:\n        t = WireType.Bit64;\n        m = \"double\";\n        break;\n      case ScalarType.FLOAT:\n        t = WireType.Bit32;\n        m = \"float\";\n        break;\n      case ScalarType.INT64:\n        d = i || PbLong.from(value).isZero();\n        m = \"int64\";\n        break;\n      case ScalarType.UINT64:\n        d = i || PbULong.from(value).isZero();\n        m = \"uint64\";\n        break;\n      case ScalarType.FIXED64:\n        d = i || PbULong.from(value).isZero();\n        t = WireType.Bit64;\n        m = \"fixed64\";\n        break;\n      case ScalarType.BYTES:\n        d = i || !value.byteLength;\n        t = WireType.LengthDelimited;\n        m = \"bytes\";\n        break;\n      case ScalarType.FIXED32:\n        t = WireType.Bit32;\n        m = \"fixed32\";\n        break;\n      case ScalarType.SFIXED32:\n        t = WireType.Bit32;\n        m = \"sfixed32\";\n        break;\n      case ScalarType.SFIXED64:\n        d = i || PbLong.from(value).isZero();\n        t = WireType.Bit64;\n        m = \"sfixed64\";\n        break;\n      case ScalarType.SINT32:\n        m = \"sint32\";\n        break;\n      case ScalarType.SINT64:\n        d = i || PbLong.from(value).isZero();\n        m = \"sint64\";\n        break;\n    }\n    return [t, m, i || d];\n  }\n}", "import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n  /**\n   * This ternary can be removed in the next major version.\n   * The `Object.create()` code path utilizes a new `messagePrototype`\n   * property on the `IMessageType` which has this same `MESSAGE_TYPE`\n   * non-enumerable property on it. Doing it this way means that we only\n   * pay the cost of `Object.defineProperty()` once per `IMessageType`\n   * class of once per \"instance\". The falsy code path is only provided\n   * for backwards compatibility in cases where the runtime library is\n   * updated without also updating the generated code.\n   */\n  const msg = type.messagePrototype ? Object.create(type.messagePrototype) : Object.defineProperty({}, MESSAGE_TYPE, {\n    value: type\n  });\n  for (let field of type.fields) {\n    let name = field.localName;\n    if (field.opt) continue;\n    if (field.oneof) msg[field.oneof] = {\n      oneofKind: undefined\n    };else if (field.repeat) msg[name] = [];else switch (field.kind) {\n      case \"scalar\":\n        msg[name] = reflectionScalarDefault(field.T, field.L);\n        break;\n      case \"enum\":\n        // we require 0 to be default value for all enums\n        msg[name] = 0;\n        break;\n      case \"map\":\n        msg[name] = {};\n        break;\n    }\n  }\n  return msg;\n}", "/**\n * Copy partial data into the target message.\n *\n * If a singular scalar or enum field is present in the source, it\n * replaces the field in the target.\n *\n * If a singular message field is present in the source, it is merged\n * with the target field by calling mergePartial() of the responsible\n * message type.\n *\n * If a repeated field is present in the source, its values replace\n * all values in the target array, removing extraneous values.\n * Repeated message fields are copied, not merged.\n *\n * If a map field is present in the source, entries are added to the\n * target map, replacing entries with the same key. Entries that only\n * exist in the target remain. Entries with message values are copied,\n * not merged.\n *\n * Note that this function differs from protobuf merge semantics,\n * which appends repeated fields.\n */\nexport function reflectionMergePartial(info, target, source) {\n  let fieldValue,\n    // the field value we are working with\n    input = source,\n    output; // where we want our field value to go\n  for (let field of info.fields) {\n    let name = field.localName;\n    if (field.oneof) {\n      const group = input[field.oneof]; // this is the oneof`s group in the source\n      if ((group === null || group === void 0 ? void 0 : group.oneofKind) == undefined) {\n        // the user is free to omit\n        continue; // we skip this field, and all other members too\n      }\n      fieldValue = group[name]; // our value comes from the the oneof group of the source\n      output = target[field.oneof]; // and our output is the oneof group of the target\n      output.oneofKind = group.oneofKind; // always update discriminator\n      if (fieldValue == undefined) {\n        delete output[name]; // remove any existing value\n        continue; // skip further work on field\n      }\n    } else {\n      fieldValue = input[name]; // we are using the source directly\n      output = target; // we want our field value to go directly into the target\n      if (fieldValue == undefined) {\n        continue; // skip further work on field, existing value is used as is\n      }\n    }\n    if (field.repeat) output[name].length = fieldValue.length; // resize target array to match source array\n    // now we just work with `fieldValue` and `output` to merge the value\n    switch (field.kind) {\n      case \"scalar\":\n      case \"enum\":\n        if (field.repeat) for (let i = 0; i < fieldValue.length; i++) output[name][i] = fieldValue[i]; // not a reference type\n        else output[name] = fieldValue; // not a reference type\n        break;\n      case \"message\":\n        let T = field.T();\n        if (field.repeat) for (let i = 0; i < fieldValue.length; i++) output[name][i] = T.create(fieldValue[i]);else if (output[name] === undefined) output[name] = T.create(fieldValue); // nothing to merge with\n        else T.mergePartial(output[name], fieldValue);\n        break;\n      case \"map\":\n        // Map and repeated fields are simply overwritten, not appended or merged\n        switch (field.V.kind) {\n          case \"scalar\":\n          case \"enum\":\n            Object.assign(output[name], fieldValue); // elements are not reference types\n            break;\n          case \"message\":\n            let T = field.V.T();\n            for (let k of Object.keys(fieldValue)) output[name][k] = T.create(fieldValue[k]);\n            break;\n        }\n        break;\n    }\n  }\n}", "import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n  if (a === b) return true;\n  if (!a || !b) return false;\n  for (let field of info.fields) {\n    let localName = field.localName;\n    let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n    let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n    switch (field.kind) {\n      case \"enum\":\n      case \"scalar\":\n        let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n        if (!(field.repeat ? repeatedPrimitiveEq(t, val_a, val_b) : primitiveEq(t, val_a, val_b))) return false;\n        break;\n      case \"map\":\n        if (!(field.V.kind == \"message\" ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b)) : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b)))) return false;\n        break;\n      case \"message\":\n        let T = field.T();\n        if (!(field.repeat ? repeatedMsgEq(T, val_a, val_b) : T.equals(val_a, val_b))) return false;\n        break;\n    }\n  }\n  return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n  if (a === b) return true;\n  if (type !== ScalarType.BYTES) return false;\n  let ba = a;\n  let bb = b;\n  if (ba.length !== bb.length) return false;\n  for (let i = 0; i < ba.length; i++) if (ba[i] != bb[i]) return false;\n  return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) if (!primitiveEq(type, a[i], b[i])) return false;\n  return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) if (!type.equals(a[i], b[i])) return false;\n  return true;\n}", "import { MESSAGE_TYPE } from \"./message-type-contract\";\nimport { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions } from \"./json-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\nimport { binaryWriteOptions } from \"./binary-writer\";\nimport { binaryReadOptions } from \"./binary-reader\";\nconst baseDescriptors = Object.getOwnPropertyDescriptors(Object.getPrototypeOf({}));\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n  constructor(name, fields, options) {\n    this.defaultCheckDepth = 16;\n    this.typeName = name;\n    this.fields = fields.map(normalizeFieldInfo);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.messagePrototype = Object.create(null, Object.assign(Object.assign({}, baseDescriptors), {\n      [MESSAGE_TYPE]: {\n        value: this\n      }\n    }));\n    this.refTypeCheck = new ReflectionTypeCheck(this);\n    this.refJsonReader = new ReflectionJsonReader(this);\n    this.refJsonWriter = new ReflectionJsonWriter(this);\n    this.refBinReader = new ReflectionBinaryReader(this);\n    this.refBinWriter = new ReflectionBinaryWriter(this);\n  }\n  create(value) {\n    let message = reflectionCreate(this);\n    if (value !== undefined) {\n      reflectionMergePartial(this, message, value);\n    }\n    return message;\n  }\n  /**\n   * Clone the message.\n   *\n   * Unknown fields are discarded.\n   */\n  clone(message) {\n    let copy = this.create();\n    reflectionMergePartial(this, copy, message);\n    return copy;\n  }\n  /**\n   * Determines whether two message of the same type have the same field values.\n   * Checks for deep equality, traversing repeated fields, oneof groups, maps\n   * and messages recursively.\n   * Will also return true if both messages are `undefined`.\n   */\n  equals(a, b) {\n    return reflectionEquals(this, a, b);\n  }\n  /**\n   * Is the given value assignable to our message type\n   * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n   */\n  is(arg, depth = this.defaultCheckDepth) {\n    return this.refTypeCheck.is(arg, depth, false);\n  }\n  /**\n   * Is the given value assignable to our message type,\n   * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n   */\n  isAssignable(arg, depth = this.defaultCheckDepth) {\n    return this.refTypeCheck.is(arg, depth, true);\n  }\n  /**\n   * Copy partial data into the target message.\n   */\n  mergePartial(target, source) {\n    reflectionMergePartial(this, target, source);\n  }\n  /**\n   * Create a new message from binary format.\n   */\n  fromBinary(data, options) {\n    let opt = binaryReadOptions(options);\n    return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n  }\n  /**\n   * Read a new message from a JSON value.\n   */\n  fromJson(json, options) {\n    return this.internalJsonRead(json, jsonReadOptions(options));\n  }\n  /**\n   * Read a new message from a JSON string.\n   * This is equivalent to `T.fromJson(JSON.parse(json))`.\n   */\n  fromJsonString(json, options) {\n    let value = JSON.parse(json);\n    return this.fromJson(value, options);\n  }\n  /**\n   * Write the message to canonical JSON value.\n   */\n  toJson(message, options) {\n    return this.internalJsonWrite(message, jsonWriteOptions(options));\n  }\n  /**\n   * Convert the message to canonical JSON string.\n   * This is equivalent to `JSON.stringify(T.toJson(t))`\n   */\n  toJsonString(message, options) {\n    var _a;\n    let value = this.toJson(message, options);\n    return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n  }\n  /**\n   * Write the message to binary format.\n   */\n  toBinary(message, options) {\n    let opt = binaryWriteOptions(options);\n    return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n  }\n  /**\n   * This is an internal method. If you just want to read a message from\n   * JSON, use `fromJson()` or `fromJsonString()`.\n   *\n   * Reads JSON value and merges the fields into the target\n   * according to protobuf rules. If the target is omitted,\n   * a new instance is created first.\n   */\n  internalJsonRead(json, options, target) {\n    if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n      let message = target !== null && target !== void 0 ? target : this.create();\n      this.refJsonReader.read(json, message, options);\n      return message;\n    }\n    throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n  }\n  /**\n   * This is an internal method. If you just want to write a message\n   * to JSON, use `toJson()` or `toJsonString().\n   *\n   * Writes JSON value and returns it.\n   */\n  internalJsonWrite(message, options) {\n    return this.refJsonWriter.write(message, options);\n  }\n  /**\n   * This is an internal method. If you just want to write a message\n   * in binary format, use `toBinary()`.\n   *\n   * Serializes the message in binary format and appends it to the given\n   * writer. Returns passed writer.\n   */\n  internalBinaryWrite(message, writer, options) {\n    this.refBinWriter.write(message, writer, options);\n    return writer;\n  }\n  /**\n   * This is an internal method. If you just want to read a message from\n   * binary data, use `fromBinary()`.\n   *\n   * Reads data from binary format and merges the fields into\n   * the target according to protobuf rules. If the target is\n   * omitted, a new instance is created first.\n   */\n  internalBinaryRead(reader, length, options, target) {\n    let message = target !== null && target !== void 0 ? target : this.create();\n    this.refBinReader.read(reader, message, options, length);\n    return message;\n  }\n}", "import { lowerCamelCase } from \"@protobuf-ts/runtime\";\n/**\n * Turns PartialMethodInfo into MethodInfo.\n */\nexport function normalizeMethodInfo(method, service) {\n  var _a, _b, _c;\n  let m = method;\n  m.service = service;\n  m.localName = (_a = m.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(m.name);\n  // noinspection PointlessBooleanExpressionJS\n  m.serverStreaming = !!m.serverStreaming;\n  // noinspection PointlessBooleanExpressionJS\n  m.clientStreaming = !!m.clientStreaming;\n  m.options = (_b = m.options) !== null && _b !== void 0 ? _b : {};\n  m.idempotency = (_c = m.idempotency) !== null && _c !== void 0 ? _c : undefined;\n  return m;\n}\n/**\n * Read custom method options from a generated service client.\n *\n * @deprecated use readMethodOption()\n */\nexport function readMethodOptions(service, methodName, extensionName, extensionType) {\n  var _a;\n  const options = (_a = service.methods.find((m, i) => m.localName === methodName || i === methodName)) === null || _a === void 0 ? void 0 : _a.options;\n  return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readMethodOption(service, methodName, extensionName, extensionType) {\n  var _a;\n  const options = (_a = service.methods.find((m, i) => m.localName === methodName || i === methodName)) === null || _a === void 0 ? void 0 : _a.options;\n  if (!options) {\n    return undefined;\n  }\n  const optionVal = options[extensionName];\n  if (optionVal === undefined) {\n    return optionVal;\n  }\n  return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readServiceOption(service, extensionName, extensionType) {\n  const options = service.options;\n  if (!options) {\n    return undefined;\n  }\n  const optionVal = options[extensionName];\n  if (optionVal === undefined) {\n    return optionVal;\n  }\n  return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}", "import { normalizeMethodInfo } from \"./reflection-info\";\nexport class ServiceType {\n  constructor(typeName, methods, options) {\n    this.typeName = typeName;\n    this.methods = methods.map(i => normalizeMethodInfo(i, this));\n    this.options = options !== null && options !== void 0 ? options : {};\n  }\n}", "/**\n * An error that occurred while calling a RPC method.\n */\nexport class RpcError extends Error {\n  constructor(message, code = 'UNKNOWN', meta) {\n    super(message);\n    this.name = 'RpcError';\n    // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.code = code;\n    this.meta = meta !== null && meta !== void 0 ? meta : {};\n  }\n  toString() {\n    const l = [this.name + ': ' + this.message];\n    if (this.code) {\n      l.push('');\n      l.push('Code: ' + this.code);\n    }\n    if (this.serviceName && this.methodName) {\n      l.push('Method: ' + this.serviceName + '/' + this.methodName);\n    }\n    let m = Object.entries(this.meta);\n    if (m.length) {\n      l.push('');\n      l.push('Meta:');\n      for (let [k, v] of m) {\n        l.push(`  ${k}: ${v}`);\n      }\n    }\n    return l.join('\\n');\n  }\n}", "import { mergeBinaryOptions, mergeJsonOptions } from \"@protobuf-ts/runtime\";\n/**\n * Merges custom RPC options with defaults. Returns a new instance and keeps\n * the \"defaults\" and the \"options\" unmodified.\n *\n * Merges `RpcMetadata` \"meta\", overwriting values from \"defaults\" with\n * values from \"options\". Does not append values to existing entries.\n *\n * Merges \"jsonOptions\", including \"jsonOptions.typeRegistry\", by creating\n * a new array that contains types from \"options.jsonOptions.typeRegistry\"\n * first, then types from \"defaults.jsonOptions.typeRegistry\".\n *\n * Merges \"binaryOptions\".\n *\n * Merges \"interceptors\" by creating a new array that contains interceptors\n * from \"defaults\" first, then interceptors from \"options\".\n *\n * Works with objects that extend `RpcOptions`, but only if the added\n * properties are of type Date, primitive like string, boolean, or Array\n * of primitives. If you have other property types, you have to merge them\n * yourself.\n */\nexport function mergeRpcOptions(defaults, options) {\n  if (!options) return defaults;\n  let o = {};\n  copy(defaults, o);\n  copy(options, o);\n  for (let key of Object.keys(options)) {\n    let val = options[key];\n    switch (key) {\n      case \"jsonOptions\":\n        o.jsonOptions = mergeJsonOptions(defaults.jsonOptions, o.jsonOptions);\n        break;\n      case \"binaryOptions\":\n        o.binaryOptions = mergeBinaryOptions(defaults.binaryOptions, o.binaryOptions);\n        break;\n      case \"meta\":\n        o.meta = {};\n        copy(defaults.meta, o.meta);\n        copy(options.meta, o.meta);\n        break;\n      case \"interceptors\":\n        o.interceptors = defaults.interceptors ? defaults.interceptors.concat(val) : val.concat();\n        break;\n    }\n  }\n  return o;\n}\nfunction copy(a, into) {\n  if (!a) return;\n  let c = into;\n  for (let [k, v] of Object.entries(a)) {\n    if (v instanceof Date) c[k] = new Date(v.getTime());else if (Array.isArray(v)) c[k] = v.concat();else c[k] = v;\n  }\n}", "export var DeferredState;\n(function (DeferredState) {\n  DeferredState[DeferredState[\"PENDING\"] = 0] = \"PENDING\";\n  DeferredState[DeferredState[\"REJECTED\"] = 1] = \"REJECTED\";\n  DeferredState[DeferredState[\"RESOLVED\"] = 2] = \"RESOLVED\";\n})(DeferredState || (DeferredState = {}));\n/**\n * A deferred promise. This is a \"controller\" for a promise, which lets you\n * pass a promise around and reject or resolve it from the outside.\n *\n * Warning: This class is to be used with care. Using it can make code very\n * difficult to read. It is intended for use in library code that exposes\n * promises, not for regular business logic.\n */\nexport class Deferred {\n  /**\n   * @param preventUnhandledRejectionWarning - prevents the warning\n   * \"Unhandled Promise rejection\" by adding a noop rejection handler.\n   * Working with calls returned from the runtime-rpc package in an\n   * async function usually means awaiting one call property after\n   * the other. This means that the \"status\" is not being awaited when\n   * an earlier await for the \"headers\" is rejected. This causes the\n   * \"unhandled promise reject\" warning. A more correct behaviour for\n   * calls might be to become aware whether at least one of the\n   * promises is handled and swallow the rejection warning for the\n   * others.\n   */\n  constructor(preventUnhandledRejectionWarning = true) {\n    this._state = DeferredState.PENDING;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    if (preventUnhandledRejectionWarning) {\n      this._promise.catch(_ => {});\n    }\n  }\n  /**\n   * Get the current state of the promise.\n   */\n  get state() {\n    return this._state;\n  }\n  /**\n   * Get the deferred promise.\n   */\n  get promise() {\n    return this._promise;\n  }\n  /**\n   * Resolve the promise. Throws if the promise is already resolved or rejected.\n   */\n  resolve(value) {\n    if (this.state !== DeferredState.PENDING) throw new Error(`cannot resolve ${DeferredState[this.state].toLowerCase()}`);\n    this._resolve(value);\n    this._state = DeferredState.RESOLVED;\n  }\n  /**\n   * Reject the promise. Throws if the promise is already resolved or rejected.\n   */\n  reject(reason) {\n    if (this.state !== DeferredState.PENDING) throw new Error(`cannot reject ${DeferredState[this.state].toLowerCase()}`);\n    this._reject(reason);\n    this._state = DeferredState.REJECTED;\n  }\n  /**\n   * Resolve the promise. Ignore if not pending.\n   */\n  resolvePending(val) {\n    if (this._state === DeferredState.PENDING) this.resolve(val);\n  }\n  /**\n   * Reject the promise. Ignore if not pending.\n   */\n  rejectPending(reason) {\n    if (this._state === DeferredState.PENDING) this.reject(reason);\n  }\n}", "import { Deferred, DeferredState } from \"./deferred\";\nimport { assert } from \"@protobuf-ts/runtime\";\n/**\n * A `RpcOutputStream` that you control.\n */\nexport class RpcOutputStreamController {\n  constructor() {\n    this._lis = {\n      nxt: [],\n      msg: [],\n      err: [],\n      cmp: []\n    };\n    this._closed = false;\n  }\n  // --- RpcOutputStream callback API\n  onNext(callback) {\n    return this.addLis(callback, this._lis.nxt);\n  }\n  onMessage(callback) {\n    return this.addLis(callback, this._lis.msg);\n  }\n  onError(callback) {\n    return this.addLis(callback, this._lis.err);\n  }\n  onComplete(callback) {\n    return this.addLis(callback, this._lis.cmp);\n  }\n  addLis(callback, list) {\n    list.push(callback);\n    return () => {\n      let i = list.indexOf(callback);\n      if (i >= 0) list.splice(i, 1);\n    };\n  }\n  // remove all listeners\n  clearLis() {\n    for (let l of Object.values(this._lis)) l.splice(0, l.length);\n  }\n  // --- Controller API\n  /**\n   * Is this stream already closed by a completion or error?\n   */\n  get closed() {\n    return this._closed !== false;\n  }\n  /**\n   * Emit message, close with error, or close successfully, but only one\n   * at a time.\n   * Can be used to wrap a stream by using the other stream's `onNext`.\n   */\n  notifyNext(message, error, complete) {\n    assert((message ? 1 : 0) + (error ? 1 : 0) + (complete ? 1 : 0) <= 1, 'only one emission at a time');\n    if (message) this.notifyMessage(message);\n    if (error) this.notifyError(error);\n    if (complete) this.notifyComplete();\n  }\n  /**\n   * Emits a new message. Throws if stream is closed.\n   *\n   * Triggers onNext and onMessage callbacks.\n   */\n  notifyMessage(message) {\n    assert(!this.closed, 'stream is closed');\n    this.pushIt({\n      value: message,\n      done: false\n    });\n    this._lis.msg.forEach(l => l(message));\n    this._lis.nxt.forEach(l => l(message, undefined, false));\n  }\n  /**\n   * Closes the stream with an error. Throws if stream is closed.\n   *\n   * Triggers onNext and onError callbacks.\n   */\n  notifyError(error) {\n    assert(!this.closed, 'stream is closed');\n    this._closed = error;\n    this.pushIt(error);\n    this._lis.err.forEach(l => l(error));\n    this._lis.nxt.forEach(l => l(undefined, error, false));\n    this.clearLis();\n  }\n  /**\n   * Closes the stream successfully. Throws if stream is closed.\n   *\n   * Triggers onNext and onComplete callbacks.\n   */\n  notifyComplete() {\n    assert(!this.closed, 'stream is closed');\n    this._closed = true;\n    this.pushIt({\n      value: null,\n      done: true\n    });\n    this._lis.cmp.forEach(l => l());\n    this._lis.nxt.forEach(l => l(undefined, undefined, true));\n    this.clearLis();\n  }\n  /**\n   * Creates an async iterator (that can be used with `for await {...}`)\n   * to consume the stream.\n   *\n   * Some things to note:\n   * - If an error occurs, the `for await` will throw it.\n   * - If an error occurred before the `for await` was started, `for await`\n   *   will re-throw it.\n   * - If the stream is already complete, the `for await` will be empty.\n   * - If your `for await` consumes slower than the stream produces,\n   *   for example because you are relaying messages in a slow operation,\n   *   messages are queued.\n   */\n  [Symbol.asyncIterator]() {\n    // init the iterator state, enabling pushIt()\n    if (!this._itState) {\n      this._itState = {\n        q: []\n      };\n    }\n    // if we are closed, we are definitely not receiving any more messages.\n    // but we can't let the iterator get stuck. we want to either:\n    // a) finish the new iterator immediately, because we are completed\n    // b) reject the new iterator, because we errored\n    if (this._closed === true) this.pushIt({\n      value: null,\n      done: true\n    });else if (this._closed !== false) this.pushIt(this._closed);\n    // the async iterator\n    return {\n      next: () => {\n        let state = this._itState;\n        assert(state, \"bad state\"); // if we don't have a state here, code is broken\n        // there should be no pending result.\n        // did the consumer call next() before we resolved our previous result promise?\n        assert(!state.p, \"iterator contract broken\");\n        // did we produce faster than the iterator consumed?\n        // return the oldest result from the queue.\n        let first = state.q.shift();\n        if (first) return \"value\" in first ? Promise.resolve(first) : Promise.reject(first);\n        // we have no result ATM, but we promise one.\n        // as soon as we have a result, we must resolve promise.\n        state.p = new Deferred();\n        return state.p.promise;\n      }\n    };\n  }\n  // \"push\" a new iterator result.\n  // this either resolves a pending promise, or enqueues the result.\n  pushIt(result) {\n    let state = this._itState;\n    if (!state) return;\n    // is the consumer waiting for us?\n    if (state.p) {\n      // yes, consumer is waiting for this promise.\n      const p = state.p;\n      assert(p.state == DeferredState.PENDING, \"iterator contract broken\");\n      // resolve the promise\n      \"value\" in result ? p.resolve(result) : p.reject(result);\n      // must cleanup, otherwise iterator.next() would pick it up again.\n      delete state.p;\n    } else {\n      // we are producing faster than the iterator consumes.\n      // push result onto queue.\n      state.q.push(result);\n    }\n  }\n}", "var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\n * A unary RPC call. Unary means there is exactly one input message and\n * exactly one output message unless an error occurred.\n */\nexport class UnaryCall {\n  constructor(method, requestHeaders, request, headers, response, status, trailers) {\n    this.method = method;\n    this.requestHeaders = requestHeaders;\n    this.request = request;\n    this.headers = headers;\n    this.response = response;\n    this.status = status;\n    this.trailers = trailers;\n  }\n  /**\n   * If you are only interested in the final outcome of this call,\n   * you can await it to receive a `FinishedUnaryCall`.\n   */\n  then(onfulfilled, onrejected) {\n    return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));\n  }\n  promiseFinished() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let [headers, response, status, trailers] = yield Promise.all([this.headers, this.response, this.status, this.trailers]);\n      return {\n        method: this.method,\n        requestHeaders: this.requestHeaders,\n        request: this.request,\n        headers,\n        response,\n        status,\n        trailers\n      };\n    });\n  }\n}", "var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\n * A server streaming RPC call. The client provides exactly one input message\n * but the server may respond with 0, 1, or more messages.\n */\nexport class ServerStreamingCall {\n  constructor(method, requestHeaders, request, headers, response, status, trailers) {\n    this.method = method;\n    this.requestHeaders = requestHeaders;\n    this.request = request;\n    this.headers = headers;\n    this.responses = response;\n    this.status = status;\n    this.trailers = trailers;\n  }\n  /**\n   * Instead of awaiting the response status and trailers, you can\n   * just as well await this call itself to receive the server outcome.\n   * You should first setup some listeners to the `request` to\n   * see the actual messages the server replied with.\n   */\n  then(onfulfilled, onrejected) {\n    return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));\n  }\n  promiseFinished() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);\n      return {\n        method: this.method,\n        requestHeaders: this.requestHeaders,\n        request: this.request,\n        headers,\n        status,\n        trailers\n      };\n    });\n  }\n}", "var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\n * A client streaming RPC call. This means that the clients sends 0, 1, or\n * more messages to the server, and the server replies with exactly one\n * message.\n */\nexport class ClientStreamingCall {\n  constructor(method, requestHeaders, request, headers, response, status, trailers) {\n    this.method = method;\n    this.requestHeaders = requestHeaders;\n    this.requests = request;\n    this.headers = headers;\n    this.response = response;\n    this.status = status;\n    this.trailers = trailers;\n  }\n  /**\n   * Instead of awaiting the response status and trailers, you can\n   * just as well await this call itself to receive the server outcome.\n   * Note that it may still be valid to send more request messages.\n   */\n  then(onfulfilled, onrejected) {\n    return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));\n  }\n  promiseFinished() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let [headers, response, status, trailers] = yield Promise.all([this.headers, this.response, this.status, this.trailers]);\n      return {\n        method: this.method,\n        requestHeaders: this.requestHeaders,\n        headers,\n        response,\n        status,\n        trailers\n      };\n    });\n  }\n}", "var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\n * A duplex streaming RPC call. This means that the clients sends an\n * arbitrary amount of messages to the server, while at the same time,\n * the server sends an arbitrary amount of messages to the client.\n */\nexport class DuplexStreamingCall {\n  constructor(method, requestHeaders, request, headers, response, status, trailers) {\n    this.method = method;\n    this.requestHeaders = requestHeaders;\n    this.requests = request;\n    this.headers = headers;\n    this.responses = response;\n    this.status = status;\n    this.trailers = trailers;\n  }\n  /**\n   * Instead of awaiting the response status and trailers, you can\n   * just as well await this call itself to receive the server outcome.\n   * Note that it may still be valid to send more request messages.\n   */\n  then(onfulfilled, onrejected) {\n    return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));\n  }\n  promiseFinished() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);\n      return {\n        method: this.method,\n        requestHeaders: this.requestHeaders,\n        headers,\n        status,\n        trailers\n      };\n    });\n  }\n}", "var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { RpcError } from \"./rpc-error\";\nimport { assert } from \"@protobuf-ts/runtime\";\nimport { RpcOutputStreamController } from \"./rpc-output-stream\";\nimport { mergeRpcOptions } from \"./rpc-options\";\nimport { UnaryCall } from \"./unary-call\";\nimport { ServerStreamingCall } from \"./server-streaming-call\";\nimport { ClientStreamingCall } from \"./client-streaming-call\";\nimport { DuplexStreamingCall } from \"./duplex-streaming-call\";\n/**\n * Transport for testing.\n */\nexport class TestTransport {\n  /**\n   * Initialize with mock data. Omitted fields have default value.\n   */\n  constructor(data) {\n    /**\n     * Suppress warning / error about uncaught rejections of\n     * \"status\" and \"trailers\".\n     */\n    this.suppressUncaughtRejections = true;\n    this.headerDelay = 10;\n    this.responseDelay = 50;\n    this.betweenResponseDelay = 10;\n    this.afterResponseDelay = 10;\n    this.data = data !== null && data !== void 0 ? data : {};\n  }\n  /**\n   * Sent message(s) during the last operation.\n   */\n  get sentMessages() {\n    if (this.lastInput instanceof TestInputStream) {\n      return this.lastInput.sent;\n    } else if (typeof this.lastInput == \"object\") {\n      return [this.lastInput.single];\n    }\n    return [];\n  }\n  /**\n   * Sending message(s) completed?\n   */\n  get sendComplete() {\n    if (this.lastInput instanceof TestInputStream) {\n      return this.lastInput.completed;\n    } else if (typeof this.lastInput == \"object\") {\n      return true;\n    }\n    return false;\n  }\n  // Creates a promise for response headers from the mock data.\n  promiseHeaders() {\n    var _a;\n    const headers = (_a = this.data.headers) !== null && _a !== void 0 ? _a : TestTransport.defaultHeaders;\n    return headers instanceof RpcError ? Promise.reject(headers) : Promise.resolve(headers);\n  }\n  // Creates a promise for a single, valid, message from the mock data.\n  promiseSingleResponse(method) {\n    if (this.data.response instanceof RpcError) {\n      return Promise.reject(this.data.response);\n    }\n    let r;\n    if (Array.isArray(this.data.response)) {\n      assert(this.data.response.length > 0);\n      r = this.data.response[0];\n    } else if (this.data.response !== undefined) {\n      r = this.data.response;\n    } else {\n      r = method.O.create();\n    }\n    assert(method.O.is(r));\n    return Promise.resolve(r);\n  }\n  /**\n   * Pushes response messages from the mock data to the output stream.\n   * If an error response, status or trailers are mocked, the stream is\n   * closed with the respective error.\n   * Otherwise, stream is completed successfully.\n   *\n   * The returned promise resolves when the stream is closed. It should\n   * not reject. If it does, code is broken.\n   */\n  streamResponses(method, stream, abort) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // normalize \"data.response\" into an array of valid output messages\n      const messages = [];\n      if (this.data.response === undefined) {\n        messages.push(method.O.create());\n      } else if (Array.isArray(this.data.response)) {\n        for (let msg of this.data.response) {\n          assert(method.O.is(msg));\n          messages.push(msg);\n        }\n      } else if (!(this.data.response instanceof RpcError)) {\n        assert(method.O.is(this.data.response));\n        messages.push(this.data.response);\n      }\n      // start the stream with an initial delay.\n      // if the request is cancelled, notify() error and exit.\n      try {\n        yield delay(this.responseDelay, abort)(undefined);\n      } catch (error) {\n        stream.notifyError(error);\n        return;\n      }\n      // if error response was mocked, notify() error (stream is now closed with error) and exit.\n      if (this.data.response instanceof RpcError) {\n        stream.notifyError(this.data.response);\n        return;\n      }\n      // regular response messages were mocked. notify() them.\n      for (let msg of messages) {\n        stream.notifyMessage(msg);\n        // add a short delay between responses\n        // if the request is cancelled, notify() error and exit.\n        try {\n          yield delay(this.betweenResponseDelay, abort)(undefined);\n        } catch (error) {\n          stream.notifyError(error);\n          return;\n        }\n      }\n      // error status was mocked, notify() error (stream is now closed with error) and exit.\n      if (this.data.status instanceof RpcError) {\n        stream.notifyError(this.data.status);\n        return;\n      }\n      // error trailers were mocked, notify() error (stream is now closed with error) and exit.\n      if (this.data.trailers instanceof RpcError) {\n        stream.notifyError(this.data.trailers);\n        return;\n      }\n      // stream completed successfully\n      stream.notifyComplete();\n    });\n  }\n  // Creates a promise for response status from the mock data.\n  promiseStatus() {\n    var _a;\n    const status = (_a = this.data.status) !== null && _a !== void 0 ? _a : TestTransport.defaultStatus;\n    return status instanceof RpcError ? Promise.reject(status) : Promise.resolve(status);\n  }\n  // Creates a promise for response trailers from the mock data.\n  promiseTrailers() {\n    var _a;\n    const trailers = (_a = this.data.trailers) !== null && _a !== void 0 ? _a : TestTransport.defaultTrailers;\n    return trailers instanceof RpcError ? Promise.reject(trailers) : Promise.resolve(trailers);\n  }\n  maybeSuppressUncaught(...promise) {\n    if (this.suppressUncaughtRejections) {\n      for (let p of promise) {\n        p.catch(() => {});\n      }\n    }\n  }\n  mergeOptions(options) {\n    return mergeRpcOptions({}, options);\n  }\n  unary(method, input, options) {\n    var _a;\n    const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {},\n      headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)),\n      responsePromise = headersPromise.catch(_ => {}).then(delay(this.responseDelay, options.abort)).then(_ => this.promiseSingleResponse(method)),\n      statusPromise = responsePromise.catch(_ => {}).then(delay(this.afterResponseDelay, options.abort)).then(_ => this.promiseStatus()),\n      trailersPromise = responsePromise.catch(_ => {}).then(delay(this.afterResponseDelay, options.abort)).then(_ => this.promiseTrailers());\n    this.maybeSuppressUncaught(statusPromise, trailersPromise);\n    this.lastInput = {\n      single: input\n    };\n    return new UnaryCall(method, requestHeaders, input, headersPromise, responsePromise, statusPromise, trailersPromise);\n  }\n  serverStreaming(method, input, options) {\n    var _a;\n    const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {},\n      headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)),\n      outputStream = new RpcOutputStreamController(),\n      responseStreamClosedPromise = headersPromise.then(delay(this.responseDelay, options.abort)).catch(() => {}).then(() => this.streamResponses(method, outputStream, options.abort)).then(delay(this.afterResponseDelay, options.abort)),\n      statusPromise = responseStreamClosedPromise.then(() => this.promiseStatus()),\n      trailersPromise = responseStreamClosedPromise.then(() => this.promiseTrailers());\n    this.maybeSuppressUncaught(statusPromise, trailersPromise);\n    this.lastInput = {\n      single: input\n    };\n    return new ServerStreamingCall(method, requestHeaders, input, headersPromise, outputStream, statusPromise, trailersPromise);\n  }\n  clientStreaming(method, options) {\n    var _a;\n    const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {},\n      headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)),\n      responsePromise = headersPromise.catch(_ => {}).then(delay(this.responseDelay, options.abort)).then(_ => this.promiseSingleResponse(method)),\n      statusPromise = responsePromise.catch(_ => {}).then(delay(this.afterResponseDelay, options.abort)).then(_ => this.promiseStatus()),\n      trailersPromise = responsePromise.catch(_ => {}).then(delay(this.afterResponseDelay, options.abort)).then(_ => this.promiseTrailers());\n    this.maybeSuppressUncaught(statusPromise, trailersPromise);\n    this.lastInput = new TestInputStream(this.data, options.abort);\n    return new ClientStreamingCall(method, requestHeaders, this.lastInput, headersPromise, responsePromise, statusPromise, trailersPromise);\n  }\n  duplex(method, options) {\n    var _a;\n    const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {},\n      headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)),\n      outputStream = new RpcOutputStreamController(),\n      responseStreamClosedPromise = headersPromise.then(delay(this.responseDelay, options.abort)).catch(() => {}).then(() => this.streamResponses(method, outputStream, options.abort)).then(delay(this.afterResponseDelay, options.abort)),\n      statusPromise = responseStreamClosedPromise.then(() => this.promiseStatus()),\n      trailersPromise = responseStreamClosedPromise.then(() => this.promiseTrailers());\n    this.maybeSuppressUncaught(statusPromise, trailersPromise);\n    this.lastInput = new TestInputStream(this.data, options.abort);\n    return new DuplexStreamingCall(method, requestHeaders, this.lastInput, headersPromise, outputStream, statusPromise, trailersPromise);\n  }\n}\nTestTransport.defaultHeaders = {\n  responseHeader: \"test\"\n};\nTestTransport.defaultStatus = {\n  code: \"OK\",\n  detail: \"all good\"\n};\nTestTransport.defaultTrailers = {\n  responseTrailer: \"test\"\n};\nfunction delay(ms, abort) {\n  return v => new Promise((resolve, reject) => {\n    if (abort === null || abort === void 0 ? void 0 : abort.aborted) {\n      reject(new RpcError(\"user cancel\", \"CANCELLED\"));\n    } else {\n      const id = setTimeout(() => resolve(v), ms);\n      if (abort) {\n        abort.addEventListener(\"abort\", ev => {\n          clearTimeout(id);\n          reject(new RpcError(\"user cancel\", \"CANCELLED\"));\n        });\n      }\n    }\n  });\n}\nclass TestInputStream {\n  constructor(data, abort) {\n    this._completed = false;\n    this._sent = [];\n    this.data = data;\n    this.abort = abort;\n  }\n  get sent() {\n    return this._sent;\n  }\n  get completed() {\n    return this._completed;\n  }\n  send(message) {\n    if (this.data.inputMessage instanceof RpcError) {\n      return Promise.reject(this.data.inputMessage);\n    }\n    const delayMs = this.data.inputMessage === undefined ? 10 : this.data.inputMessage;\n    return Promise.resolve(undefined).then(() => {\n      this._sent.push(message);\n    }).then(delay(delayMs, this.abort));\n  }\n  complete() {\n    if (this.data.inputComplete instanceof RpcError) {\n      return Promise.reject(this.data.inputComplete);\n    }\n    const delayMs = this.data.inputComplete === undefined ? 10 : this.data.inputComplete;\n    return Promise.resolve(undefined).then(() => {\n      this._completed = true;\n    }).then(delay(delayMs, this.abort));\n  }\n}", "import { assertNever } from \"@protobuf-ts/runtime\";\n/**\n * Creates a \"stack\" of of all interceptors specified in the given `RpcOptions`.\n * Used by generated client implementations.\n * @internal\n */\nexport function stackIntercept(kind, transport, method, options, input) {\n  var _a, _b, _c, _d;\n  if (kind == \"unary\") {\n    let tail = (mtd, inp, opt) => transport.unary(mtd, inp, opt);\n    for (const curr of ((_a = options.interceptors) !== null && _a !== void 0 ? _a : []).filter(i => i.interceptUnary).reverse()) {\n      const next = tail;\n      tail = (mtd, inp, opt) => curr.interceptUnary(next, mtd, inp, opt);\n    }\n    return tail(method, input, options);\n  }\n  if (kind == \"serverStreaming\") {\n    let tail = (mtd, inp, opt) => transport.serverStreaming(mtd, inp, opt);\n    for (const curr of ((_b = options.interceptors) !== null && _b !== void 0 ? _b : []).filter(i => i.interceptServerStreaming).reverse()) {\n      const next = tail;\n      tail = (mtd, inp, opt) => curr.interceptServerStreaming(next, mtd, inp, opt);\n    }\n    return tail(method, input, options);\n  }\n  if (kind == \"clientStreaming\") {\n    let tail = (mtd, opt) => transport.clientStreaming(mtd, opt);\n    for (const curr of ((_c = options.interceptors) !== null && _c !== void 0 ? _c : []).filter(i => i.interceptClientStreaming).reverse()) {\n      const next = tail;\n      tail = (mtd, opt) => curr.interceptClientStreaming(next, mtd, opt);\n    }\n    return tail(method, options);\n  }\n  if (kind == \"duplex\") {\n    let tail = (mtd, opt) => transport.duplex(mtd, opt);\n    for (const curr of ((_d = options.interceptors) !== null && _d !== void 0 ? _d : []).filter(i => i.interceptDuplex).reverse()) {\n      const next = tail;\n      tail = (mtd, opt) => curr.interceptDuplex(next, mtd, opt);\n    }\n    return tail(method, options);\n  }\n  assertNever(kind);\n}\n/**\n * @deprecated replaced by `stackIntercept()`, still here to support older generated code\n */\nexport function stackUnaryInterceptors(transport, method, input, options) {\n  return stackIntercept(\"unary\", transport, method, options, input);\n}\n/**\n * @deprecated replaced by `stackIntercept()`, still here to support older generated code\n */\nexport function stackServerStreamingInterceptors(transport, method, input, options) {\n  return stackIntercept(\"serverStreaming\", transport, method, options, input);\n}\n/**\n * @deprecated replaced by `stackIntercept()`, still here to support older generated code\n */\nexport function stackClientStreamingInterceptors(transport, method, options) {\n  return stackIntercept(\"clientStreaming\", transport, method, options);\n}\n/**\n * @deprecated replaced by `stackIntercept()`, still here to support older generated code\n */\nexport function stackDuplexStreamingInterceptors(transport, method, options) {\n  return stackIntercept(\"duplex\", transport, method, options);\n}", "// Copyright 2018 Twitch Interactive, Inc.  All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n// use this file except in compliance with the License. A copy of the License is\n// located at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License\n// for the specific language governing permissions and limitations under\n// the License.\n/**\n * See https://twitchtv.github.io/twirp/docs/spec_v5.html#error-codes\n *\n * Names and descriptions from [twirp / errors.go](https://github.com/twitchtv/twirp/blob/b2ecb97cf02a9bb55d730920f6a1cb5243899093/errors.go)\n *\n * Copyright 2018 by Twitch Interactive, Inc.\n */\nexport var TwirpErrorCode;\n(function (TwirpErrorCode) {\n  /**\n   * The operation was cancelled.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"cancelled\"] = 0] = \"cancelled\";\n  /**\n   * An unknown error occurred. For example, this can be used when handling\n   * errors raised by APIs that do not return any error information.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"unknown\"] = 1] = \"unknown\";\n  /**\n   * The client specified an invalid argument. This indicates arguments that\n   * are invalid regardless of the state of the system (i.e. a malformed\n   * file name, required argument, number out of range, etc.).\n   */\n  TwirpErrorCode[TwirpErrorCode[\"invalid_argument\"] = 2] = \"invalid_argument\";\n  /**\n   * The client sent a message which could not be decoded. This may mean that\n   * the message was encoded improperly or that the client and server have\n   * incompatible message definitions.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"malformed\"] = 3] = \"malformed\";\n  /**\n   * Operation expired before completion. For operations that change the state\n   * of the system, this error may be returned even if the operation has\n   * completed successfully (timeout).\n   */\n  TwirpErrorCode[TwirpErrorCode[\"deadline_exceeded\"] = 4] = \"deadline_exceeded\";\n  /**\n   * Some requested entity was not found.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"not_found\"] = 5] = \"not_found\";\n  /**\n   * The requested URL path wasn't routable to a Twirp service and method.\n   * This is returned by generated server code and should not be returned\n   * by application code (use \"not_found\" or \"unimplemented\" instead).\n   */\n  TwirpErrorCode[TwirpErrorCode[\"bad_route\"] = 6] = \"bad_route\";\n  /**\n   * An attempt to create an entity failed because one already exists.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"already_exists\"] = 7] = \"already_exists\";\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * It must not be used if the caller cannot be identified (use\n   * \"unauthenticated\" instead).\n   */\n  TwirpErrorCode[TwirpErrorCode[\"permission_denied\"] = 8] = \"permission_denied\";\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"unauthenticated\"] = 9] = \"unauthenticated\";\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or\n   * perhaps the entire file system is out of space.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"resource_exhausted\"] = 10] = \"resource_exhausted\";\n  /**\n   * The operation was rejected because the system is not in a state\n   * required for the operation's execution. For example, doing an rmdir\n   * operation on a directory that is non-empty, or on a non-directory\n   * object, or when having conflicting read-modify-write on the same\n   * resource.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"failed_precondition\"] = 11] = \"failed_precondition\";\n  /**\n   * The operation was aborted, typically due to a concurrency issue\n   * like sequencer check failures, transaction aborts, etc.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"aborted\"] = 12] = \"aborted\";\n  /**\n   * The operation was attempted past the valid range. For example, seeking\n   * or reading past end of a paginated collection. Unlike\n   * \"invalid_argument\", this error indicates a problem that may be fixed if\n   * the system state changes (i.e. adding more items to the collection).\n   * There is a fair bit of overlap between \"failed_precondition\" and\n   * \"out_of_range\". We recommend using \"out_of_range\" (the more specific\n   * error) when it applies so that callers who are iterating through a space\n   * can easily look for an \"out_of_range\" error to detect when they are done.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"out_of_range\"] = 13] = \"out_of_range\";\n  /**\n   * The operation is not implemented or not supported/enabled in this service.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"unimplemented\"] = 14] = \"unimplemented\";\n  /**\n   * When some invariants expected by the underlying system have been broken.\n   * In other words, something bad happened in the library or backend service.\n   * Twirp specific issues like wire and serialization problems are also\n   * reported as \"internal\" errors.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"internal\"] = 15] = \"internal\";\n  /**\n   * The service is currently unavailable. This is most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"unavailable\"] = 16] = \"unavailable\";\n  /**\n   * The operation resulted in unrecoverable data loss or corruption.\n   */\n  TwirpErrorCode[TwirpErrorCode[\"dataloss\"] = 17] = \"dataloss\";\n})(TwirpErrorCode || (TwirpErrorCode = {}));", "import { isJsonObject } from \"@protobuf-ts/runtime\";\nimport { RpcError } from \"@protobuf-ts/runtime-rpc\";\nimport { TwirpErrorCode } from \"./twitch-twirp-error-code\";\n/**\n * Create fetch API headers for a Twirp request.\n */\nexport function createTwirpRequestHeader(headers, sendJson, meta) {\n  // add meta as headers\n  if (meta) {\n    for (let [k, v] of Object.entries(meta)) {\n      if (typeof v == \"string\") headers.append(k, v);else for (let i of v) headers.append(k, i);\n    }\n  }\n  // set standard headers (possibly overwriting meta)\n  headers.set('Content-Type', sendJson ? \"application/json\" : \"application/protobuf\");\n  headers.set('Accept', sendJson ? \"application/json\" : \"application/protobuf, application/json\");\n  return headers;\n}\n/**\n * Parse Twirp error message from JSON and create RpcError from the Twirp error.\n *\n * see https://twitchtv.github.io/twirp/docs/spec_v5.html\n */\nexport function parseTwirpErrorResponse(json) {\n  if (!isJsonObject(json) || typeof json.code !== \"string\" || typeof json.msg !== \"string\") return new RpcError('cannot read twirp error response', TwirpErrorCode[TwirpErrorCode.internal]);\n  let meta = {};\n  if (isJsonObject(json.meta)) {\n    for (let [k, v] of Object.entries(json.meta)) {\n      if (typeof v == \"string\") meta[k] = v;\n    }\n  }\n  return new RpcError(json.msg, json.code, meta);\n}\n/**\n * Parses fetch API response headers to RpcMetaData.\n * Drops the headers Content-Type and Content-Length.\n */\nexport function parseMetadataFromResponseHeaders(headers) {\n  let meta = {};\n  headers.forEach((value, key) => {\n    if (key.toLowerCase() === 'content-type') return;\n    if (key.toLowerCase() === 'content-length') return;\n    if (meta.hasOwnProperty(key)) meta[key].push(value);else meta[key] = value;\n  });\n  return meta;\n}", "import { createTwirpRequestHeader, parseMetadataFromResponseHeaders, parseTwirpErrorResponse } from \"./twirp-format\";\nimport { Deferred, mergeRpcOptions, RpcError, UnaryCall } from \"@protobuf-ts/runtime-rpc\";\nimport { lowerCamelCase } from \"@protobuf-ts/runtime\";\nimport { TwirpErrorCode } from \"./twitch-twirp-error-code\";\n/**\n * Implements the Twirp protocol, supporting JSON or binary format on\n * the wire. Uses the fetch API to do the HTTP requests.\n *\n * See https://twitchtv.github.io/twirp/docs/spec_v5.html\n */\nexport class TwirpFetchTransport {\n  constructor(options) {\n    this.defaultOptions = options;\n  }\n  mergeOptions(options) {\n    return mergeRpcOptions(this.defaultOptions, options);\n  }\n  unary(method, input, options) {\n    var _a, _b, _c;\n    let opt = options,\n      url = this.makeUrl(method, opt),\n      fetchInit = (_a = opt.fetchInit) !== null && _a !== void 0 ? _a : {},\n      requestBody = opt.sendJson ? method.I.toJsonString(input, opt.jsonOptions) : method.I.toBinary(input, opt.binaryOptions),\n      defHeader = new Deferred(),\n      defMessage = new Deferred(),\n      defStatus = new Deferred(),\n      defTrailer = new Deferred();\n    globalThis.fetch(url, Object.assign(Object.assign({}, fetchInit), {\n      method: 'POST',\n      headers: createTwirpRequestHeader(new globalThis.Headers(), !!opt.sendJson, opt.meta),\n      body: requestBody,\n      signal: (_b = options.abort) !== null && _b !== void 0 ? _b : null // node-fetch@3.0.0-beta.9 rejects `undefined`\n    })).then(fetchResponse => {\n      defHeader.resolve(parseMetadataFromResponseHeaders(fetchResponse.headers));\n      // Cloudflare Workers throw when the type property of a fetch response\n      // is accessed, so wrap access with try/catch. See:\n      // * https://developers.cloudflare.com/workers/runtime-apis/response/#properties\n      // * https://github.com/cloudflare/miniflare/blob/72f046e/packages/core/src/standards/http.ts#L646\n      let responseType;\n      try {\n        responseType = fetchResponse.type;\n      } catch (_a) {}\n      switch (responseType) {\n        case \"error\":\n        case \"opaque\":\n        case \"opaqueredirect\":\n          // see https://developer.mozilla.org/en-US/docs/Web/API/Response/type\n          throw new RpcError(`fetch response type ${fetchResponse.type}`, TwirpErrorCode[TwirpErrorCode.unknown]);\n      }\n      if (!fetchResponse.ok) {\n        return fetchResponse.json().then(value => {\n          throw parseTwirpErrorResponse(value);\n        }, () => {\n          throw new RpcError('received HTTP ' + fetchResponse.status + ', unable to read response body as json', TwirpErrorCode[TwirpErrorCode.internal]);\n        });\n      }\n      if (opt.sendJson) {\n        return fetchResponse.json().then(value => method.O.fromJson(value, opt.jsonOptions), () => {\n          throw new RpcError('unable to read response body as json', TwirpErrorCode[TwirpErrorCode.dataloss]);\n        });\n      }\n      return fetchResponse.arrayBuffer().then(value => method.O.fromBinary(new Uint8Array(value), opt.binaryOptions), () => {\n        throw new RpcError('unable to read response body', TwirpErrorCode[TwirpErrorCode.dataloss]);\n      });\n    }, reason => {\n      // failed to fetch, aborted, wrong url or network problem\n      if (reason instanceof Error && reason.name === 'AbortError') throw new RpcError(reason.message, TwirpErrorCode[TwirpErrorCode.cancelled]);\n      throw new RpcError(reason instanceof Error ? reason.message : reason);\n    }).then(message => {\n      defMessage.resolve(message);\n      defStatus.resolve({\n        code: 'OK',\n        detail: ''\n      });\n      defTrailer.resolve({});\n    }).catch(reason => {\n      // RpcErrors are thrown by us, everything else is an internal error\n      let error = reason instanceof RpcError ? reason : new RpcError(reason instanceof Error ? reason.message : reason, TwirpErrorCode[TwirpErrorCode.internal]);\n      error.methodName = method.name;\n      error.serviceName = method.service.typeName;\n      defHeader.rejectPending(error);\n      defMessage.rejectPending(error);\n      defStatus.rejectPending(error);\n      defTrailer.rejectPending(error);\n    });\n    return new UnaryCall(method, (_c = opt.meta) !== null && _c !== void 0 ? _c : {}, input, defHeader.promise, defMessage.promise, defStatus.promise, defTrailer.promise);\n  }\n  /**\n   * Create an URI for a RPC call.\n   *\n   * Takes the `baseUrl` option and appends:\n   * - slash \"/\"\n   * - package name\n   * - dot \".\"\n   * - service name\n   * - slash \"/\"\n   * - method name\n   *\n   * If the service was declared without a package, the package name and dot\n   * are omitted.\n   *\n   * The method name is CamelCased just as it would be in Go, unless the\n   * option `useProtoMethodName` is `true`.\n   */\n  makeUrl(method, options) {\n    let base = options.baseUrl;\n    if (base.endsWith('/')) base = base.substring(0, base.length - 1);\n    let methodName = method.name;\n    if (options.useProtoMethodName !== true) {\n      methodName = lowerCamelCase(methodName);\n      methodName = methodName.substring(0, 1).toUpperCase() + methodName.substring(1);\n    }\n    return `${base}/${method.service.typeName}/${methodName}`;\n  }\n  clientStreaming(method /*, options: RpcOptions*/) {\n    const e = new RpcError('Client streaming is not supported by Twirp', TwirpErrorCode[TwirpErrorCode.unimplemented]);\n    e.methodName = method.name;\n    e.serviceName = method.service.typeName;\n    throw e;\n  }\n  duplex(method /*, options: RpcOptions*/) {\n    const e = new RpcError('Duplex streaming is not supported by Twirp', TwirpErrorCode[TwirpErrorCode.unimplemented]);\n    e.methodName = method.name;\n    e.serviceName = method.service.typeName;\n    throw e;\n  }\n  serverStreaming(method /*, input: I, options?: RpcOptions*/) {\n    const e = new RpcError('Server streaming is not supported by Twirp', TwirpErrorCode[TwirpErrorCode.unimplemented]);\n    e.methodName = method.name;\n    e.serviceName = method.service.typeName;\n    throw e;\n  }\n}", "import 'webrtc-adapter';\nimport { MessageType, isJsonObject, typeofJsonValue, PbLong } from '@protobuf-ts/runtime';\nimport { ServiceType, stackIntercept, RpcError } from '@protobuf-ts/runtime-rpc';\nimport axios from 'axios';\nexport { AxiosError } from 'axios';\nimport { TwirpFetchTransport, TwirpErrorCode } from '@protobuf-ts/twirp-transport';\nimport { ReplaySubject, combineLatest, BehaviorSubject, map, shareReplay, distinctUntilChanged, takeWhile, distinctUntilKeyChanged, fromEventPattern, startWith, concatMap, merge, from, fromEvent, debounceTime, pairwise, of } from 'rxjs';\nimport { UAParser } from 'ua-parser-js';\nimport { parse } from 'sdp-transform';\nclass Tracer {\n  constructor(id) {\n    this.buffer = [];\n    this.enabled = true;\n    this.setEnabled = enabled => {\n      if (this.enabled === enabled) return;\n      this.enabled = enabled;\n      this.buffer = [];\n    };\n    this.trace = (tag, data) => {\n      if (!this.enabled) return;\n      this.buffer.push([tag, this.id, data, Date.now()]);\n    };\n    this.take = () => {\n      const snapshot = this.buffer;\n      this.buffer = [];\n      return {\n        snapshot,\n        rollback: () => {\n          this.buffer.unshift(...snapshot);\n        }\n      };\n    };\n    this.dispose = () => {\n      this.buffer = [];\n    };\n    this.id = id;\n  }\n}\nconst tracer = new Tracer(null);\nif (typeof navigator !== 'undefined' && typeof navigator.mediaDevices !== 'undefined') {\n  const dumpStream = stream => ({\n    id: stream.id,\n    tracks: stream.getTracks().map(track => ({\n      id: track.id,\n      kind: track.kind,\n      label: track.label,\n      enabled: track.enabled,\n      muted: track.muted,\n      readyState: track.readyState\n    }))\n  });\n  const trace = tracer.trace;\n  const target = navigator.mediaDevices;\n  for (const method of ['getUserMedia', 'getDisplayMedia']) {\n    const original = target[method];\n    if (!original) continue;\n    let mark = 0;\n    target[method] = async function tracedMethod(constraints) {\n      const tag = `navigator.mediaDevices.${method}.${mark++}`;\n      trace(tag, constraints);\n      try {\n        const stream = await original.call(target, constraints);\n        trace(`${tag}.OnSuccess`, dumpStream(stream));\n        return stream;\n      } catch (err) {\n        trace(`${tag}.OnFailure`, err.name);\n        throw err;\n      }\n    };\n  }\n}\n\n/* tslint:disable */\n/**\n * @export\n */\nconst AudioSettingsRequestDefaultDeviceEnum = {\n  SPEAKER: 'speaker',\n  EARPIECE: 'earpiece'\n};\n/**\n * @export\n */\nconst AudioSettingsResponseDefaultDeviceEnum = {\n  SPEAKER: 'speaker',\n  EARPIECE: 'earpiece'\n};\n/**\n * @export\n */\nconst CreateDeviceRequestPushProviderEnum = {\n  FIREBASE: 'firebase',\n  APN: 'apn',\n  HUAWEI: 'huawei',\n  XIAOMI: 'xiaomi'\n};\n/**\n * @export\n */\nconst FrameRecordingSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */\nconst FrameRecordingSettingsRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n  _2160P: '2160p'\n};\n/**\n * @export\n */\nconst FrameRecordingSettingsResponseModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */\nconst LayoutSettingsRequestNameEnum = {\n  SPOTLIGHT: 'spotlight',\n  GRID: 'grid',\n  SINGLE_PARTICIPANT: 'single-participant',\n  MOBILE: 'mobile',\n  CUSTOM: 'custom'\n};\n/**\n * @export\n */\nconst NoiseCancellationSettingsModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on'\n};\n/**\n * All possibility of string to use\n * @export\n */\nconst OwnCapability = {\n  BLOCK_USERS: 'block-users',\n  CHANGE_MAX_DURATION: 'change-max-duration',\n  CREATE_CALL: 'create-call',\n  CREATE_REACTION: 'create-reaction',\n  ENABLE_NOISE_CANCELLATION: 'enable-noise-cancellation',\n  END_CALL: 'end-call',\n  JOIN_BACKSTAGE: 'join-backstage',\n  JOIN_CALL: 'join-call',\n  JOIN_ENDED_CALL: 'join-ended-call',\n  MUTE_USERS: 'mute-users',\n  PIN_FOR_EVERYONE: 'pin-for-everyone',\n  READ_CALL: 'read-call',\n  REMOVE_CALL_MEMBER: 'remove-call-member',\n  SCREENSHARE: 'screenshare',\n  SEND_AUDIO: 'send-audio',\n  SEND_VIDEO: 'send-video',\n  START_BROADCAST_CALL: 'start-broadcast-call',\n  START_CLOSED_CAPTIONS_CALL: 'start-closed-captions-call',\n  START_FRAME_RECORD_CALL: 'start-frame-record-call',\n  START_RECORD_CALL: 'start-record-call',\n  START_TRANSCRIPTION_CALL: 'start-transcription-call',\n  STOP_BROADCAST_CALL: 'stop-broadcast-call',\n  STOP_CLOSED_CAPTIONS_CALL: 'stop-closed-captions-call',\n  STOP_FRAME_RECORD_CALL: 'stop-frame-record-call',\n  STOP_RECORD_CALL: 'stop-record-call',\n  STOP_TRANSCRIPTION_CALL: 'stop-transcription-call',\n  UPDATE_CALL: 'update-call',\n  UPDATE_CALL_MEMBER: 'update-call-member',\n  UPDATE_CALL_PERMISSIONS: 'update-call-permissions',\n  UPDATE_CALL_SETTINGS: 'update-call-settings'\n};\n/**\n * @export\n */\nconst RTMPBroadcastRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n  _2160P: '2160p',\n  PORTRAIT_360X640: 'portrait-360x640',\n  PORTRAIT_480X854: 'portrait-480x854',\n  PORTRAIT_720X1280: 'portrait-720x1280',\n  PORTRAIT_1080X1920: 'portrait-1080x1920',\n  PORTRAIT_1440X2560: 'portrait-1440x2560',\n  PORTRAIT_2160X3840: 'portrait-2160x3840'\n};\n/**\n * @export\n */\nconst RTMPSettingsRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n  _2160P: '2160p',\n  PORTRAIT_360X640: 'portrait-360x640',\n  PORTRAIT_480X854: 'portrait-480x854',\n  PORTRAIT_720X1280: 'portrait-720x1280',\n  PORTRAIT_1080X1920: 'portrait-1080x1920',\n  PORTRAIT_1440X2560: 'portrait-1440x2560',\n  PORTRAIT_2160X3840: 'portrait-2160x3840'\n};\n/**\n * @export\n */\nconst RecordSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */\nconst RecordSettingsRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n  _2160P: '2160p',\n  PORTRAIT_360X640: 'portrait-360x640',\n  PORTRAIT_480X854: 'portrait-480x854',\n  PORTRAIT_720X1280: 'portrait-720x1280',\n  PORTRAIT_1080X1920: 'portrait-1080x1920',\n  PORTRAIT_1440X2560: 'portrait-1440x2560',\n  PORTRAIT_2160X3840: 'portrait-2160x3840'\n};\n/**\n * @export\n */\nconst TranscriptionSettingsRequestClosedCaptionModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */\nconst TranscriptionSettingsRequestLanguageEnum = {\n  AUTO: 'auto',\n  EN: 'en',\n  FR: 'fr',\n  ES: 'es',\n  DE: 'de',\n  IT: 'it',\n  NL: 'nl',\n  PT: 'pt',\n  PL: 'pl',\n  CA: 'ca',\n  CS: 'cs',\n  DA: 'da',\n  EL: 'el',\n  FI: 'fi',\n  ID: 'id',\n  JA: 'ja',\n  RU: 'ru',\n  SV: 'sv',\n  TA: 'ta',\n  TH: 'th',\n  TR: 'tr',\n  HU: 'hu',\n  RO: 'ro',\n  ZH: 'zh',\n  AR: 'ar',\n  TL: 'tl',\n  HE: 'he',\n  HI: 'hi',\n  HR: 'hr',\n  KO: 'ko',\n  MS: 'ms',\n  NO: 'no',\n  UK: 'uk'\n};\n/**\n * @export\n */\nconst TranscriptionSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */\nconst TranscriptionSettingsResponseClosedCaptionModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */\nconst TranscriptionSettingsResponseLanguageEnum = {\n  AUTO: 'auto',\n  EN: 'en',\n  FR: 'fr',\n  ES: 'es',\n  DE: 'de',\n  IT: 'it',\n  NL: 'nl',\n  PT: 'pt',\n  PL: 'pl',\n  CA: 'ca',\n  CS: 'cs',\n  DA: 'da',\n  EL: 'el',\n  FI: 'fi',\n  ID: 'id',\n  JA: 'ja',\n  RU: 'ru',\n  SV: 'sv',\n  TA: 'ta',\n  TH: 'th',\n  TR: 'tr',\n  HU: 'hu',\n  RO: 'ro',\n  ZH: 'zh',\n  AR: 'ar',\n  TL: 'tl',\n  HE: 'he',\n  HI: 'hi',\n  HR: 'hr',\n  KO: 'ko',\n  MS: 'ms',\n  NO: 'no',\n  UK: 'uk'\n};\n/**\n * @export\n */\nconst TranscriptionSettingsResponseModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */\nconst VideoSettingsRequestCameraFacingEnum = {\n  FRONT: 'front',\n  BACK: 'back',\n  EXTERNAL: 'external'\n};\n/**\n * @export\n */\nconst VideoSettingsResponseCameraFacingEnum = {\n  FRONT: 'front',\n  BACK: 'back',\n  EXTERNAL: 'external'\n};\nclass ErrorFromResponse extends Error {}\n\n// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"google/protobuf/struct.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */\nvar NullValue;\n(function (NullValue) {\n  /**\n   * Null value.\n   *\n   * @generated from protobuf enum value: NULL_VALUE = 0;\n   */\n  NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends MessageType {\n  constructor() {\n    super('google.protobuf.Struct', [{\n      no: 1,\n      name: 'fields',\n      kind: 'map',\n      K: 9 /*ScalarType.STRING*/,\n      V: {\n        kind: 'message',\n        T: () => Value\n      }\n    }]);\n  }\n  /**\n   * Encode `Struct` to JSON object.\n   */\n  internalJsonWrite(message, options) {\n    let json = {};\n    for (let [k, v] of Object.entries(message.fields)) {\n      json[k] = Value.toJson(v);\n    }\n    return json;\n  }\n  /**\n   * Decode `Struct` from JSON object.\n   */\n  internalJsonRead(json, options, target) {\n    if (!isJsonObject(json)) throw new globalThis.Error('Unable to parse message ' + this.typeName + ' from JSON ' + typeofJsonValue(json) + '.');\n    if (!target) target = this.create();\n    for (let [k, v] of globalThis.Object.entries(json)) {\n      target.fields[k] = Value.fromJson(v);\n    }\n    return target;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */\nconst Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends MessageType {\n  constructor() {\n    super('google.protobuf.Value', [{\n      no: 1,\n      name: 'null_value',\n      kind: 'enum',\n      oneof: 'kind',\n      T: () => ['google.protobuf.NullValue', NullValue]\n    }, {\n      no: 2,\n      name: 'number_value',\n      kind: 'scalar',\n      oneof: 'kind',\n      T: 1 /*ScalarType.DOUBLE*/\n    }, {\n      no: 3,\n      name: 'string_value',\n      kind: 'scalar',\n      oneof: 'kind',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 4,\n      name: 'bool_value',\n      kind: 'scalar',\n      oneof: 'kind',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 5,\n      name: 'struct_value',\n      kind: 'message',\n      oneof: 'kind',\n      T: () => Struct\n    }, {\n      no: 6,\n      name: 'list_value',\n      kind: 'message',\n      oneof: 'kind',\n      T: () => ListValue\n    }]);\n  }\n  /**\n   * Encode `Value` to JSON value.\n   */\n  internalJsonWrite(message, options) {\n    if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n    switch (message.kind.oneofKind) {\n      case undefined:\n        throw new globalThis.Error();\n      case 'boolValue':\n        return message.kind.boolValue;\n      case 'nullValue':\n        return null;\n      case 'numberValue':\n        let numberValue = message.kind.numberValue;\n        if (typeof numberValue == 'number' && !Number.isFinite(numberValue)) throw new globalThis.Error();\n        return numberValue;\n      case 'stringValue':\n        return message.kind.stringValue;\n      case 'listValue':\n        let listValueField = this.fields.find(f => f.no === 6);\n        if (listValueField?.kind !== 'message') throw new globalThis.Error();\n        return listValueField.T().toJson(message.kind.listValue);\n      case 'structValue':\n        let structValueField = this.fields.find(f => f.no === 5);\n        if (structValueField?.kind !== 'message') throw new globalThis.Error();\n        return structValueField.T().toJson(message.kind.structValue);\n    }\n  }\n  /**\n   * Decode `Value` from JSON value.\n   */\n  internalJsonRead(json, options, target) {\n    if (!target) target = this.create();\n    switch (typeof json) {\n      case 'number':\n        target.kind = {\n          oneofKind: 'numberValue',\n          numberValue: json\n        };\n        break;\n      case 'string':\n        target.kind = {\n          oneofKind: 'stringValue',\n          stringValue: json\n        };\n        break;\n      case 'boolean':\n        target.kind = {\n          oneofKind: 'boolValue',\n          boolValue: json\n        };\n        break;\n      case 'object':\n        if (json === null) {\n          target.kind = {\n            oneofKind: 'nullValue',\n            nullValue: NullValue.NULL_VALUE\n          };\n        } else if (globalThis.Array.isArray(json)) {\n          target.kind = {\n            oneofKind: 'listValue',\n            listValue: ListValue.fromJson(json)\n          };\n        } else {\n          target.kind = {\n            oneofKind: 'structValue',\n            structValue: Struct.fromJson(json)\n          };\n        }\n        break;\n      default:\n        throw new globalThis.Error('Unable to parse ' + this.typeName + ' from JSON ' + typeofJsonValue(json));\n    }\n    return target;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */\nconst Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends MessageType {\n  constructor() {\n    super('google.protobuf.ListValue', [{\n      no: 1,\n      name: 'values',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => Value\n    }]);\n  }\n  /**\n   * Encode `ListValue` to JSON array.\n   */\n  internalJsonWrite(message, options) {\n    return message.values.map(v => Value.toJson(v));\n  }\n  /**\n   * Decode `ListValue` from JSON array.\n   */\n  internalJsonRead(json, options, target) {\n    if (!globalThis.Array.isArray(json)) throw new globalThis.Error('Unable to parse ' + this.typeName + ' from JSON ' + typeofJsonValue(json));\n    if (!target) target = this.create();\n    let values = json.map(v => Value.fromJson(v));\n    target.values.push(...values);\n    return target;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */\nconst ListValue = new ListValue$Type();\n\n// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"google/protobuf/timestamp.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends MessageType {\n  constructor() {\n    super('google.protobuf.Timestamp', [{\n      no: 1,\n      name: 'seconds',\n      kind: 'scalar',\n      T: 3 /*ScalarType.INT64*/\n    }, {\n      no: 2,\n      name: 'nanos',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }]);\n  }\n  /**\n   * Creates a new `Timestamp` for the current time.\n   */\n  now() {\n    const msg = this.create();\n    const ms = Date.now();\n    msg.seconds = PbLong.from(Math.floor(ms / 1000)).toString();\n    msg.nanos = ms % 1000 * 1000000;\n    return msg;\n  }\n  /**\n   * Converts a `Timestamp` to a JavaScript Date.\n   */\n  toDate(message) {\n    return new Date(PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));\n  }\n  /**\n   * Converts a JavaScript Date to a `Timestamp`.\n   */\n  fromDate(date) {\n    const msg = this.create();\n    const ms = date.getTime();\n    msg.seconds = PbLong.from(Math.floor(ms / 1000)).toString();\n    msg.nanos = (ms % 1000 + (ms < 0 && ms % 1000 !== 0 ? 1000 : 0)) * 1000000;\n    return msg;\n  }\n  /**\n   * In JSON format, the `Timestamp` type is encoded as a string\n   * in the RFC 3339 format.\n   */\n  internalJsonWrite(message, options) {\n    let ms = PbLong.from(message.seconds).toNumber() * 1000;\n    if (ms < Date.parse('0001-01-01T00:00:00Z') || ms > Date.parse('9999-12-31T23:59:59Z')) throw new Error('Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.');\n    if (message.nanos < 0) throw new Error('Unable to encode invalid Timestamp to JSON. Nanos must not be negative.');\n    let z = 'Z';\n    if (message.nanos > 0) {\n      let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n      if (nanosStr.substring(3) === '000000') z = '.' + nanosStr.substring(0, 3) + 'Z';else if (nanosStr.substring(6) === '000') z = '.' + nanosStr.substring(0, 6) + 'Z';else z = '.' + nanosStr + 'Z';\n    }\n    return new Date(ms).toISOString().replace('.000Z', z);\n  }\n  /**\n   * In JSON format, the `Timestamp` type is encoded as a string\n   * in the RFC 3339 format.\n   */\n  internalJsonRead(json, options, target) {\n    if (typeof json !== 'string') throw new Error('Unable to parse Timestamp from JSON ' + typeofJsonValue(json) + '.');\n    let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n    if (!matches) throw new Error('Unable to parse Timestamp from JSON. Invalid format.');\n    let ms = Date.parse(matches[1] + '-' + matches[2] + '-' + matches[3] + 'T' + matches[4] + ':' + matches[5] + ':' + matches[6] + (matches[8] ? matches[8] : 'Z'));\n    if (Number.isNaN(ms)) throw new Error('Unable to parse Timestamp from JSON. Invalid value.');\n    if (ms < Date.parse('0001-01-01T00:00:00Z') || ms > Date.parse('9999-12-31T23:59:59Z')) throw new globalThis.Error('Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.');\n    if (!target) target = this.create();\n    target.seconds = PbLong.from(ms / 1000).toString();\n    target.nanos = 0;\n    if (matches[7]) target.nanos = parseInt('1' + matches[7] + '0'.repeat(9 - matches[7].length)) - 1000000000;\n    return target;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */\nconst Timestamp = new Timestamp$Type();\n\n// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/models/models.proto\" (package \"stream.video.sfu.models\", syntax proto3)\n// tslint:disable\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */\nvar PeerType;\n(function (PeerType) {\n  /**\n   * todo fix me (marcelo)\n   *\n   * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n   */\n  PeerType[PeerType[\"PUBLISHER_UNSPECIFIED\"] = 0] = \"PUBLISHER_UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n   */\n  PeerType[PeerType[\"SUBSCRIBER\"] = 1] = \"SUBSCRIBER\";\n})(PeerType || (PeerType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */\nvar ConnectionQuality;\n(function (ConnectionQuality) {\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n   */\n  ConnectionQuality[ConnectionQuality[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n   */\n  ConnectionQuality[ConnectionQuality[\"POOR\"] = 1] = \"POOR\";\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n   */\n  ConnectionQuality[ConnectionQuality[\"GOOD\"] = 2] = \"GOOD\";\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n   */\n  ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 3] = \"EXCELLENT\";\n})(ConnectionQuality || (ConnectionQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */\nvar VideoQuality;\n(function (VideoQuality) {\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n   */\n  VideoQuality[VideoQuality[\"LOW_UNSPECIFIED\"] = 0] = \"LOW_UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n   */\n  VideoQuality[VideoQuality[\"MID\"] = 1] = \"MID\";\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n   */\n  VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n   */\n  VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n})(VideoQuality || (VideoQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */\nvar TrackType;\n(function (TrackType) {\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n   */\n  TrackType[TrackType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n   */\n  TrackType[TrackType[\"AUDIO\"] = 1] = \"AUDIO\";\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n   */\n  TrackType[TrackType[\"VIDEO\"] = 2] = \"VIDEO\";\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n   */\n  TrackType[TrackType[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n   */\n  TrackType[TrackType[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n})(TrackType || (TrackType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n   */\n  ErrorCode[ErrorCode[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n   */\n  ErrorCode[ErrorCode[\"PUBLISH_TRACK_NOT_FOUND\"] = 100] = \"PUBLISH_TRACK_NOT_FOUND\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n   */\n  ErrorCode[ErrorCode[\"PUBLISH_TRACKS_MISMATCH\"] = 101] = \"PUBLISH_TRACKS_MISMATCH\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n   */\n  ErrorCode[ErrorCode[\"PUBLISH_TRACK_OUT_OF_ORDER\"] = 102] = \"PUBLISH_TRACK_OUT_OF_ORDER\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n   */\n  ErrorCode[ErrorCode[\"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\"] = 103] = \"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n   */\n  ErrorCode[ErrorCode[\"LIVE_ENDED\"] = 104] = \"LIVE_ENDED\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n   */\n  ErrorCode[ErrorCode[\"PARTICIPANT_NOT_FOUND\"] = 200] = \"PARTICIPANT_NOT_FOUND\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n   */\n  ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING_OUT\"] = 201] = \"PARTICIPANT_MIGRATING_OUT\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n   */\n  ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATION_FAILED\"] = 202] = \"PARTICIPANT_MIGRATION_FAILED\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n   */\n  ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING\"] = 203] = \"PARTICIPANT_MIGRATING\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n   */\n  ErrorCode[ErrorCode[\"PARTICIPANT_RECONNECT_FAILED\"] = 204] = \"PARTICIPANT_RECONNECT_FAILED\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n   */\n  ErrorCode[ErrorCode[\"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\"] = 205] = \"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n   */\n  ErrorCode[ErrorCode[\"CALL_NOT_FOUND\"] = 300] = \"CALL_NOT_FOUND\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n   */\n  ErrorCode[ErrorCode[\"REQUEST_VALIDATION_FAILED\"] = 400] = \"REQUEST_VALIDATION_FAILED\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n   */\n  ErrorCode[ErrorCode[\"UNAUTHENTICATED\"] = 401] = \"UNAUTHENTICATED\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n   */\n  ErrorCode[ErrorCode[\"PERMISSION_DENIED\"] = 403] = \"PERMISSION_DENIED\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n   */\n  ErrorCode[ErrorCode[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n   */\n  ErrorCode[ErrorCode[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n   */\n  ErrorCode[ErrorCode[\"SFU_SHUTTING_DOWN\"] = 600] = \"SFU_SHUTTING_DOWN\";\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n   */\n  ErrorCode[ErrorCode[\"SFU_FULL\"] = 700] = \"SFU_FULL\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */\nvar SdkType;\n(function (SdkType) {\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n   */\n  SdkType[SdkType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n   */\n  SdkType[SdkType[\"REACT\"] = 1] = \"REACT\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n   */\n  SdkType[SdkType[\"ANGULAR\"] = 2] = \"ANGULAR\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n   */\n  SdkType[SdkType[\"ANDROID\"] = 3] = \"ANDROID\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n   */\n  SdkType[SdkType[\"IOS\"] = 4] = \"IOS\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n   */\n  SdkType[SdkType[\"FLUTTER\"] = 5] = \"FLUTTER\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n   */\n  SdkType[SdkType[\"REACT_NATIVE\"] = 6] = \"REACT_NATIVE\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n   */\n  SdkType[SdkType[\"UNITY\"] = 7] = \"UNITY\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_GO = 8;\n   */\n  SdkType[SdkType[\"GO\"] = 8] = \"GO\";\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_PLAIN_JAVASCRIPT = 9;\n   */\n  SdkType[SdkType[\"PLAIN_JAVASCRIPT\"] = 9] = \"PLAIN_JAVASCRIPT\";\n})(SdkType || (SdkType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */\nvar TrackUnpublishReason;\n(function (TrackUnpublishReason) {\n  /**\n   * Default value which is used when the specific reason\n   * for muting the track is not known.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n   */\n  TrackUnpublishReason[TrackUnpublishReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * Represents user muting their tracks.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n   */\n  TrackUnpublishReason[TrackUnpublishReason[\"USER_MUTED\"] = 1] = \"USER_MUTED\";\n  /**\n   * Represents muting the track because the permission to\n   * publish the track has been revoked.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n   */\n  TrackUnpublishReason[TrackUnpublishReason[\"PERMISSION_REVOKED\"] = 2] = \"PERMISSION_REVOKED\";\n  /**\n   * Represents muting the track due to moderation actions.\n   * This is different from permission revoked because the\n   * participant can unmute themselves here whereas in case\n   * of \"permission revoke\" it is not possible until the\n   * call permissions are updated.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n   */\n  TrackUnpublishReason[TrackUnpublishReason[\"MODERATION\"] = 3] = \"MODERATION\";\n})(TrackUnpublishReason || (TrackUnpublishReason = {}));\n/**\n * GoAwayReason represents the reason for the SFU to\n * disconnect the client.\n *\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */\nvar GoAwayReason;\n(function (GoAwayReason) {\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n   */\n  GoAwayReason[GoAwayReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n   */\n  GoAwayReason[GoAwayReason[\"SHUTTING_DOWN\"] = 1] = \"SHUTTING_DOWN\";\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n   */\n  GoAwayReason[GoAwayReason[\"REBALANCE\"] = 2] = \"REBALANCE\";\n})(GoAwayReason || (GoAwayReason = {}));\n/**\n * CallEndedReason represents the reason for the call to end.\n *\n * @generated from protobuf enum stream.video.sfu.models.CallEndedReason\n */\nvar CallEndedReason;\n(function (CallEndedReason) {\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_UNSPECIFIED = 0;\n   */\n  CallEndedReason[CallEndedReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_ENDED = 1;\n   */\n  CallEndedReason[CallEndedReason[\"ENDED\"] = 1] = \"ENDED\";\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_LIVE_ENDED = 2;\n   */\n  CallEndedReason[CallEndedReason[\"LIVE_ENDED\"] = 2] = \"LIVE_ENDED\";\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_KICKED = 3;\n   */\n  CallEndedReason[CallEndedReason[\"KICKED\"] = 3] = \"KICKED\";\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_SESSION_ENDED = 4;\n   */\n  CallEndedReason[CallEndedReason[\"SESSION_ENDED\"] = 4] = \"SESSION_ENDED\";\n})(CallEndedReason || (CallEndedReason = {}));\n/**\n * WebsocketReconnectStrategy defines the ws strategies available for handling reconnections.\n *\n * @generated from protobuf enum stream.video.sfu.models.WebsocketReconnectStrategy\n */\nvar WebsocketReconnectStrategy;\n(function (WebsocketReconnectStrategy) {\n  /**\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED = 0;\n   */\n  WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * Sent after reaching the maximum reconnection attempts, or any other unrecoverable error leading to permanent disconnect.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT = 1;\n   */\n  WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  /**\n   * SDK should maintaining existing publisher/subscriber pc instances\n   * and establish a new WebSocket connection.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FAST = 2;\n   */\n  WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"FAST\"] = 2] = \"FAST\";\n  /**\n   * SDK should obtain new credentials from the coordinator, drops existing pc instances, set a new session_id and initializes\n   * a completely new WebSocket connection, ensuring a comprehensive reset.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_REJOIN = 3;\n   */\n  WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"REJOIN\"] = 3] = \"REJOIN\";\n  /**\n   * SDK should migrate to a new SFU instance\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_MIGRATE = 4;\n   */\n  WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"MIGRATE\"] = 4] = \"MIGRATE\";\n})(WebsocketReconnectStrategy || (WebsocketReconnectStrategy = {}));\n/**\n * AndroidThermalState is reported by the Android API. The full list of values is documented here\n * https://developer.android.com/reference/android/os/PowerManager.html#getCurrentThermalStatus()\n *\n * @generated from protobuf enum stream.video.sfu.models.AndroidThermalState\n */\nvar AndroidThermalState;\n(function (AndroidThermalState) {\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_UNSPECIFIED = 0;\n   */\n  AndroidThermalState[AndroidThermalState[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_NONE = 1;\n   */\n  AndroidThermalState[AndroidThermalState[\"NONE\"] = 1] = \"NONE\";\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_LIGHT = 2;\n   */\n  AndroidThermalState[AndroidThermalState[\"LIGHT\"] = 2] = \"LIGHT\";\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_MODERATE = 3;\n   */\n  AndroidThermalState[AndroidThermalState[\"MODERATE\"] = 3] = \"MODERATE\";\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_SEVERE = 4;\n   */\n  AndroidThermalState[AndroidThermalState[\"SEVERE\"] = 4] = \"SEVERE\";\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_CRITICAL = 5;\n   */\n  AndroidThermalState[AndroidThermalState[\"CRITICAL\"] = 5] = \"CRITICAL\";\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_EMERGENCY = 6;\n   */\n  AndroidThermalState[AndroidThermalState[\"EMERGENCY\"] = 6] = \"EMERGENCY\";\n  /**\n   * @generated from protobuf enum value: ANDROID_THERMAL_STATE_SHUTDOWN = 7;\n   */\n  AndroidThermalState[AndroidThermalState[\"SHUTDOWN\"] = 7] = \"SHUTDOWN\";\n})(AndroidThermalState || (AndroidThermalState = {}));\n/**\n * AppleThermalState is the thermal state as reported by Apple devices when available or applicable to the platform.\n * The full list of states (enum) is available here: https://developer.apple.com/documentation/foundation/processinfo/thermalstate\n *\n * @generated from protobuf enum stream.video.sfu.models.AppleThermalState\n */\nvar AppleThermalState;\n(function (AppleThermalState) {\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_UNSPECIFIED = 0;\n   */\n  AppleThermalState[AppleThermalState[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_NOMINAL = 1;\n   */\n  AppleThermalState[AppleThermalState[\"NOMINAL\"] = 1] = \"NOMINAL\";\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_FAIR = 2;\n   */\n  AppleThermalState[AppleThermalState[\"FAIR\"] = 2] = \"FAIR\";\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_SERIOUS = 3;\n   */\n  AppleThermalState[AppleThermalState[\"SERIOUS\"] = 3] = \"SERIOUS\";\n  /**\n   * @generated from protobuf enum value: APPLE_THERMAL_STATE_CRITICAL = 4;\n   */\n  AppleThermalState[AppleThermalState[\"CRITICAL\"] = 4] = \"CRITICAL\";\n})(AppleThermalState || (AppleThermalState = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.CallState', [{\n      no: 1,\n      name: 'participants',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => Participant\n    }, {\n      no: 2,\n      name: 'started_at',\n      kind: 'message',\n      T: () => Timestamp\n    }, {\n      no: 3,\n      name: 'participant_count',\n      kind: 'message',\n      T: () => ParticipantCount\n    }, {\n      no: 4,\n      name: 'pins',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => Pin\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */\nconst CallState$1 = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.ParticipantCount', [{\n      no: 1,\n      name: 'total',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 2,\n      name: 'anonymous',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */\nconst ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.Pin', [{\n      no: 1,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */\nconst Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.Participant', [{\n      no: 1,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'published_tracks',\n      kind: 'enum',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 4,\n      name: 'joined_at',\n      kind: 'message',\n      T: () => Timestamp\n    }, {\n      no: 5,\n      name: 'track_lookup_prefix',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 6,\n      name: 'connection_quality',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.ConnectionQuality', ConnectionQuality, 'CONNECTION_QUALITY_']\n    }, {\n      no: 7,\n      name: 'is_speaking',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 8,\n      name: 'is_dominant_speaker',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 9,\n      name: 'audio_level',\n      kind: 'scalar',\n      T: 2 /*ScalarType.FLOAT*/\n    }, {\n      no: 10,\n      name: 'name',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 11,\n      name: 'image',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 12,\n      name: 'custom',\n      kind: 'message',\n      T: () => Struct\n    }, {\n      no: 13,\n      name: 'roles',\n      kind: 'scalar',\n      repeat: 2 /*RepeatType.UNPACKED*/,\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */\nconst Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.StreamQuality', [{\n      no: 1,\n      name: 'video_quality',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.VideoQuality', VideoQuality, 'VIDEO_QUALITY_']\n    }, {\n      no: 2,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */\nconst StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.VideoDimension', [{\n      no: 1,\n      name: 'width',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 2,\n      name: 'height',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */\nconst VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.VideoLayer', [{\n      no: 1,\n      name: 'rid',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'video_dimension',\n      kind: 'message',\n      T: () => VideoDimension\n    }, {\n      no: 4,\n      name: 'bitrate',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 5,\n      name: 'fps',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 6,\n      name: 'quality',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.VideoQuality', VideoQuality, 'VIDEO_QUALITY_']\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */\nconst VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeOption$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.SubscribeOption', [{\n      no: 1,\n      name: 'track_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 2,\n      name: 'codecs',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => Codec\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.SubscribeOption\n */\nconst SubscribeOption = new SubscribeOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublishOption$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.PublishOption', [{\n      no: 1,\n      name: 'track_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 2,\n      name: 'codec',\n      kind: 'message',\n      T: () => Codec\n    }, {\n      no: 3,\n      name: 'bitrate',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }, {\n      no: 4,\n      name: 'fps',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }, {\n      no: 5,\n      name: 'max_spatial_layers',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }, {\n      no: 6,\n      name: 'max_temporal_layers',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }, {\n      no: 7,\n      name: 'video_dimension',\n      kind: 'message',\n      T: () => VideoDimension\n    }, {\n      no: 8,\n      name: 'id',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.PublishOption\n */\nconst PublishOption = new PublishOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.Codec', [{\n      no: 16,\n      name: 'payload_type',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 10,\n      name: 'name',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 14,\n      name: 'clock_rate',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 15,\n      name: 'encoding_parameters',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 12,\n      name: 'fmtp',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */\nconst Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet ICETrickle$Type$1 = class ICETrickle$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.ICETrickle', [{\n      no: 1,\n      name: 'peer_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_']\n    }, {\n      no: 2,\n      name: 'ice_candidate',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */\nconst ICETrickle$1 = new ICETrickle$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.TrackInfo', [{\n      no: 1,\n      name: 'track_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'track_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 5,\n      name: 'layers',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => VideoLayer\n    }, {\n      no: 6,\n      name: 'mid',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 7,\n      name: 'dtx',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 8,\n      name: 'stereo',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 9,\n      name: 'red',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 10,\n      name: 'muted',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 11,\n      name: 'codec',\n      kind: 'message',\n      T: () => Codec\n    }, {\n      no: 12,\n      name: 'publish_option_id',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */\nconst TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet Error$Type$1 = class Error$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.Error', [{\n      no: 1,\n      name: 'code',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.ErrorCode', ErrorCode, 'ERROR_CODE_']\n    }, {\n      no: 2,\n      name: 'message',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'should_retry',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */\nconst Error$2 = new Error$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.ClientDetails', [{\n      no: 1,\n      name: 'sdk',\n      kind: 'message',\n      T: () => Sdk\n    }, {\n      no: 2,\n      name: 'os',\n      kind: 'message',\n      T: () => OS\n    }, {\n      no: 3,\n      name: 'browser',\n      kind: 'message',\n      T: () => Browser\n    }, {\n      no: 4,\n      name: 'device',\n      kind: 'message',\n      T: () => Device\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */\nconst ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.Sdk', [{\n      no: 1,\n      name: 'type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.SdkType', SdkType, 'SDK_TYPE_']\n    }, {\n      no: 2,\n      name: 'major',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'minor',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 4,\n      name: 'patch',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */\nconst Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.OS', [{\n      no: 1,\n      name: 'name',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'version',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'architecture',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */\nconst OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.Browser', [{\n      no: 1,\n      name: 'name',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'version',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */\nconst Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RTMPIngress$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.RTMPIngress', [{\n      no: 1,\n      name: 'width',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 2,\n      name: 'height',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 3,\n      name: 'frame_rate',\n      kind: 'scalar',\n      T: 1 /*ScalarType.DOUBLE*/\n    }, {\n      no: 4,\n      name: 'software',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 5,\n      name: 'version',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 6,\n      name: 'encoder',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 7,\n      name: 'remote_addr',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.RTMPIngress\n */\nconst RTMPIngress = new RTMPIngress$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.Device', [{\n      no: 1,\n      name: 'name',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'version',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */\nconst Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.Call', [{\n      no: 1,\n      name: 'type',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'created_by_user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 4,\n      name: 'host_user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 5,\n      name: 'custom',\n      kind: 'message',\n      T: () => Struct\n    }, {\n      no: 6,\n      name: 'created_at',\n      kind: 'message',\n      T: () => Timestamp\n    }, {\n      no: 7,\n      name: 'updated_at',\n      kind: 'message',\n      T: () => Timestamp\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */\nconst Call$1 = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.CallGrants', [{\n      no: 1,\n      name: 'can_publish_audio',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 2,\n      name: 'can_publish_video',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 3,\n      name: 'can_screenshare',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */\nconst CallGrants = new CallGrants$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InputDevices$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.InputDevices', [{\n      no: 1,\n      name: 'available_devices',\n      kind: 'scalar',\n      repeat: 2 /*RepeatType.UNPACKED*/,\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'current_device',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'is_permitted',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.InputDevices\n */\nconst InputDevices = new InputDevices$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AndroidState$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.AndroidState', [{\n      no: 1,\n      name: 'thermal_state',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.AndroidThermalState', AndroidThermalState, 'ANDROID_THERMAL_STATE_']\n    }, {\n      no: 2,\n      name: 'is_power_saver_mode',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.AndroidState\n */\nconst AndroidState = new AndroidState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AppleState$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.AppleState', [{\n      no: 1,\n      name: 'thermal_state',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.AppleThermalState', AppleThermalState, 'APPLE_THERMAL_STATE_']\n    }, {\n      no: 2,\n      name: 'is_low_power_mode_enabled',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.AppleState\n */\nconst AppleState = new AppleState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PerformanceStats$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.models.PerformanceStats', [{\n      no: 1,\n      name: 'track_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 2,\n      name: 'codec',\n      kind: 'message',\n      T: () => Codec\n    }, {\n      no: 3,\n      name: 'avg_frame_time_ms',\n      kind: 'scalar',\n      T: 2 /*ScalarType.FLOAT*/\n    }, {\n      no: 4,\n      name: 'avg_fps',\n      kind: 'scalar',\n      T: 2 /*ScalarType.FLOAT*/\n    }, {\n      no: 5,\n      name: 'video_dimension',\n      kind: 'message',\n      T: () => VideoDimension\n    }, {\n      no: 6,\n      name: 'target_bitrate',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.PerformanceStats\n */\nconst PerformanceStats = new PerformanceStats$Type();\nvar models = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AndroidState: AndroidState,\n  get AndroidThermalState() {\n    return AndroidThermalState;\n  },\n  AppleState: AppleState,\n  get AppleThermalState() {\n    return AppleThermalState;\n  },\n  Browser: Browser,\n  Call: Call$1,\n  get CallEndedReason() {\n    return CallEndedReason;\n  },\n  CallGrants: CallGrants,\n  CallState: CallState$1,\n  ClientDetails: ClientDetails,\n  Codec: Codec,\n  get ConnectionQuality() {\n    return ConnectionQuality;\n  },\n  Device: Device,\n  Error: Error$2,\n  get ErrorCode() {\n    return ErrorCode;\n  },\n  get GoAwayReason() {\n    return GoAwayReason;\n  },\n  ICETrickle: ICETrickle$1,\n  InputDevices: InputDevices,\n  OS: OS,\n  Participant: Participant,\n  ParticipantCount: ParticipantCount,\n  get PeerType() {\n    return PeerType;\n  },\n  PerformanceStats: PerformanceStats,\n  Pin: Pin,\n  PublishOption: PublishOption,\n  RTMPIngress: RTMPIngress,\n  Sdk: Sdk,\n  get SdkType() {\n    return SdkType;\n  },\n  StreamQuality: StreamQuality,\n  SubscribeOption: SubscribeOption,\n  TrackInfo: TrackInfo,\n  get TrackType() {\n    return TrackType;\n  },\n  get TrackUnpublishReason() {\n    return TrackUnpublishReason;\n  },\n  VideoDimension: VideoDimension,\n  VideoLayer: VideoLayer,\n  get VideoQuality() {\n    return VideoQuality;\n  },\n  get WebsocketReconnectStrategy() {\n    return WebsocketReconnectStrategy;\n  }\n});\n\n// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.StartNoiseCancellationRequest', [{\n      no: 1,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */\nconst StartNoiseCancellationRequest = new StartNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.StartNoiseCancellationResponse', [{\n      no: 1,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */\nconst StartNoiseCancellationResponse = new StartNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.StopNoiseCancellationRequest', [{\n      no: 1,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */\nconst StopNoiseCancellationRequest = new StopNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.StopNoiseCancellationResponse', [{\n      no: 1,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */\nconst StopNoiseCancellationResponse = new StopNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Reconnection$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.Reconnection', [{\n      no: 1,\n      name: 'time_seconds',\n      kind: 'scalar',\n      T: 2 /*ScalarType.FLOAT*/\n    }, {\n      no: 2,\n      name: 'strategy',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.WebsocketReconnectStrategy', WebsocketReconnectStrategy, 'WEBSOCKET_RECONNECT_STRATEGY_']\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.Reconnection\n */\nconst Reconnection = new Reconnection$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Telemetry$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.Telemetry', [{\n      no: 1,\n      name: 'connection_time_seconds',\n      kind: 'scalar',\n      oneof: 'data',\n      T: 2 /*ScalarType.FLOAT*/\n    }, {\n      no: 2,\n      name: 'reconnection',\n      kind: 'message',\n      oneof: 'data',\n      T: () => Reconnection\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.Telemetry\n */\nconst Telemetry = new Telemetry$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.SendStatsRequest', [{\n      no: 1,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'subscriber_stats',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'publisher_stats',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 4,\n      name: 'webrtc_version',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 5,\n      name: 'sdk',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 6,\n      name: 'sdk_version',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 7,\n      name: 'audio_devices',\n      kind: 'message',\n      T: () => InputDevices\n    }, {\n      no: 8,\n      name: 'video_devices',\n      kind: 'message',\n      T: () => InputDevices\n    }, {\n      no: 9,\n      name: 'android',\n      kind: 'message',\n      oneof: 'deviceState',\n      T: () => AndroidState\n    }, {\n      no: 10,\n      name: 'apple',\n      kind: 'message',\n      oneof: 'deviceState',\n      T: () => AppleState\n    }, {\n      no: 11,\n      name: 'telemetry',\n      kind: 'message',\n      T: () => Telemetry\n    }, {\n      no: 12,\n      name: 'rtmp',\n      kind: 'message',\n      T: () => RTMPIngress\n    }, {\n      no: 13,\n      name: 'subscriber_rtc_stats',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 14,\n      name: 'publisher_rtc_stats',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 15,\n      name: 'rtc_stats',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 16,\n      name: 'encode_stats',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => PerformanceStats\n    }, {\n      no: 17,\n      name: 'decode_stats',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => PerformanceStats\n    }, {\n      no: 18,\n      name: 'unified_session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */\nconst SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.SendStatsResponse', [{\n      no: 1,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */\nconst SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.ICERestartRequest', [{\n      no: 1,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'peer_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_']\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */\nconst ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.ICERestartResponse', [{\n      no: 1,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */\nconst ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateMuteStatesRequest', [{\n      no: 1,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'mute_states',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => TrackMuteState\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */\nconst UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateMuteStatesResponse', [{\n      no: 4,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */\nconst UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.TrackMuteState', [{\n      no: 1,\n      name: 'track_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 2,\n      name: 'muted',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */\nconst TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.AudioMuteChanged', [{\n      no: 1,\n      name: 'muted',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */\nnew AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.VideoMuteChanged', [{\n      no: 2,\n      name: 'muted',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */\nnew VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateSubscriptionsRequest', [{\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'tracks',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => TrackSubscriptionDetails\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */\nconst UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateSubscriptionsResponse', [{\n      no: 4,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */\nconst UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.TrackSubscriptionDetails', [{\n      no: 1,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'track_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 4,\n      name: 'dimension',\n      kind: 'message',\n      T: () => VideoDimension\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */\nconst TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.SendAnswerRequest', [{\n      no: 1,\n      name: 'peer_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_']\n    }, {\n      no: 2,\n      name: 'sdp',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */\nconst SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.SendAnswerResponse', [{\n      no: 4,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */\nconst SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.ICETrickleResponse', [{\n      no: 4,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */\nconst ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.SetPublisherRequest', [{\n      no: 1,\n      name: 'sdp',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'tracks',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => TrackInfo\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */\nconst SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.signal.SetPublisherResponse', [{\n      no: 1,\n      name: 'sdp',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'ice_restart',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 4,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */\nconst SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */\nconst SignalServer = new ServiceType('stream.video.sfu.signal.SignalServer', [{\n  name: 'SetPublisher',\n  options: {},\n  I: SetPublisherRequest,\n  O: SetPublisherResponse\n}, {\n  name: 'SendAnswer',\n  options: {},\n  I: SendAnswerRequest,\n  O: SendAnswerResponse\n}, {\n  name: 'IceTrickle',\n  options: {},\n  I: ICETrickle$1,\n  O: ICETrickleResponse\n}, {\n  name: 'UpdateSubscriptions',\n  options: {},\n  I: UpdateSubscriptionsRequest,\n  O: UpdateSubscriptionsResponse\n}, {\n  name: 'UpdateMuteStates',\n  options: {},\n  I: UpdateMuteStatesRequest,\n  O: UpdateMuteStatesResponse\n}, {\n  name: 'IceRestart',\n  options: {},\n  I: ICERestartRequest,\n  O: ICERestartResponse\n}, {\n  name: 'SendStats',\n  options: {},\n  I: SendStatsRequest,\n  O: SendStatsResponse\n}, {\n  name: 'StartNoiseCancellation',\n  options: {},\n  I: StartNoiseCancellationRequest,\n  O: StartNoiseCancellationResponse\n}, {\n  name: 'StopNoiseCancellation',\n  options: {},\n  I: StopNoiseCancellationRequest,\n  O: StopNoiseCancellationResponse\n}]);\n\n// @generated by protobuf-ts 2.9.6 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/event/events.proto\" (package \"stream.video.sfu.event\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.SfuEvent', [{\n      no: 1,\n      name: 'subscriber_offer',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => SubscriberOffer\n    }, {\n      no: 2,\n      name: 'publisher_answer',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => PublisherAnswer\n    }, {\n      no: 3,\n      name: 'connection_quality_changed',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ConnectionQualityChanged\n    }, {\n      no: 4,\n      name: 'audio_level_changed',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => AudioLevelChanged\n    }, {\n      no: 5,\n      name: 'ice_trickle',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ICETrickle$1\n    }, {\n      no: 6,\n      name: 'change_publish_quality',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ChangePublishQuality\n    }, {\n      no: 10,\n      name: 'participant_joined',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ParticipantJoined\n    }, {\n      no: 11,\n      name: 'participant_left',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ParticipantLeft\n    }, {\n      no: 12,\n      name: 'dominant_speaker_changed',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => DominantSpeakerChanged\n    }, {\n      no: 13,\n      name: 'join_response',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => JoinResponse\n    }, {\n      no: 14,\n      name: 'health_check_response',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => HealthCheckResponse\n    }, {\n      no: 16,\n      name: 'track_published',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => TrackPublished\n    }, {\n      no: 17,\n      name: 'track_unpublished',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => TrackUnpublished\n    }, {\n      no: 18,\n      name: 'error',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => Error$1\n    }, {\n      no: 19,\n      name: 'call_grants_updated',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => CallGrantsUpdated\n    }, {\n      no: 20,\n      name: 'go_away',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => GoAway\n    }, {\n      no: 21,\n      name: 'ice_restart',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ICERestart\n    }, {\n      no: 22,\n      name: 'pins_updated',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => PinsChanged\n    }, {\n      no: 23,\n      name: 'call_ended',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => CallEnded\n    }, {\n      no: 24,\n      name: 'participant_updated',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ParticipantUpdated\n    }, {\n      no: 25,\n      name: 'participant_migration_complete',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ParticipantMigrationComplete\n    }, {\n      no: 27,\n      name: 'change_publish_options',\n      kind: 'message',\n      oneof: 'eventPayload',\n      T: () => ChangePublishOptions\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */\nconst SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishOptions$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ChangePublishOptions', [{\n      no: 1,\n      name: 'publish_options',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => PublishOption\n    }, {\n      no: 2,\n      name: 'reason',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishOptions\n */\nconst ChangePublishOptions = new ChangePublishOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishOptionsComplete$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ChangePublishOptionsComplete', []);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishOptionsComplete\n */\nconst ChangePublishOptionsComplete = new ChangePublishOptionsComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantMigrationComplete$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantMigrationComplete', []);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantMigrationComplete\n */\nconst ParticipantMigrationComplete = new ParticipantMigrationComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.PinsChanged', [{\n      no: 1,\n      name: 'pins',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => Pin\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */\nconst PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.Error', [{\n      no: 4,\n      name: 'error',\n      kind: 'message',\n      T: () => Error$2\n    }, {\n      no: 5,\n      name: 'reconnect_strategy',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.WebsocketReconnectStrategy', WebsocketReconnectStrategy, 'WEBSOCKET_RECONNECT_STRATEGY_']\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */\nconst Error$1 = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ICETrickle', [{\n      no: 1,\n      name: 'peer_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_']\n    }, {\n      no: 2,\n      name: 'ice_candidate',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */\nconst ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ICERestart', [{\n      no: 1,\n      name: 'peer_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_']\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */\nconst ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.SfuRequest', [{\n      no: 1,\n      name: 'join_request',\n      kind: 'message',\n      oneof: 'requestPayload',\n      T: () => JoinRequest\n    }, {\n      no: 2,\n      name: 'health_check_request',\n      kind: 'message',\n      oneof: 'requestPayload',\n      T: () => HealthCheckRequest\n    }, {\n      no: 3,\n      name: 'leave_call_request',\n      kind: 'message',\n      oneof: 'requestPayload',\n      T: () => LeaveCallRequest\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */\nconst SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass LeaveCallRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.LeaveCallRequest', [{\n      no: 1,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'reason',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.LeaveCallRequest\n */\nconst LeaveCallRequest = new LeaveCallRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.HealthCheckRequest', []);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */\nconst HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.HealthCheckResponse', [{\n      no: 1,\n      name: 'participant_count',\n      kind: 'message',\n      T: () => ParticipantCount\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */\nconst HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.TrackPublished', [{\n      no: 1,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 4,\n      name: 'participant',\n      kind: 'message',\n      T: () => Participant\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */\nconst TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.TrackUnpublished', [{\n      no: 1,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 4,\n      name: 'cause',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackUnpublishReason', TrackUnpublishReason, 'TRACK_UNPUBLISH_REASON_']\n    }, {\n      no: 5,\n      name: 'participant',\n      kind: 'message',\n      T: () => Participant\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */\nconst TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.JoinRequest', [{\n      no: 1,\n      name: 'token',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'subscriber_sdp',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 8,\n      name: 'publisher_sdp',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 4,\n      name: 'client_details',\n      kind: 'message',\n      T: () => ClientDetails\n    }, {\n      no: 5,\n      name: 'migration',\n      kind: 'message',\n      T: () => Migration\n    }, {\n      no: 6,\n      name: 'fast_reconnect',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 7,\n      name: 'reconnect_details',\n      kind: 'message',\n      T: () => ReconnectDetails\n    }, {\n      no: 9,\n      name: 'preferred_publish_options',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => PublishOption\n    }, {\n      no: 10,\n      name: 'preferred_subscribe_options',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => SubscribeOption\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */\nconst JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReconnectDetails$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ReconnectDetails', [{\n      no: 1,\n      name: 'strategy',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.WebsocketReconnectStrategy', WebsocketReconnectStrategy, 'WEBSOCKET_RECONNECT_STRATEGY_']\n    }, {\n      no: 3,\n      name: 'announced_tracks',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => TrackInfo\n    }, {\n      no: 4,\n      name: 'subscriptions',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => TrackSubscriptionDetails\n    }, {\n      no: 5,\n      name: 'reconnect_attempt',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 6,\n      name: 'from_sfu_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 7,\n      name: 'previous_session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 8,\n      name: 'reason',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ReconnectDetails\n */\nconst ReconnectDetails = new ReconnectDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.Migration', [{\n      no: 1,\n      name: 'from_sfu_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'announced_tracks',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => TrackInfo\n    }, {\n      no: 3,\n      name: 'subscriptions',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => TrackSubscriptionDetails\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */\nconst Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.JoinResponse', [{\n      no: 1,\n      name: 'call_state',\n      kind: 'message',\n      T: () => CallState$1\n    }, {\n      no: 2,\n      name: 'reconnected',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 3,\n      name: 'fast_reconnect_deadline_seconds',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }, {\n      no: 4,\n      name: 'publish_options',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => PublishOption\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */\nconst JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantJoined', [{\n      no: 1,\n      name: 'call_cid',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'participant',\n      kind: 'message',\n      T: () => Participant\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */\nconst ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantLeft', [{\n      no: 1,\n      name: 'call_cid',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'participant',\n      kind: 'message',\n      T: () => Participant\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */\nconst ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantUpdated$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantUpdated', [{\n      no: 1,\n      name: 'call_cid',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'participant',\n      kind: 'message',\n      T: () => Participant\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantUpdated\n */\nconst ParticipantUpdated = new ParticipantUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.SubscriberOffer', [{\n      no: 1,\n      name: 'ice_restart',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 2,\n      name: 'sdp',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */\nconst SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.PublisherAnswer', [{\n      no: 1,\n      name: 'sdp',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */\nconst PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ConnectionQualityChanged', [{\n      no: 1,\n      name: 'connection_quality_updates',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => ConnectionQualityInfo\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */\nconst ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ConnectionQualityInfo', [{\n      no: 1,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'connection_quality',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.ConnectionQuality', ConnectionQuality, 'CONNECTION_QUALITY_']\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */\nconst ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.DominantSpeakerChanged', [{\n      no: 1,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */\nconst DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.AudioLevel', [{\n      no: 1,\n      name: 'user_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'session_id',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 3,\n      name: 'level',\n      kind: 'scalar',\n      T: 2 /*ScalarType.FLOAT*/\n    }, {\n      no: 4,\n      name: 'is_speaking',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */\nconst AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.AudioLevelChanged', [{\n      no: 1,\n      name: 'audio_levels',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => AudioLevel\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */\nconst AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.AudioSender', [{\n      no: 2,\n      name: 'codec',\n      kind: 'message',\n      T: () => Codec\n    }, {\n      no: 3,\n      name: 'track_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 4,\n      name: 'publish_option_id',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */\nconst AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.VideoLayerSetting', [{\n      no: 1,\n      name: 'name',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }, {\n      no: 2,\n      name: 'active',\n      kind: 'scalar',\n      T: 8 /*ScalarType.BOOL*/\n    }, {\n      no: 3,\n      name: 'max_bitrate',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }, {\n      no: 4,\n      name: 'scale_resolution_down_by',\n      kind: 'scalar',\n      T: 2 /*ScalarType.FLOAT*/\n    }, {\n      no: 6,\n      name: 'codec',\n      kind: 'message',\n      T: () => Codec\n    }, {\n      no: 7,\n      name: 'max_framerate',\n      kind: 'scalar',\n      T: 13 /*ScalarType.UINT32*/\n    }, {\n      no: 8,\n      name: 'scalability_mode',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */\nconst VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.VideoSender', [{\n      no: 2,\n      name: 'codec',\n      kind: 'message',\n      T: () => Codec\n    }, {\n      no: 3,\n      name: 'layers',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => VideoLayerSetting\n    }, {\n      no: 4,\n      name: 'track_type',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.TrackType', TrackType, 'TRACK_TYPE_']\n    }, {\n      no: 5,\n      name: 'publish_option_id',\n      kind: 'scalar',\n      T: 5 /*ScalarType.INT32*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */\nconst VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.ChangePublishQuality', [{\n      no: 1,\n      name: 'audio_senders',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => AudioSender\n    }, {\n      no: 2,\n      name: 'video_senders',\n      kind: 'message',\n      repeat: 1 /*RepeatType.PACKED*/,\n      T: () => VideoSender\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */\nconst ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.CallGrantsUpdated', [{\n      no: 1,\n      name: 'current_grants',\n      kind: 'message',\n      T: () => CallGrants\n    }, {\n      no: 2,\n      name: 'message',\n      kind: 'scalar',\n      T: 9 /*ScalarType.STRING*/\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */\nconst CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.GoAway', [{\n      no: 1,\n      name: 'reason',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.GoAwayReason', GoAwayReason, 'GO_AWAY_REASON_']\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */\nconst GoAway = new GoAway$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallEnded$Type extends MessageType {\n  constructor() {\n    super('stream.video.sfu.event.CallEnded', [{\n      no: 1,\n      name: 'reason',\n      kind: 'enum',\n      T: () => ['stream.video.sfu.models.CallEndedReason', CallEndedReason, 'CALL_ENDED_REASON_']\n    }]);\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallEnded\n */\nconst CallEnded = new CallEnded$Type();\nvar events = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AudioLevel: AudioLevel,\n  AudioLevelChanged: AudioLevelChanged,\n  AudioSender: AudioSender,\n  CallEnded: CallEnded,\n  CallGrantsUpdated: CallGrantsUpdated,\n  ChangePublishOptions: ChangePublishOptions,\n  ChangePublishOptionsComplete: ChangePublishOptionsComplete,\n  ChangePublishQuality: ChangePublishQuality,\n  ConnectionQualityChanged: ConnectionQualityChanged,\n  ConnectionQualityInfo: ConnectionQualityInfo,\n  DominantSpeakerChanged: DominantSpeakerChanged,\n  Error: Error$1,\n  GoAway: GoAway,\n  HealthCheckRequest: HealthCheckRequest,\n  HealthCheckResponse: HealthCheckResponse,\n  ICERestart: ICERestart,\n  ICETrickle: ICETrickle,\n  JoinRequest: JoinRequest,\n  JoinResponse: JoinResponse,\n  LeaveCallRequest: LeaveCallRequest,\n  Migration: Migration,\n  ParticipantJoined: ParticipantJoined,\n  ParticipantLeft: ParticipantLeft,\n  ParticipantMigrationComplete: ParticipantMigrationComplete,\n  ParticipantUpdated: ParticipantUpdated,\n  PinsChanged: PinsChanged,\n  PublisherAnswer: PublisherAnswer,\n  ReconnectDetails: ReconnectDetails,\n  SfuEvent: SfuEvent,\n  SfuRequest: SfuRequest,\n  SubscriberOffer: SubscriberOffer,\n  TrackPublished: TrackPublished,\n  TrackUnpublished: TrackUnpublished,\n  VideoLayerSetting: VideoLayerSetting,\n  VideoSender: VideoSender\n});\nvar VisibilityState;\n(function (VisibilityState) {\n  VisibilityState[\"UNKNOWN\"] = \"UNKNOWN\";\n  VisibilityState[\"VISIBLE\"] = \"VISIBLE\";\n  VisibilityState[\"INVISIBLE\"] = \"INVISIBLE\";\n})(VisibilityState || (VisibilityState = {}));\nvar DebounceType;\n(function (DebounceType) {\n  DebounceType[DebounceType[\"IMMEDIATE\"] = 20] = \"IMMEDIATE\";\n  DebounceType[DebounceType[\"FAST\"] = 100] = \"FAST\";\n  DebounceType[DebounceType[\"MEDIUM\"] = 600] = \"MEDIUM\";\n  DebounceType[DebounceType[\"SLOW\"] = 1200] = \"SLOW\";\n})(DebounceType || (DebounceType = {}));\n\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */\nclass SignalServerClient {\n  constructor(_transport) {\n    this._transport = _transport;\n    this.typeName = SignalServer.typeName;\n    this.methods = SignalServer.methods;\n    this.options = SignalServer.options;\n  }\n  /**\n   * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n   *\n   * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n   */\n  setPublisher(input, options) {\n    const method = this.methods[0],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n  /**\n   * answer is sent by the client to the SFU after receiving a subscriber_offer.\n   *\n   * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n   */\n  sendAnswer(input, options) {\n    const method = this.methods[1],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n  /**\n   * SendICECandidate sends an ICE candidate to the client\n   *\n   * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n   */\n  iceTrickle(input, options) {\n    const method = this.methods[2],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n  /**\n   * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n   * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n   *\n   * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n   */\n  updateSubscriptions(input, options) {\n    const method = this.methods[3],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n   */\n  updateMuteStates(input, options) {\n    const method = this.methods[4],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n   */\n  iceRestart(input, options) {\n    const method = this.methods[5],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n   */\n  sendStats(input, options) {\n    const method = this.methods[6],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n   */\n  startNoiseCancellation(input, options) {\n    const method = this.methods[7],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n   */\n  stopNoiseCancellation(input, options) {\n    const method = this.methods[8],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept('unary', this._transport, method, opt, input);\n  }\n}\nconst defaultOptions = {\n  baseUrl: '',\n  sendJson: true,\n  timeout: 5 * 1000,\n  // ms.\n  jsonOptions: {\n    ignoreUnknownFields: true\n  }\n};\nconst withHeaders = headers => {\n  return {\n    interceptUnary(next, method, input, options) {\n      options.meta = {\n        ...options.meta,\n        ...headers\n      };\n      return next(method, input, options);\n    }\n  };\n};\nconst withRequestLogger = (logger, level) => {\n  return {\n    interceptUnary: (next, method, input, options) => {\n      let invocation;\n      try {\n        invocation = next(method, input, options);\n      } finally {\n        logger(level, `Invoked SFU RPC method ${method.name}`, {\n          request: invocation?.request,\n          headers: invocation?.requestHeaders,\n          response: invocation?.response\n        });\n      }\n      return invocation;\n    }\n  };\n};\nconst withRequestTracer = trace => {\n  const exclusions = {\n    SendStats: true\n  };\n  return {\n    interceptUnary(next, method, input, options) {\n      if (exclusions[method.name]) {\n        return next(method, input, options);\n      }\n      try {\n        trace(method.name, input);\n        return next(method, input, options);\n      } catch (err) {\n        trace(`${method.name}OnFailure`, [input, err]);\n        throw err;\n      }\n    }\n  };\n};\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */\nconst createSignalClient = options => {\n  const transport = new TwirpFetchTransport({\n    ...defaultOptions,\n    ...options\n  });\n  return new SignalServerClient(transport);\n};\nconst sleep = m => new Promise(r => setTimeout(r, m));\nfunction isFunction(value) {\n  return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);\n}\n/**\n * A map of known error codes.\n */\nconst KnownCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000\n};\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nfunction retryInterval(numberOfFailures) {\n  // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 5000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\nfunction hex(bytes) {\n  let s = '';\n  for (let i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, '0');\n  }\n  return s;\n}\n// https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n  const bytes = getRandomBytes(16);\n  bytes[6] = bytes[6] & 0x0f | 0x40; // version\n  bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n  return [hex(bytes.subarray(0, 4)), hex(bytes.subarray(4, 6)), hex(bytes.subarray(6, 8)), hex(bytes.subarray(8, 10)), hex(bytes.subarray(10, 16))].join('-');\n}\nconst getRandomValues = (() => {\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    return crypto.getRandomValues.bind(crypto);\n  }\n  return function getRandomValuesWithMathRandom(bytes) {\n    const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      bytes[i] = Math.random() * max;\n    }\n  };\n})();\nfunction getRandomBytes(length) {\n  const bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */\nfunction addConnectionEventListeners(cb) {\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('offline', cb);\n    window.addEventListener('online', cb);\n  }\n}\nfunction removeConnectionEventListeners(cb) {\n  if (typeof window !== 'undefined' && window.removeEventListener) {\n    window.removeEventListener('offline', cb);\n    window.removeEventListener('online', cb);\n  }\n}\nfunction isErrorResponse(res) {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\n// Type guards to check WebSocket error type\nfunction isCloseEvent(res) {\n  return res.code !== undefined;\n}\n\n/**\n * Checks whether we are using React Native\n */\nconst isReactNative = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.product?.toLowerCase() === 'reactnative';\n};\n\n// log levels, sorted by verbosity\nconst logLevels = Object.freeze({\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 3,\n  error: 4\n});\nlet logger;\nlet level = 'info';\nconst logToConsole = (logLevel, message, ...args) => {\n  let logMethod;\n  switch (logLevel) {\n    case 'error':\n      if (isReactNative()) {\n        message = `ERROR: ${message}`;\n        logMethod = console.info;\n        break;\n      }\n      logMethod = console.error;\n      break;\n    case 'warn':\n      if (isReactNative()) {\n        message = `WARN: ${message}`;\n        logMethod = console.info;\n        break;\n      }\n      logMethod = console.warn;\n      break;\n    case 'info':\n      logMethod = console.info;\n      break;\n    case 'trace':\n      logMethod = console.trace;\n      break;\n    default:\n      logMethod = console.log;\n      break;\n  }\n  logMethod(message, ...args);\n};\nconst setLogger = (l, lvl) => {\n  logger = l;\n  if (lvl) {\n    setLogLevel(lvl);\n  }\n};\nconst setLogLevel = l => {\n  level = l;\n};\nconst getLogLevel = () => level;\nconst getLogger = withTags => {\n  const loggerMethod = logger || logToConsole;\n  const tags = (withTags || []).filter(Boolean).join(':');\n  const result = (logLevel, message, ...args) => {\n    if (logLevels[logLevel] >= logLevels[level]) {\n      loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n    }\n  };\n  return result;\n};\n\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * For each retry, there would be a delay to avoid request bursts toward the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param signal the signal to abort the RPC call and retries loop.\n */\nconst retryable = async (rpc, signal) => {\n  let attempt = 0;\n  let result = undefined;\n  do {\n    if (attempt > 0) await sleep(retryInterval(attempt));\n    try {\n      result = await rpc();\n    } catch (err) {\n      const isRequestCancelled = err instanceof RpcError && err.code === TwirpErrorCode[TwirpErrorCode.cancelled];\n      const isAborted = signal?.aborted ?? false;\n      if (isRequestCancelled || isAborted) throw err;\n      getLogger(['sfu-client', 'rpc'])('debug', `rpc failed (${attempt})`, err);\n      attempt++;\n    }\n  } while (!result || result.response.error?.shouldRetry);\n  return result;\n};\n\n/**\n * Returns a generic SDP for the given direction.\n * We use this SDP to send it as part of our JoinRequest so that the SFU\n * can use it to determine the client's codec capabilities.\n *\n * @param direction the direction of the transceiver.\n */\nconst getGenericSdp = async direction => {\n  const tempPc = new RTCPeerConnection();\n  tempPc.addTransceiver('video', {\n    direction\n  });\n  tempPc.addTransceiver('audio', {\n    direction\n  });\n  const offer = await tempPc.createOffer();\n  const sdp = offer.sdp ?? '';\n  tempPc.getTransceivers().forEach(t => {\n    t.stop?.();\n  });\n  tempPc.close();\n  return sdp;\n};\n/**\n * Returns whether the codec is an SVC codec.\n *\n * @param codecOrMimeType the codec to check.\n */\nconst isSvcCodec = codecOrMimeType => {\n  if (!codecOrMimeType) return false;\n  codecOrMimeType = codecOrMimeType.toLowerCase();\n  return codecOrMimeType === 'vp9' || codecOrMimeType === 'av1' || codecOrMimeType === 'video/vp9' || codecOrMimeType === 'video/av1';\n};\nconst sfuEventKinds = {\n  subscriberOffer: undefined,\n  publisherAnswer: undefined,\n  connectionQualityChanged: undefined,\n  audioLevelChanged: undefined,\n  iceTrickle: undefined,\n  changePublishQuality: undefined,\n  participantJoined: undefined,\n  participantLeft: undefined,\n  dominantSpeakerChanged: undefined,\n  joinResponse: undefined,\n  healthCheckResponse: undefined,\n  trackPublished: undefined,\n  trackUnpublished: undefined,\n  error: undefined,\n  callGrantsUpdated: undefined,\n  goAway: undefined,\n  iceRestart: undefined,\n  pinsUpdated: undefined,\n  callEnded: undefined,\n  participantUpdated: undefined,\n  participantMigrationComplete: undefined,\n  changePublishOptions: undefined\n};\nconst isSfuEvent = eventName => {\n  return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\nclass Dispatcher {\n  constructor() {\n    this.logger = getLogger(['Dispatcher']);\n    this.subscribers = {};\n    this.dispatch = (message, logTag = '0') => {\n      const eventKind = message.eventPayload.oneofKind;\n      if (!eventKind) return;\n      const payload = message.eventPayload[eventKind];\n      this.logger('debug', `Dispatching ${eventKind}, tag=${logTag}`, payload);\n      const listeners = this.subscribers[eventKind];\n      if (!listeners) return;\n      for (const fn of listeners) {\n        try {\n          fn(payload);\n        } catch (e) {\n          this.logger('warn', 'Listener failed with error', e);\n        }\n      }\n    };\n    this.on = (eventName, fn) => {\n      var _a;\n      ((_a = this.subscribers)[eventName] ?? (_a[eventName] = [])).push(fn);\n      return () => {\n        this.off(eventName, fn);\n      };\n    };\n    this.off = (eventName, fn) => {\n      this.subscribers[eventName] = (this.subscribers[eventName] || []).filter(f => f !== fn);\n    };\n  }\n}\n\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */\nclass IceTrickleBuffer {\n  constructor() {\n    this.subscriberCandidates = new ReplaySubject();\n    this.publisherCandidates = new ReplaySubject();\n    this.push = iceTrickle => {\n      const iceCandidate = toIceCandidate(iceTrickle);\n      if (!iceCandidate) return;\n      if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n        this.subscriberCandidates.next(iceCandidate);\n      } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n        this.publisherCandidates.next(iceCandidate);\n      } else {\n        const logger = getLogger(['sfu-client']);\n        logger('warn', `ICETrickle, Unknown peer type`, iceTrickle);\n      }\n    };\n    this.dispose = () => {\n      this.subscriberCandidates.complete();\n      this.publisherCandidates.complete();\n    };\n  }\n}\nconst toIceCandidate = iceTrickle => {\n  try {\n    return JSON.parse(iceTrickle.iceCandidate);\n  } catch (e) {\n    const logger = getLogger(['sfu-client']);\n    logger('error', `Failed to parse ICE Trickle`, e, iceTrickle);\n    return undefined;\n  }\n};\n\n/**\n * Runs async functions serially. Useful for wrapping async actions that\n * should never run simultaneously: if marked with the same tag, functions\n * will run one after another.\n *\n * @param tag Async functions with the same tag will run serially. Async functions\n * with different tags can run in parallel.\n * @param cb Async function to run.\n * @returns Promise that resolves when async functions returns.\n */\nconst withoutConcurrency = createRunner(wrapWithContinuationTracking);\n/**\n * Runs async functions serially, and cancels all other actions with the same tag\n * when a new action is scheduled. Useful for wrapping async actions that override\n * each other (e.g. enabling and disabling camera).\n *\n * If an async function hasn't started yet and was canceled, it will never run.\n * If an async function is already running and was canceled, it will be notified\n * via an abort signal passed as an argument.\n *\n * @param tag Async functions with the same tag will run serially and are canceled\n * when a new action with the same tag is scheduled.\n * @param cb Async function to run. Receives AbortSignal as the only argument.\n * @returns Promise that resolves when async functions returns. If the function didn't\n * start and was canceled, will resolve with 'canceled'. If the function started to run,\n * it's up to the function to decide how to react to cancelation.\n */\nconst withCancellation = createRunner(wrapWithCancellation);\nconst pendingPromises = new Map();\nfunction hasPending(tag) {\n  return pendingPromises.has(tag);\n}\nasync function settled(tag) {\n  let pending;\n  while (pending = pendingPromises.get(tag)) {\n    await pending.promise;\n  }\n}\n/**\n * Implements common functionality of running async functions serially, by chaining\n * their promises one after another.\n *\n * Before running, async function is \"wrapped\" using the provided wrapper. This wrapper\n * can add additional steps to run before or after the function.\n *\n * When async function is scheduled to run, the previous function is notified\n * by calling the associated onContinued callback. This behavior of this callback\n * is defined by the wrapper.\n */\nfunction createRunner(wrapper) {\n  return function run(tag, cb) {\n    const {\n      cb: wrapped,\n      onContinued\n    } = wrapper(tag, cb);\n    const pending = pendingPromises.get(tag);\n    pending?.onContinued();\n    const promise = pending ? pending.promise.then(wrapped, wrapped) : wrapped();\n    pendingPromises.set(tag, {\n      promise,\n      onContinued\n    });\n    return promise;\n  };\n}\n/**\n * Wraps an async function with an additional step run after the function:\n * if the function is the last in the queue, it cleans up the whole chain\n * of promises after finishing.\n */\nfunction wrapWithContinuationTracking(tag, cb) {\n  let hasContinuation = false;\n  const wrapped = () => cb().finally(() => {\n    if (!hasContinuation) {\n      pendingPromises.delete(tag);\n    }\n  });\n  const onContinued = () => hasContinuation = true;\n  return {\n    cb: wrapped,\n    onContinued\n  };\n}\n/**\n * Wraps an async function with additional functionalilty:\n * 1. Associates an abort signal with every function, that is passed to it\n *    as an argument. When a new function is scheduled to run after the current\n *    one, current signal is aborted.\n * 2. If current function didn't start and was aborted, in will never start.\n * 3. If the function is the last in the queue, it cleans up the whole chain\n *    of promises after finishing.\n */\nfunction wrapWithCancellation(tag, cb) {\n  const ac = new AbortController();\n  const wrapped = () => {\n    if (ac.signal.aborted) {\n      return Promise.resolve('canceled');\n    }\n    return cb(ac.signal).finally(() => {\n      if (!ac.signal.aborted) {\n        pendingPromises.delete(tag);\n      }\n    });\n  };\n  const onContinued = () => ac.abort();\n  return {\n    cb: wrapped,\n    onContinued\n  };\n}\n\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */\nconst isFunctionPatch = update => typeof update === 'function';\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */\nconst getCurrentValue = observable$ => {\n  let value;\n  let err = undefined;\n  combineLatest([observable$]).subscribe({\n    next: ([v]) => {\n      value = v;\n    },\n    error: e => {\n      err = e;\n    }\n  }).unsubscribe();\n  if (err) throw err;\n  return value;\n};\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */\nconst setCurrentValue = (subject, update) => {\n  const next = isFunctionPatch(update) ? update(getCurrentValue(subject)) : update;\n  subject.next(next);\n  return next;\n};\n/**\n * Updates the value of the provided Subject and returns the previous value\n * and a function to roll back the update.\n * This is useful when you want to optimistically update a value\n * and roll back the update if an error occurs.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n */\nconst updateValue = (subject, update) => {\n  const lastValue = subject.getValue();\n  const value = setCurrentValue(subject, update);\n  return {\n    lastValue,\n    value,\n    rollback: () => setCurrentValue(subject, lastValue)\n  };\n};\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n * @param onError an optional error handler.\n */\nconst createSubscription = (observable, handler, onError = error => getLogger(['RxUtils'])('warn', 'An observable emitted an error', error)) => {\n  const subscription = observable.subscribe({\n    next: handler,\n    error: onError\n  });\n  return () => {\n    subscription.unsubscribe();\n  };\n};\n/**\n * Creates a subscription and returns a function to unsubscribe. Makes sure that\n * only one async handler runs at the same time. If updates come in quicker than\n * it takes for the current handler to finish, other handlers will wait.\n *\n * @param observable the observable to subscribe to.\n * @param handler the async handler to call when the observable emits a value.\n */\nconst createSafeAsyncSubscription = (observable, handler) => {\n  const tag = Symbol();\n  return createSubscription(observable, value => {\n    withoutConcurrency(tag, () => handler(value));\n  });\n};\nvar rxUtils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createSafeAsyncSubscription: createSafeAsyncSubscription,\n  createSubscription: createSubscription,\n  getCurrentValue: getCurrentValue,\n  setCurrentValue: setCurrentValue,\n  updateValue: updateValue\n});\n\n/**\n * Represents the state of the current call.\n */\nvar CallingState;\n(function (CallingState) {\n  /**\n   * The call is in an unknown state.\n   */\n  CallingState[\"UNKNOWN\"] = \"unknown\";\n  /**\n   * The call is in an idle state.\n   */\n  CallingState[\"IDLE\"] = \"idle\";\n  /**\n   * The call is in the process of ringing.\n   * (User hasn't accepted nor rejected the call yet.)\n   */\n  CallingState[\"RINGING\"] = \"ringing\";\n  /**\n   * The call is in the process of joining.\n   */\n  CallingState[\"JOINING\"] = \"joining\";\n  /**\n   * The call is currently active.\n   */\n  CallingState[\"JOINED\"] = \"joined\";\n  /**\n   * The call has been left.\n   */\n  CallingState[\"LEFT\"] = \"left\";\n  /**\n   * The call is in the process of reconnecting.\n   */\n  CallingState[\"RECONNECTING\"] = \"reconnecting\";\n  /**\n   * The call is in the process of migrating from one node to another.\n   */\n  CallingState[\"MIGRATING\"] = \"migrating\";\n  /**\n   * The call has failed to reconnect.\n   */\n  CallingState[\"RECONNECTING_FAILED\"] = \"reconnecting-failed\";\n  /**\n   * The call is in offline mode.\n   */\n  CallingState[\"OFFLINE\"] = \"offline\";\n})(CallingState || (CallingState = {}));\nclass StreamVideoWriteableStateStore {\n  constructor() {\n    /**\n     * A store keeping data of a successfully connected user over WS to the coordinator server.\n     */\n    this.connectedUserSubject = new BehaviorSubject(undefined);\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */\n    this.callsSubject = new BehaviorSubject([]);\n    /**\n     * Sets the currently connected user.\n     *\n     * @internal\n     * @param user the user to set as connected.\n     */\n    this.setConnectedUser = user => {\n      return setCurrentValue(this.connectedUserSubject, user);\n    };\n    /**\n     * Sets the list of {@link Call} objects created/tracked by this client.\n     * @param calls\n     */\n    this.setCalls = calls => {\n      return setCurrentValue(this.callsSubject, calls);\n    };\n    /**\n     * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n     *\n     * @param call the call to add.\n     */\n    this.registerCall = call => {\n      if (!this.calls.find(c => c.cid === call.cid)) {\n        this.setCalls(calls => [...calls, call]);\n      }\n    };\n    /**\n     * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n     *\n     * @param call the call to remove\n     */\n    this.unregisterCall = call => {\n      const logger = getLogger(['client-state']);\n      logger('trace', `Unregistering call: ${call.cid}`);\n      return this.setCalls(calls => calls.filter(c => c !== call));\n    };\n    /**\n     * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n     *\n     * @param type the type of call to find.\n     * @param id the id of the call to find.\n     */\n    this.findCall = (type, id) => {\n      return this.calls.find(c => c.type === type && c.id === id);\n    };\n    this.connectedUserSubject.subscribe(async user => {\n      // leave all calls when the user disconnects.\n      if (!user) {\n        const logger = getLogger(['client-state']);\n        for (const call of this.calls) {\n          if (call.state.callingState === CallingState.LEFT) continue;\n          logger('info', `User disconnected, leaving call: ${call.cid}`);\n          await call.leave({\n            message: 'client.disconnectUser() called'\n          }).catch(err => {\n            logger('error', `Error leaving call: ${call.cid}`, err);\n          });\n        }\n      }\n    });\n  }\n  /**\n   * The currently connected user.\n   */\n  get connectedUser() {\n    return getCurrentValue(this.connectedUserSubject);\n  }\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  get calls() {\n    return getCurrentValue(this.callsSubject);\n  }\n}\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */\nclass StreamVideoReadOnlyStateStore {\n  constructor(store) {\n    /**\n     * This method allows you the get the current value of a state variable.\n     *\n     * @param observable the observable to get the current value of.\n     * @returns the current value of the observable.\n     */\n    this.getCurrentValue = getCurrentValue;\n    // convert and expose subjects as observables\n    this.connectedUser$ = store.connectedUserSubject.asObservable();\n    this.calls$ = store.callsSubject.asObservable();\n  }\n  /**\n   * The current user connected over WS to the backend.\n   */\n  get connectedUser() {\n    return getCurrentValue(this.connectedUser$);\n  }\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  get calls() {\n    return getCurrentValue(this.calls$);\n  }\n}\n\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */\nconst combineComparators = (...comparators) => {\n  return (a, b) => {\n    for (const comparator of comparators) {\n      const result = comparator(a, b);\n      if (result !== 0) return result;\n    }\n    return 0;\n  };\n};\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */\nconst descending = comparator => {\n  return (a, b) => comparator(b, a);\n};\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */\nconst conditional = predicate => {\n  return comparator => {\n    return (a, b) => {\n      if (!predicate(a, b)) return 0;\n      return comparator(a, b);\n    };\n  };\n};\n/**\n * A no-op comparator which always returns 0.\n */\nconst noopComparator = () => {\n  return () => 0;\n};\n\n/**\n * Check if a participant has a video.\n *\n * @param p the participant to check.\n */\nconst hasVideo = p => p.publishedTracks.includes(TrackType.VIDEO);\n/**\n * Check if a participant has audio.\n *\n * @param p the participant to check.\n */\nconst hasAudio = p => p.publishedTracks.includes(TrackType.AUDIO);\n/**\n * Check if a participant is screen sharing.\n *\n * @param p the participant to check.\n */\nconst hasScreenShare = p => p.publishedTracks.includes(TrackType.SCREEN_SHARE);\n/**\n * Check if a participant is screen sharing audio.\n *\n * @param p the participant to check.\n */\nconst hasScreenShareAudio = p => p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO);\n/**\n * Check if the participant is pinned.\n *\n * @param p the participant.\n */\nconst isPinned = p => !!p.pin && (p.pin.isLocalPin || p.pin.pinnedAt > 0);\n\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nconst dominantSpeaker = (a, b) => {\n  if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n  if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n  return 0;\n};\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nconst speaking = (a, b) => {\n  if (a.isSpeaking && !b.isSpeaking) return -1;\n  if (!a.isSpeaking && b.isSpeaking) return 1;\n  return 0;\n};\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nconst screenSharing = (a, b) => {\n  if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n  if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n  return 0;\n};\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nconst publishingVideo = (a, b) => {\n  if (hasVideo(a) && !hasVideo(b)) return -1;\n  if (!hasVideo(a) && hasVideo(b)) return 1;\n  return 0;\n};\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nconst publishingAudio = (a, b) => {\n  if (hasAudio(a) && !hasAudio(b)) return -1;\n  if (!hasAudio(a) && hasAudio(b)) return 1;\n  return 0;\n};\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nconst pinned = (a, b) => {\n  if (a.pin && b.pin) {\n    if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n    if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n    if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n    if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n  }\n  if (a.pin && !b.pin) return -1;\n  if (!a.pin && b.pin) return 1;\n  return 0;\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */\nconst reactionType = type => {\n  return (a, b) => {\n    if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n    if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n    return 0;\n  };\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */\nconst role = (...roles) => (a, b) => {\n  if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n  if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n  return 0;\n};\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nconst name = (a, b) => {\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\nconst hasAnyRole = (p, roles) => (p.roles || []).some(r => roles.includes(r));\n\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional((a, b) => a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE);\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */\nconst ifInvisibleOrUnknownBy = conditional((a, b) => a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN);\n/**\n * The default sorting preset.\n */\nconst defaultSortPreset = combineComparators(pinned, screenSharing, ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for speaker layout.\n */\nconst speakerLayoutSortPreset = combineComparators(pinned, screenSharing, dominantSpeaker, ifInvisibleBy(combineComparators(speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */\nconst paginatedLayoutSortPreset = combineComparators(pinned, ifInvisibleOrUnknownBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for livestreams and audio rooms.\n */\nconst livestreamOrAudioRoomSortPreset = combineComparators(ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)), role('admin', 'host', 'speaker'));\n\n/**\n * Returns the default egress object - when no egress data is available.\n */\nconst defaultEgress = {\n  broadcasting: false,\n  hls: {\n    playlist_url: '',\n    status: ''\n  },\n  rtmps: []\n};\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */\nclass CallState {\n  /**\n   * Creates a new instance of the CallState class.\n   *\n   */\n  constructor() {\n    this.backstageSubject = new BehaviorSubject(true);\n    this.blockedUserIdsSubject = new BehaviorSubject([]);\n    this.createdAtSubject = new BehaviorSubject(new Date());\n    this.endedAtSubject = new BehaviorSubject(undefined);\n    this.startsAtSubject = new BehaviorSubject(undefined);\n    this.updatedAtSubject = new BehaviorSubject(new Date());\n    this.createdBySubject = new BehaviorSubject(undefined);\n    this.customSubject = new BehaviorSubject({});\n    this.egressSubject = new BehaviorSubject(undefined);\n    this.ingressSubject = new BehaviorSubject(undefined);\n    this.recordingSubject = new BehaviorSubject(false);\n    this.sessionSubject = new BehaviorSubject(undefined);\n    this.settingsSubject = new BehaviorSubject(undefined);\n    this.transcribingSubject = new BehaviorSubject(false);\n    this.captioningSubject = new BehaviorSubject(false);\n    this.endedBySubject = new BehaviorSubject(undefined);\n    this.thumbnailsSubject = new BehaviorSubject(undefined);\n    this.membersSubject = new BehaviorSubject([]);\n    this.ownCapabilitiesSubject = new BehaviorSubject([]);\n    this.callingStateSubject = new BehaviorSubject(CallingState.UNKNOWN);\n    this.startedAtSubject = new BehaviorSubject(undefined);\n    this.participantCountSubject = new BehaviorSubject(0);\n    this.anonymousParticipantCountSubject = new BehaviorSubject(0);\n    this.participantsSubject = new BehaviorSubject([]);\n    this.callStatsReportSubject = new BehaviorSubject(undefined);\n    this.closedCaptionsSubject = new BehaviorSubject([]);\n    // These are tracks that were delivered to the Subscriber's onTrack event\n    // that we couldn't associate with a participant yet.\n    // This happens when the participantJoined event hasn't been received yet.\n    // We keep these tracks around until we can associate them with a participant.\n    this.orphanedTracks = [];\n    this.logger = getLogger(['CallState']);\n    /**\n     * A list of comparators that are used to sort the participants.\n     */\n    this.sortParticipantsBy = defaultSortPreset;\n    this.closedCaptionsTasks = new Map();\n    /**\n     * Runs the cleanup tasks.\n     */\n    this.dispose = () => {\n      for (const [ccKey, taskId] of this.closedCaptionsTasks.entries()) {\n        clearTimeout(taskId);\n        this.closedCaptionsTasks.delete(ccKey);\n      }\n    };\n    /**\n     * Sets the list of criteria that are used to sort the participants.\n     * To disable sorting, you can pass `noopComparator()`.\n     *\n     * @param comparator the comparator to use to sort the participants.\n     */\n    this.setSortParticipantsBy = comparator => {\n      this.sortParticipantsBy = comparator;\n      // trigger re-sorting of participants\n      this.setCurrentValue(this.participantsSubject, ps => ps);\n    };\n    /**\n     * Gets the current value of an observable, or undefined if the observable has\n     * not emitted a value yet.\n     *\n     * @param observable$ the observable to get the value from.\n     */\n    this.getCurrentValue = getCurrentValue;\n    /**\n     * Updates the value of the provided Subject.\n     * An `update` can either be a new value or a function which takes\n     * the current value and returns a new value.\n     *\n     * @internal\n     *\n     * @param subject the subject to update.\n     * @param update the update to apply to the subject.\n     * @return the updated value.\n     */\n    this.setCurrentValue = setCurrentValue;\n    /**\n     * Sets the number of participants in the current call.\n     *\n     * @internal\n     * @param count the number of participants.\n     */\n    this.setParticipantCount = count => {\n      return this.setCurrentValue(this.participantCountSubject, count);\n    };\n    /**\n     * Sets the time the call session actually started.\n     *\n     * @internal\n     * @param startedAt the time the call session actually started.\n     */\n    this.setStartedAt = startedAt => {\n      return this.setCurrentValue(this.startedAtSubject, startedAt);\n    };\n    /**\n     * Sets the closed captioning state of the current call.\n     *\n     * @internal\n     * @param captioning the closed captioning state.\n     */\n    this.setCaptioning = captioning => {\n      return updateValue(this.captioningSubject, captioning);\n    };\n    /**\n     * Sets the number of anonymous participants in the current call.\n     *\n     * @internal\n     * @param count the number of anonymous participants.\n     */\n    this.setAnonymousParticipantCount = count => {\n      return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n    };\n    /**\n     * Sets the list of participants in the current call.\n     *\n     * @internal\n     *\n     * @param participants the list of participants.\n     */\n    this.setParticipants = participants => {\n      return this.setCurrentValue(this.participantsSubject, participants);\n    };\n    /**\n     * Sets the calling state.\n     *\n     * @internal\n     * @param state the new calling state.\n     */\n    this.setCallingState = state => {\n      return this.setCurrentValue(this.callingStateSubject, state);\n    };\n    /**\n     * Sets the call stats report.\n     *\n     * @internal\n     * @param report the report to set.\n     */\n    this.setCallStatsReport = report => {\n      return this.setCurrentValue(this.callStatsReportSubject, report);\n    };\n    /**\n     * Sets the members of the current call.\n     *\n     * @internal\n     * @param members the members to set.\n     */\n    this.setMembers = members => {\n      this.setCurrentValue(this.membersSubject, members);\n    };\n    /**\n     * Sets the own capabilities.\n     *\n     * @internal\n     * @param capabilities the capabilities to set.\n     */\n    this.setOwnCapabilities = capabilities => {\n      return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n    };\n    /**\n     * Sets the backstage state.\n     * @param backstage the backstage state.\n     */\n    this.setBackstage = backstage => {\n      return this.setCurrentValue(this.backstageSubject, backstage);\n    };\n    /**\n     * Sets the time when this call has been ended.\n     * @param endedAt the time when this call has been ended.\n     */\n    this.setEndedAt = endedAt => {\n      return this.setCurrentValue(this.endedAtSubject, endedAt);\n    };\n    /**\n     * Will try to find the participant with the given sessionId in the current call.\n     *\n     * @param sessionId the sessionId of the participant to find.\n     * @returns the participant with the given sessionId or undefined if not found.\n     */\n    this.findParticipantBySessionId = sessionId => {\n      return this.participants.find(p => p.sessionId === sessionId);\n    };\n    /**\n     * Returns a new lookup table of participants indexed by their session ID.\n     */\n    this.getParticipantLookupBySessionId = () => {\n      return this.participants.reduce((lookupTable, participant) => {\n        lookupTable[participant.sessionId] = participant;\n        return lookupTable;\n      }, {});\n    };\n    /**\n     * Updates a participant in the current call identified by the given `sessionId`.\n     * If the participant can't be found, this operation is no-op.\n     *\n     * @internal\n     *\n     * @param sessionId the session ID of the participant to update.\n     * @param patch the patch to apply to the participant.\n     * @returns the updated participant or `undefined` if the participant couldn't be found.\n     */\n    this.updateParticipant = (sessionId, patch) => {\n      const participant = this.findParticipantBySessionId(sessionId);\n      if (!participant) {\n        this.logger('warn', `Participant with sessionId ${sessionId} not found`);\n        return;\n      }\n      const thePatch = typeof patch === 'function' ? patch(participant) : patch;\n      const updatedParticipant = {\n        ...participant,\n        ...thePatch\n      };\n      return this.setParticipants(participants => participants.map(p => p.sessionId === sessionId ? updatedParticipant : p));\n    };\n    /**\n     * Updates a participant in the current call identified by the given `sessionId`.\n     * If a participant with matching `sessionId` can't be found, the provided\n     * `participant` is added to the list of participants.\n     *\n     * @param sessionId the session ID of the participant to update.\n     * @param participant the participant to update or add.\n     */\n    this.updateOrAddParticipant = (sessionId, participant) => {\n      return this.setParticipants(participants => {\n        let add = true;\n        const nextParticipants = participants.map(p => {\n          if (p.sessionId === sessionId) {\n            add = false;\n            return {\n              ...p,\n              ...participant\n            };\n          }\n          return p;\n        });\n        if (add) nextParticipants.push(participant);\n        return nextParticipants;\n      });\n    };\n    /**\n     * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n     * If no patches are provided, this operation is no-op.\n     *\n     * @internal\n     *\n     * @param patch the patch to apply to the participants.\n     * @returns all participants, with all patch applied.\n     */\n    this.updateParticipants = patch => {\n      if (Object.keys(patch).length === 0) return this.participants;\n      return this.setParticipants(participants => participants.map(p => {\n        const thePatch = patch[p.sessionId];\n        if (thePatch) {\n          return {\n            ...p,\n            ...thePatch\n          };\n        }\n        return p;\n      }));\n    };\n    /**\n     * Update track subscription configuration for one or more participants.\n     * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n     * You can only subscribe for tracks after the participant started publishing the given kind of track.\n     *\n     * @param trackType the kind of subscription to update.\n     * @param changes the list of subscription changes to do.\n     */\n    this.updateParticipantTracks = (trackType, changes) => {\n      return this.updateParticipants(Object.entries(changes).reduce((acc, [sessionId, change]) => {\n        if (change.dimension) {\n          change.dimension.height = Math.ceil(change.dimension.height);\n          change.dimension.width = Math.ceil(change.dimension.width);\n        }\n        const prop = trackType === 'videoTrack' ? 'videoDimension' : trackType === 'screenShareTrack' ? 'screenShareDimension' : undefined;\n        if (prop) {\n          acc[sessionId] = {\n            [prop]: change.dimension\n          };\n        }\n        return acc;\n      }, {}));\n    };\n    /**\n     * Updates the call state with the data received from the server.\n     *\n     * @internal\n     *\n     * @param event the video event that our backend sent us.\n     */\n    this.updateFromEvent = event => {\n      const update = this.eventHandlers[event.type];\n      if (update) {\n        update(event);\n      }\n    };\n    /**\n     * Updates the participant pinned state with server side pinning data.\n     *\n     * @param pins the latest pins from the server.\n     */\n    this.setServerSidePins = pins => {\n      const pinsLookup = pins.reduce((lookup, pin) => {\n        lookup[pin.sessionId] = Date.now();\n        return lookup;\n      }, {});\n      return this.setParticipants(participants => participants.map(participant => {\n        const serverSidePinnedAt = pinsLookup[participant.sessionId];\n        // the participant is newly pinned\n        if (serverSidePinnedAt) {\n          return {\n            ...participant,\n            pin: {\n              isLocalPin: false,\n              pinnedAt: serverSidePinnedAt\n            }\n          };\n        }\n        // the participant is no longer pinned server side\n        // we need to reset the pin\n        if (participant.pin && !participant.pin.isLocalPin) {\n          return {\n            ...participant,\n            pin: undefined\n          };\n        }\n        // no changes to be applied\n        return participant;\n      }));\n    };\n    /**\n     * Adds an orphaned track to the call state.\n     *\n     * @internal\n     *\n     * @param orphanedTrack the orphaned track to add.\n     */\n    this.registerOrphanedTrack = orphanedTrack => {\n      this.orphanedTracks.push(orphanedTrack);\n    };\n    /**\n     * Removes an orphaned track from the call state.\n     *\n     * @internal\n     *\n     * @param id the ID of the orphaned track to remove.\n     */\n    this.removeOrphanedTrack = id => {\n      this.orphanedTracks = this.orphanedTracks.filter(o => o.id !== id);\n    };\n    /**\n     * Takes all orphaned tracks with the given track lookup prefix.\n     * All orphaned tracks with the given track lookup prefix are removed from the call state.\n     *\n     * @internal\n     *\n     * @param trackLookupPrefix the track lookup prefix to match the orphaned tracks by.\n     */\n    this.takeOrphanedTracks = trackLookupPrefix => {\n      const orphans = this.orphanedTracks.filter(orphan => orphan.trackLookupPrefix === trackLookupPrefix);\n      if (orphans.length > 0) {\n        this.orphanedTracks = this.orphanedTracks.filter(orphan => orphan.trackLookupPrefix !== trackLookupPrefix);\n      }\n      return orphans;\n    };\n    /**\n     * Updates the closed captions settings.\n     *\n     * @param config the new closed captions settings.\n     */\n    this.updateClosedCaptionSettings = config => {\n      this.closedCaptionsSettings = {\n        ...this.closedCaptionsSettings,\n        ...config\n      };\n    };\n    /**\n     * Updates the call state with the data received from the server.\n     *\n     * @internal\n     *\n     * @param call the call response from the server.\n     */\n    this.updateFromCallResponse = call => {\n      this.setBackstage(call.backstage);\n      this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n      this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n      this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n      this.setCurrentValue(this.startsAtSubject, call.starts_at ? new Date(call.starts_at) : undefined);\n      this.setEndedAt(call.ended_at ? new Date(call.ended_at) : undefined);\n      this.setCurrentValue(this.createdBySubject, call.created_by);\n      this.setCurrentValue(this.customSubject, call.custom);\n      this.setCurrentValue(this.egressSubject, call.egress);\n      this.setCurrentValue(this.ingressSubject, call.ingress);\n      this.setCurrentValue(this.recordingSubject, call.recording);\n      const s = this.setCurrentValue(this.sessionSubject, call.session);\n      this.updateParticipantCountFromSession(s);\n      this.setCurrentValue(this.settingsSubject, call.settings);\n      this.setCurrentValue(this.transcribingSubject, call.transcribing);\n      this.setCurrentValue(this.captioningSubject, call.captioning);\n      this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n    };\n    /**\n     * Updates the call state with the data received from the SFU server.\n     *\n     * @internal\n     *\n     * @param callState the call state from the SFU server.\n     * @param currentSessionId the session ID of the current user.\n     * @param reconnectDetails optional reconnect details.\n     */\n    this.updateFromSfuCallState = (callState, currentSessionId, reconnectDetails) => {\n      const {\n        participants,\n        participantCount,\n        startedAt,\n        pins\n      } = callState;\n      const localPublishedTracks = reconnectDetails?.announcedTracks.map(t => t.trackType) ?? [];\n      this.setParticipants(() => {\n        const participantLookup = this.getParticipantLookupBySessionId();\n        return participants.map(p => {\n          // We need to preserve the local state of the participant\n          // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n          // as it doesn't exist on the server.\n          const existingParticipant = participantLookup[p.sessionId];\n          const isLocalParticipant = p.sessionId === currentSessionId;\n          return Object.assign({}, existingParticipant, p, {\n            isLocalParticipant,\n            publishedTracks: isLocalParticipant ? localPublishedTracks : p.publishedTracks,\n            viewportVisibilityState: existingParticipant?.viewportVisibilityState ?? {\n              videoTrack: VisibilityState.UNKNOWN,\n              screenShareTrack: VisibilityState.UNKNOWN\n            }\n          });\n        });\n      });\n      this.setParticipantCount(participantCount?.total || 0);\n      this.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n      this.setStartedAt(startedAt ? Timestamp.toDate(startedAt) : new Date());\n      this.setServerSidePins(pins);\n    };\n    this.updateFromMemberRemoved = event => {\n      this.updateFromCallResponse(event.call);\n      this.setCurrentValue(this.membersSubject, members => members.filter(m => event.members.indexOf(m.user_id) === -1));\n    };\n    this.updateFromMemberAdded = event => {\n      this.updateFromCallResponse(event.call);\n      this.setCurrentValue(this.membersSubject, members => [...members, ...event.members]);\n    };\n    this.updateFromHLSBroadcastStopped = () => {\n      this.setCurrentValue(this.egressSubject, (egress = defaultEgress) => ({\n        ...egress,\n        broadcasting: false,\n        hls: {\n          ...egress.hls,\n          status: ''\n        }\n      }));\n    };\n    this.updateFromHLSBroadcastingFailed = () => {\n      this.setCurrentValue(this.egressSubject, (egress = defaultEgress) => ({\n        ...egress,\n        broadcasting: false,\n        hls: {\n          ...egress.hls,\n          status: ''\n        }\n      }));\n    };\n    this.updateParticipantCountFromSession = session => {\n      // when in JOINED state, we should use the participant count coming through\n      // the SFU healthcheck event, as it's more accurate.\n      if (!session || this.callingState === CallingState.JOINED) return;\n      const byRoleCount = Object.values(session.participants_count_by_role).reduce((total, countByRole) => total + countByRole, 0);\n      const participantCount = Math.max(byRoleCount, session.participants.length);\n      this.setParticipantCount(participantCount);\n      this.setAnonymousParticipantCount(session.anonymous_participant_count || 0);\n    };\n    this.updateFromSessionParticipantCountUpdate = event => {\n      const s = this.setCurrentValue(this.sessionSubject, session => {\n        if (!session) return session;\n        return {\n          ...session,\n          anonymous_participant_count: event.anonymous_participant_count,\n          participants_count_by_role: event.participants_count_by_role\n        };\n      });\n      this.updateParticipantCountFromSession(s);\n    };\n    this.updateFromSessionParticipantLeft = event => {\n      const s = this.setCurrentValue(this.sessionSubject, session => {\n        if (!session) return session;\n        const {\n          participants,\n          participants_count_by_role\n        } = session;\n        const {\n          user,\n          user_session_id\n        } = event.participant;\n        return {\n          ...session,\n          participants: participants.filter(p => p.user_session_id !== user_session_id),\n          participants_count_by_role: {\n            ...participants_count_by_role,\n            [user.role]: Math.max(0, (participants_count_by_role[user.role] || 0) - 1)\n          }\n        };\n      });\n      this.updateParticipantCountFromSession(s);\n    };\n    this.updateFromSessionParticipantJoined = event => {\n      const s = this.setCurrentValue(this.sessionSubject, session => {\n        if (!session) return session;\n        const {\n          participants,\n          participants_count_by_role\n        } = session;\n        const {\n          user,\n          user_session_id\n        } = event.participant;\n        // It could happen that the backend delivers the same participant more than once.\n        // Once with the call.session_started event and once again with the\n        // call.session_participant_joined event. In this case,\n        // we should update the existing participant and prevent duplicating it.\n        let shouldInsertParticipant = true;\n        const updatedParticipants = participants.map(p => {\n          if (p.user_session_id === user_session_id) {\n            shouldInsertParticipant = false;\n            return event.participant;\n          }\n          return p;\n        });\n        if (shouldInsertParticipant) {\n          // this is a new array, we can safely push the new participant\n          updatedParticipants.push(event.participant);\n        }\n        // If we are updating an existing participant, we don't want to increment\n        // the participant_by_role count.\n        const increment = shouldInsertParticipant ? 1 : 0;\n        return {\n          ...session,\n          participants: updatedParticipants,\n          participants_count_by_role: {\n            ...participants_count_by_role,\n            [user.role]: (participants_count_by_role[user.role] || 0) + increment\n          }\n        };\n      });\n      this.updateParticipantCountFromSession(s);\n    };\n    this.updateMembers = event => {\n      this.updateFromCallResponse(event.call);\n      this.setCurrentValue(this.membersSubject, members => members.map(member => {\n        const memberUpdate = event.members.find(m => m.user_id === member.user_id);\n        return memberUpdate ? memberUpdate : member;\n      }));\n    };\n    this.updateParticipantReaction = event => {\n      const {\n        user,\n        custom,\n        type,\n        emoji_code\n      } = event.reaction;\n      this.setParticipants(participants => {\n        return participants.map(p => {\n          // skip if the reaction is not for this participant\n          if (p.userId !== user.id) return p;\n          // update the participant with the new reaction\n          return {\n            ...p,\n            reaction: {\n              type,\n              emoji_code,\n              custom\n            }\n          };\n        });\n      });\n    };\n    this.unblockUser = event => {\n      this.setCurrentValue(this.blockedUserIdsSubject, current => {\n        if (!current) return current;\n        return current.filter(id => id !== event.user.id);\n      });\n    };\n    this.blockUser = event => {\n      this.setCurrentValue(this.blockedUserIdsSubject, current => [...(current || []), event.user.id]);\n    };\n    this.updateOwnCapabilities = event => {\n      if (event.user.id === this.localParticipant?.userId) {\n        this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n      }\n    };\n    this.updateFromClosedCaptions = event => {\n      this.setCurrentValue(this.closedCaptionsSubject, queue => {\n        const {\n          closed_caption\n        } = event;\n        const keyOf = c => `${c.speaker_id}/${c.start_time}`;\n        const currentKey = keyOf(closed_caption);\n        const duplicate = queue.some(caption => keyOf(caption) === currentKey);\n        if (duplicate) return queue;\n        const nextQueue = [...queue, closed_caption];\n        const {\n          visibilityDurationMs = 2700,\n          maxVisibleCaptions = 2\n        } = this.closedCaptionsSettings || {};\n        // schedule the removal of the closed caption after the retention time\n        if (visibilityDurationMs > 0) {\n          const taskId = setTimeout(() => {\n            this.setCurrentValue(this.closedCaptionsSubject, captions => captions.filter(caption => caption !== closed_caption));\n            this.closedCaptionsTasks.delete(currentKey);\n          }, visibilityDurationMs);\n          this.closedCaptionsTasks.set(currentKey, taskId);\n          // cancel the cleanup tasks for the closed captions that are no longer in the queue\n          for (let i = 0; i < nextQueue.length - maxVisibleCaptions; i++) {\n            const key = keyOf(nextQueue[i]);\n            const task = this.closedCaptionsTasks.get(key);\n            clearTimeout(task);\n            this.closedCaptionsTasks.delete(key);\n          }\n        }\n        // trim the queue\n        return nextQueue.slice(-maxVisibleCaptions);\n      });\n    };\n    this.participants$ = this.participantsSubject.asObservable().pipe(\n    // maintain stable-sort by mutating the participants stored\n    // in the original subject\n    map(ps => ps.sort(this.sortParticipantsBy)), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.localParticipant$ = this.participants$.pipe(map(participants => participants.find(p => p.isLocalParticipant)), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.remoteParticipants$ = this.participants$.pipe(map(participants => participants.filter(p => !p.isLocalParticipant)), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.pinnedParticipants$ = this.participants$.pipe(map(participants => participants.filter(p => !!p.pin)), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.dominantSpeaker$ = this.participants$.pipe(map(participants => participants.find(p => p.isDominantSpeaker)), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.hasOngoingScreenShare$ = this.participants$.pipe(map(participants => participants.some(p => hasScreenShare(p))), distinctUntilChanged(), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    // dates\n    this.createdAt$ = this.createdAtSubject.asObservable();\n    this.endedAt$ = this.endedAtSubject.asObservable();\n    this.startsAt$ = this.startsAtSubject.asObservable();\n    this.startedAt$ = this.startedAtSubject.asObservable();\n    this.updatedAt$ = this.updatedAtSubject.asObservable();\n    this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n    this.members$ = this.membersSubject.asObservable();\n    // complex objects should work as streams of data\n    this.createdBy$ = this.createdBySubject.asObservable();\n    this.custom$ = this.customSubject.asObservable();\n    this.egress$ = this.egressSubject.asObservable();\n    this.ingress$ = this.ingressSubject.asObservable();\n    this.session$ = this.sessionSubject.asObservable();\n    this.settings$ = this.settingsSubject.asObservable();\n    this.endedBy$ = this.endedBySubject.asObservable();\n    this.thumbnails$ = this.thumbnailsSubject.asObservable();\n    this.closedCaptions$ = this.closedCaptionsSubject.asObservable();\n    /**\n     * Performs shallow comparison of two arrays.\n     * Expects primitive values: [1, 2, 3] is equal to [2, 1, 3].\n     */\n    const isShallowEqual = (a, b) => {\n      if (a.length !== b.length) return false;\n      for (const item of a) if (!b.includes(item)) return false;\n      for (const item of b) if (!a.includes(item)) return false;\n      return true;\n    };\n    /**\n     * Creates an Observable from the given subject by piping to the\n     * `distinctUntilChanged()` operator.\n     */\n    const duc = (subject, comparator) => subject.asObservable().pipe(distinctUntilChanged(comparator));\n    // primitive values should only emit once the value they hold changes\n    this.anonymousParticipantCount$ = duc(this.anonymousParticipantCountSubject);\n    this.blockedUserIds$ = duc(this.blockedUserIdsSubject, isShallowEqual);\n    this.backstage$ = duc(this.backstageSubject);\n    this.callingState$ = duc(this.callingStateSubject);\n    this.ownCapabilities$ = duc(this.ownCapabilitiesSubject, isShallowEqual);\n    this.participantCount$ = duc(this.participantCountSubject);\n    this.recording$ = duc(this.recordingSubject);\n    this.transcribing$ = duc(this.transcribingSubject);\n    this.captioning$ = duc(this.captioningSubject);\n    this.eventHandlers = {\n      // these events are not updating the call state:\n      'call.frame_recording_ready': undefined,\n      'call.permission_request': undefined,\n      'call.recording_ready': undefined,\n      'call.rtmp_broadcast_failed': undefined,\n      'call.rtmp_broadcast_started': undefined,\n      'call.rtmp_broadcast_stopped': undefined,\n      'call.transcription_ready': undefined,\n      'call.user_muted': undefined,\n      'connection.error': undefined,\n      'connection.ok': undefined,\n      'health.check': undefined,\n      'user.updated': undefined,\n      custom: undefined,\n      // events that update call state:\n      'call.accepted': e => this.updateFromCallResponse(e.call),\n      'call.blocked_user': this.blockUser,\n      'call.closed_caption': this.updateFromClosedCaptions,\n      'call.closed_captions_failed': () => {\n        this.setCurrentValue(this.captioningSubject, false);\n      },\n      'call.closed_captions_started': () => {\n        this.setCurrentValue(this.captioningSubject, true);\n      },\n      'call.closed_captions_stopped': () => {\n        this.setCurrentValue(this.captioningSubject, false);\n      },\n      'call.created': e => this.updateFromCallResponse(e.call),\n      'call.deleted': e => this.updateFromCallResponse(e.call),\n      'call.ended': e => {\n        this.updateFromCallResponse(e.call);\n        this.setCurrentValue(this.endedBySubject, e.user);\n      },\n      'call.frame_recording_failed': e => {\n        this.updateFromCallResponse(e.call);\n      },\n      'call.frame_recording_started': e => {\n        this.updateFromCallResponse(e.call);\n      },\n      'call.frame_recording_stopped': e => {\n        this.updateFromCallResponse(e.call);\n      },\n      'call.hls_broadcasting_failed': this.updateFromHLSBroadcastingFailed,\n      'call.hls_broadcasting_started': e => {\n        this.updateFromCallResponse(e.call);\n      },\n      'call.hls_broadcasting_stopped': this.updateFromHLSBroadcastStopped,\n      'call.live_started': e => this.updateFromCallResponse(e.call),\n      'call.member_added': this.updateFromMemberAdded,\n      'call.member_removed': this.updateFromMemberRemoved,\n      'call.member_updated_permission': this.updateMembers,\n      'call.member_updated': this.updateMembers,\n      'call.notification': e => {\n        this.updateFromCallResponse(e.call);\n        this.setMembers(e.members);\n      },\n      'call.permissions_updated': this.updateOwnCapabilities,\n      'call.reaction_new': this.updateParticipantReaction,\n      'call.recording_started': () => this.setCurrentValue(this.recordingSubject, true),\n      'call.recording_stopped': () => this.setCurrentValue(this.recordingSubject, false),\n      'call.recording_failed': () => this.setCurrentValue(this.recordingSubject, false),\n      'call.rejected': e => this.updateFromCallResponse(e.call),\n      'call.ring': e => this.updateFromCallResponse(e.call),\n      'call.missed': e => this.updateFromCallResponse(e.call),\n      'call.session_ended': e => this.updateFromCallResponse(e.call),\n      'call.session_participant_count_updated': this.updateFromSessionParticipantCountUpdate,\n      'call.session_participant_joined': this.updateFromSessionParticipantJoined,\n      'call.session_participant_left': this.updateFromSessionParticipantLeft,\n      'call.session_started': e => this.updateFromCallResponse(e.call),\n      'call.transcription_started': () => {\n        this.setCurrentValue(this.transcribingSubject, true);\n      },\n      'call.transcription_stopped': () => {\n        this.setCurrentValue(this.transcribingSubject, false);\n      },\n      'call.transcription_failed': () => {\n        this.setCurrentValue(this.transcribingSubject, false);\n      },\n      'call.unblocked_user': this.unblockUser,\n      'call.updated': e => this.updateFromCallResponse(e.call)\n    };\n  }\n  /**\n   * The server-side counted number of participants connected to the current call.\n   * This number includes the anonymous participants as well.\n   */\n  get participantCount() {\n    return this.getCurrentValue(this.participantCount$);\n  }\n  /**\n   * The time the call session actually started.\n   * Useful for displaying the call duration.\n   */\n  get startedAt() {\n    return this.getCurrentValue(this.startedAt$);\n  }\n  /**\n   * Returns whether closed captions are enabled in the current call.\n   */\n  get captioning() {\n    return this.getCurrentValue(this.captioning$);\n  }\n  /**\n   * The server-side counted number of anonymous participants connected to the current call.\n   * This number includes the anonymous participants as well.\n   */\n  get anonymousParticipantCount() {\n    return this.getCurrentValue(this.anonymousParticipantCount$);\n  }\n  /**\n   * The list of participants in the current call.\n   */\n  get participants() {\n    return this.getCurrentValue(this.participants$);\n  }\n  /**\n   * The local participant in the current call.\n   */\n  get localParticipant() {\n    return this.getCurrentValue(this.localParticipant$);\n  }\n  /**\n   * The list of remote participants in the current call.\n   */\n  get remoteParticipants() {\n    return this.getCurrentValue(this.remoteParticipants$);\n  }\n  /**\n   * The dominant speaker in the current call.\n   */\n  get dominantSpeaker() {\n    return this.getCurrentValue(this.dominantSpeaker$);\n  }\n  /**\n   * The list of pinned participants in the current call.\n   */\n  get pinnedParticipants() {\n    return this.getCurrentValue(this.pinnedParticipants$);\n  }\n  /**\n   * Tell if there is an ongoing screen share in this call.\n   */\n  get hasOngoingScreenShare() {\n    return this.getCurrentValue(this.hasOngoingScreenShare$);\n  }\n  /**\n   * The calling state.\n   */\n  get callingState() {\n    return this.getCurrentValue(this.callingState$);\n  }\n  /**\n   * The call stats report.\n   */\n  get callStatsReport() {\n    return this.getCurrentValue(this.callStatsReport$);\n  }\n  /**\n   * The members of the current call.\n   */\n  get members() {\n    return this.getCurrentValue(this.members$);\n  }\n  /**\n   * The capabilities of the current user for the current call.\n   */\n  get ownCapabilities() {\n    return this.getCurrentValue(this.ownCapabilities$);\n  }\n  /**\n   * The backstage state.\n   */\n  get backstage() {\n    return this.getCurrentValue(this.backstage$);\n  }\n  /**\n   * Will provide the list of blocked user IDs.\n   */\n  get blockedUserIds() {\n    return this.getCurrentValue(this.blockedUserIds$);\n  }\n  /**\n   * Will provide the time when this call has been created.\n   */\n  get createdAt() {\n    return this.getCurrentValue(this.createdAt$);\n  }\n  /**\n   * Will provide the time when this call has been ended.\n   */\n  get endedAt() {\n    return this.getCurrentValue(this.endedAt$);\n  }\n  /**\n   * Will provide the time when this call has been scheduled to start.\n   */\n  get startsAt() {\n    return this.getCurrentValue(this.startsAt$);\n  }\n  /**\n   * Will provide the time when this call has been updated.\n   */\n  get updatedAt() {\n    return this.getCurrentValue(this.updatedAt$);\n  }\n  /**\n   * Will provide the user who created this call.\n   */\n  get createdBy() {\n    return this.getCurrentValue(this.createdBy$);\n  }\n  /**\n   * Will provide the custom data of this call.\n   */\n  get custom() {\n    return this.getCurrentValue(this.custom$);\n  }\n  /**\n   * Will provide the egress data of this call.\n   */\n  get egress() {\n    return this.getCurrentValue(this.egress$);\n  }\n  /**\n   * Will provide the ingress data of this call.\n   */\n  get ingress() {\n    return this.getCurrentValue(this.ingress$);\n  }\n  /**\n   * Will provide the recording state of this call.\n   */\n  get recording() {\n    return this.getCurrentValue(this.recording$);\n  }\n  /**\n   * Will provide the session data of this call.\n   */\n  get session() {\n    return this.getCurrentValue(this.session$);\n  }\n  /**\n   * Will provide the settings of this call.\n   */\n  get settings() {\n    return this.getCurrentValue(this.settings$);\n  }\n  /**\n   * Will provide the transcribing state of this call.\n   */\n  get transcribing() {\n    return this.getCurrentValue(this.transcribing$);\n  }\n  /**\n   * Will provide the user who ended this call.\n   */\n  get endedBy() {\n    return this.getCurrentValue(this.endedBy$);\n  }\n  /**\n   * Will provide the thumbnails of this call, if enabled in the call settings.\n   */\n  get thumbnails() {\n    return this.getCurrentValue(this.thumbnails$);\n  }\n  /**\n   * Returns the current queue of closed captions.\n   */\n  get closedCaptions() {\n    return this.getCurrentValue(this.closedCaptions$);\n  }\n}\n\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */\nconst flatten = report => {\n  const stats = [];\n  report.forEach(s => {\n    stats.push(s);\n  });\n  return stats;\n};\nconst getSdkSignature = clientDetails => {\n  const {\n    sdk,\n    ...platform\n  } = clientDetails;\n  const sdkName = getSdkName(sdk);\n  const sdkVersion = getSdkVersion(sdk);\n  return {\n    sdkName,\n    sdkVersion,\n    ...platform\n  };\n};\nconst getSdkName = sdk => {\n  return sdk && sdk.type === SdkType.REACT ? 'stream-react' : sdk && sdk.type === SdkType.REACT_NATIVE ? 'stream-react-native' : 'stream-js';\n};\nconst getSdkVersion = sdk => {\n  return sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : '0.0.0-development';\n};\n\n/**\n * Checks whether the current browser is Safari.\n */\nconst isSafari = () => {\n  if (typeof navigator === 'undefined') return false;\n  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || '');\n};\n/**\n * Checks whether the current browser is Firefox.\n */\nconst isFirefox = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.userAgent?.includes('Firefox');\n};\n/**\n * Checks whether the current browser is Google Chrome.\n */\nconst isChrome = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.userAgent?.includes('Chrome');\n};\nvar browsers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isChrome: isChrome,\n  isFirefox: isFirefox,\n  isSafari: isSafari\n});\n\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */\nconst createStatsReporter = ({\n  subscriber,\n  publisher,\n  state,\n  datacenter,\n  pollingIntervalInMs = 2000\n}) => {\n  const logger = getLogger(['stats']);\n  const getRawStatsForTrack = async (kind, selector) => {\n    if (kind === 'subscriber' && subscriber) {\n      return subscriber.getStats(selector);\n    } else if (kind === 'publisher' && publisher) {\n      return publisher.getStats(selector);\n    } else {\n      return undefined;\n    }\n  };\n  const getStatsForStream = async (kind, tracks) => {\n    const pc = kind === 'subscriber' ? subscriber : publisher;\n    if (!pc) return [];\n    const statsForStream = [];\n    for (const track of tracks) {\n      const report = await pc.getStats(track);\n      const stats = transform(report, {\n        trackKind: track.kind,\n        kind,\n        publisher: undefined\n      });\n      statsForStream.push(stats);\n    }\n    return statsForStream;\n  };\n  const startReportingStatsFor = sessionId => {\n    sessionIdsToTrack.add(sessionId);\n    void run();\n  };\n  const stopReportingStatsFor = sessionId => {\n    sessionIdsToTrack.delete(sessionId);\n    void run();\n  };\n  const sessionIdsToTrack = new Set();\n  /**\n   * The main stats reporting loop.\n   */\n  const run = async () => {\n    const participantStats = {};\n    if (sessionIdsToTrack.size > 0) {\n      const sessionIds = new Set(sessionIdsToTrack);\n      for (const participant of state.participants) {\n        if (!sessionIds.has(participant.sessionId)) continue;\n        const {\n          audioStream,\n          isLocalParticipant,\n          sessionId,\n          userId,\n          videoStream\n        } = participant;\n        const kind = isLocalParticipant ? 'publisher' : 'subscriber';\n        try {\n          const tracks = isLocalParticipant ? publisher?.getPublishedTracks() || [] : [...(videoStream?.getVideoTracks() || []), ...(audioStream?.getAudioTracks() || [])];\n          participantStats[sessionId] = await getStatsForStream(kind, tracks);\n        } catch (e) {\n          logger('warn', `Failed to collect ${kind} stats for ${userId}`, e);\n        }\n      }\n    }\n    const [subscriberRawStats, publisherRawStats] = await Promise.all([getRawStatsForTrack('subscriber'), publisher ? getRawStatsForTrack('publisher') : undefined]);\n    const process = (report, kind) => aggregate(transform(report, {\n      kind,\n      trackKind: 'video',\n      publisher\n    }));\n    const subscriberStats = subscriberRawStats ? process(subscriberRawStats, 'subscriber') : getEmptyStats();\n    const publisherStats = publisherRawStats ? process(publisherRawStats, 'publisher') : getEmptyStats();\n    state.setCallStatsReport({\n      datacenter,\n      publisherStats,\n      subscriberStats,\n      subscriberRawStats,\n      publisherRawStats,\n      participants: participantStats,\n      timestamp: Date.now()\n    });\n  };\n  let timeoutId;\n  if (pollingIntervalInMs > 0) {\n    const loop = async () => {\n      await run().catch(e => {\n        logger('debug', 'Failed to collect stats', e);\n      });\n      timeoutId = setTimeout(loop, pollingIntervalInMs);\n    };\n    void loop();\n  }\n  const stop = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  };\n  return {\n    getRawStatsForTrack,\n    getStatsForStream,\n    startReportingStatsFor,\n    stopReportingStatsFor,\n    stop\n  };\n};\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */\nconst transform = (report, opts) => {\n  const {\n    trackKind,\n    kind,\n    publisher\n  } = opts;\n  const direction = kind === 'subscriber' ? 'inbound-rtp' : 'outbound-rtp';\n  const stats = flatten(report);\n  const streams = stats.filter(stat => stat.type === direction && stat.kind === trackKind).map(stat => {\n    const rtcStreamStats = stat;\n    const codec = stats.find(s => s.type === 'codec' && s.id === rtcStreamStats.codecId);\n    const transport = stats.find(s => s.type === 'transport' && s.id === rtcStreamStats.transportId);\n    let roundTripTime;\n    if (transport && transport.dtlsState === 'connected') {\n      const candidatePair = stats.find(s => s.type === 'candidate-pair' && s.id === transport.selectedCandidatePairId);\n      roundTripTime = candidatePair?.currentRoundTripTime;\n    }\n    let trackType;\n    if (kind === 'publisher' && publisher) {\n      const firefox = isFirefox();\n      const mediaSource = stats.find(s => s.type === 'media-source' && (\n      // Firefox doesn't have mediaSourceId, so we need to guess the media source\n      firefox ? true : s.id === rtcStreamStats.mediaSourceId));\n      if (mediaSource) {\n        trackType = publisher.getTrackType(mediaSource.trackIdentifier);\n      }\n    }\n    return {\n      bytesSent: rtcStreamStats.bytesSent,\n      bytesReceived: rtcStreamStats.bytesReceived,\n      codec: codec?.mimeType,\n      currentRoundTripTime: roundTripTime,\n      frameHeight: rtcStreamStats.frameHeight,\n      frameWidth: rtcStreamStats.frameWidth,\n      framesPerSecond: rtcStreamStats.framesPerSecond,\n      jitter: rtcStreamStats.jitter,\n      kind: rtcStreamStats.kind,\n      mediaSourceId: rtcStreamStats.mediaSourceId,\n      qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n      rid: rtcStreamStats.rid,\n      ssrc: rtcStreamStats.ssrc,\n      trackType\n    };\n  });\n  return {\n    rawStats: report,\n    streams,\n    timestamp: Date.now()\n  };\n};\nconst getEmptyStats = stats => {\n  return {\n    rawReport: stats ?? {\n      streams: [],\n      timestamp: Date.now()\n    },\n    totalBytesSent: 0,\n    totalBytesReceived: 0,\n    averageJitterInMs: 0,\n    averageRoundTripTimeInMs: 0,\n    qualityLimitationReasons: 'none',\n    highestFrameWidth: 0,\n    highestFrameHeight: 0,\n    highestFramesPerSecond: 0,\n    codec: '',\n    codecPerTrackType: {},\n    timestamp: Date.now()\n  };\n};\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */\nconst aggregate = stats => {\n  const aggregatedStats = getEmptyStats(stats);\n  let maxArea = -1;\n  const area = (w, h) => w * h;\n  const qualityLimitationReasons = new Set();\n  const streams = stats.streams;\n  const report = streams.reduce((acc, stream) => {\n    acc.totalBytesSent += stream.bytesSent || 0;\n    acc.totalBytesReceived += stream.bytesReceived || 0;\n    acc.averageJitterInMs += stream.jitter || 0;\n    acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n    // naive calculation of the highest resolution\n    const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n    if (streamArea > maxArea) {\n      acc.highestFrameWidth = stream.frameWidth || 0;\n      acc.highestFrameHeight = stream.frameHeight || 0;\n      acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n      maxArea = streamArea;\n    }\n    qualityLimitationReasons.add(stream.qualityLimitationReason || '');\n    return acc;\n  }, aggregatedStats);\n  if (streams.length > 0) {\n    report.averageJitterInMs = Math.round(report.averageJitterInMs / streams.length * 1000);\n    report.averageRoundTripTimeInMs = Math.round(report.averageRoundTripTimeInMs / streams.length * 1000);\n    // we take the first codec we find, as it should be the same for all streams\n    report.codec = streams[0].codec || '';\n    report.codecPerTrackType = streams.reduce((acc, stream) => {\n      if (stream.trackType) {\n        acc[stream.trackType] = stream.codec || '';\n      }\n      return acc;\n    }, {});\n  }\n  const qualityLimitationReason = [qualityLimitationReasons.has('cpu') && 'cpu', qualityLimitationReasons.has('bandwidth') && 'bandwidth', qualityLimitationReasons.has('other') && 'other'].filter(Boolean).join(', ');\n  if (qualityLimitationReason) {\n    report.qualityLimitationReasons = qualityLimitationReason;\n  }\n  return report;\n};\nconst version = \"1.21.0\";\nconst [major, minor, patch] = version.split('.');\nlet sdkInfo = {\n  type: SdkType.PLAIN_JAVASCRIPT,\n  major,\n  minor,\n  patch\n};\nlet osInfo;\nlet deviceInfo;\nlet webRtcInfo;\nlet deviceState = {\n  oneofKind: undefined\n};\nconst setSdkInfo = info => {\n  sdkInfo = info;\n};\nconst getSdkInfo = () => {\n  return sdkInfo;\n};\nconst setOSInfo = info => {\n  osInfo = info;\n};\nconst setDeviceInfo = info => {\n  deviceInfo = info;\n};\nconst getWebRTCInfo = () => {\n  return webRtcInfo;\n};\nconst setWebRTCInfo = info => {\n  webRtcInfo = info;\n};\nconst setThermalState = state => {\n  if (!osInfo) {\n    deviceState = {\n      oneofKind: undefined\n    };\n    return;\n  }\n  if (osInfo.name === 'android') {\n    const thermalState = AndroidThermalState[state] || AndroidThermalState.UNSPECIFIED;\n    deviceState = {\n      oneofKind: 'android',\n      android: {\n        thermalState,\n        isPowerSaverMode: deviceState?.oneofKind === 'android' && deviceState.android.isPowerSaverMode\n      }\n    };\n  }\n  if (osInfo.name.toLowerCase() === 'ios') {\n    const thermalState = AppleThermalState[state] || AppleThermalState.UNSPECIFIED;\n    deviceState = {\n      oneofKind: 'apple',\n      apple: {\n        thermalState,\n        isLowPowerModeEnabled: deviceState?.oneofKind === 'apple' && deviceState.apple.isLowPowerModeEnabled\n      }\n    };\n  }\n};\nconst setPowerState = powerMode => {\n  if (!osInfo) {\n    deviceState = {\n      oneofKind: undefined\n    };\n    return;\n  }\n  if (osInfo.name === 'android') {\n    deviceState = {\n      oneofKind: 'android',\n      android: {\n        thermalState: deviceState?.oneofKind === 'android' ? deviceState.android.thermalState : AndroidThermalState.UNSPECIFIED,\n        isPowerSaverMode: powerMode\n      }\n    };\n  }\n  if (osInfo.name.toLowerCase() === 'ios') {\n    deviceState = {\n      oneofKind: 'apple',\n      apple: {\n        thermalState: deviceState?.oneofKind === 'apple' ? deviceState.apple.thermalState : AppleThermalState.UNSPECIFIED,\n        isLowPowerModeEnabled: powerMode\n      }\n    };\n  }\n};\nconst getDeviceState = () => {\n  return deviceState;\n};\nconst getClientDetails = async () => {\n  if (isReactNative()) {\n    // Since RN doesn't support web, sharing browser info is not required\n    return {\n      sdk: sdkInfo,\n      os: osInfo,\n      device: deviceInfo\n    };\n  }\n  // @ts-expect-error - userAgentData is not yet in the TS types\n  const userAgentDataApi = navigator.userAgentData;\n  let userAgentData;\n  if (userAgentDataApi && userAgentDataApi.getHighEntropyValues) {\n    try {\n      userAgentData = await userAgentDataApi.getHighEntropyValues(['platform', 'platformVersion']);\n    } catch {\n      // Ignore the error\n    }\n  }\n  const userAgent = new UAParser(navigator.userAgent);\n  const {\n    browser,\n    os,\n    device,\n    cpu\n  } = userAgent.getResult();\n  return {\n    sdk: sdkInfo,\n    browser: {\n      name: browser.name || navigator.userAgent,\n      version: browser.version || ''\n    },\n    os: {\n      name: userAgentData?.platform || os.name || '',\n      version: userAgentData?.platformVersion || os.version || '',\n      architecture: cpu.architecture || ''\n    },\n    device: {\n      name: [device.vendor, device.model, device.type].filter(Boolean).join(' '),\n      version: ''\n    }\n  };\n};\nclass SfuStatsReporter {\n  constructor(sfuClient, {\n    options,\n    clientDetails,\n    subscriber,\n    publisher,\n    microphone,\n    camera,\n    state,\n    unifiedSessionId\n  }) {\n    this.logger = getLogger(['SfuStatsReporter']);\n    this.inputDevices = new Map();\n    this.observeDevice = (device, kind) => {\n      const {\n        browserPermissionState$\n      } = device.state;\n      this.unsubscribeDevicePermissionsSubscription?.();\n      this.unsubscribeDevicePermissionsSubscription = createSubscription(combineLatest([browserPermissionState$, this.state.ownCapabilities$]), ([browserPermissionState, ownCapabilities]) => {\n        // cleanup the previous listDevices() subscription in case\n        // permissions or capabilities have changed.\n        // we will subscribe again if everything is in order.\n        this.unsubscribeListDevicesSubscription?.();\n        const hasCapability = kind === 'mic' ? ownCapabilities.includes(OwnCapability.SEND_AUDIO) : ownCapabilities.includes(OwnCapability.SEND_VIDEO);\n        if (browserPermissionState !== 'granted' || !hasCapability) {\n          this.inputDevices.set(kind, {\n            currentDevice: '',\n            availableDevices: [],\n            isPermitted: false\n          });\n          return;\n        }\n        this.unsubscribeListDevicesSubscription = createSubscription(combineLatest([device.listDevices(), device.state.selectedDevice$]), ([devices, deviceId]) => {\n          const selected = devices.find(d => d.deviceId === deviceId);\n          this.inputDevices.set(kind, {\n            currentDevice: selected?.label || deviceId || '',\n            availableDevices: devices.map(d => d.label),\n            isPermitted: true\n          });\n        });\n      });\n    };\n    this.sendConnectionTime = connectionTimeSeconds => {\n      this.sendTelemetryData({\n        data: {\n          oneofKind: 'connectionTimeSeconds',\n          connectionTimeSeconds\n        }\n      });\n    };\n    this.sendReconnectionTime = (strategy, timeSeconds) => {\n      this.sendTelemetryData({\n        data: {\n          oneofKind: 'reconnection',\n          reconnection: {\n            strategy,\n            timeSeconds\n          }\n        }\n      });\n    };\n    this.sendTelemetryData = telemetryData => {\n      // intentionally not awaiting the promise here\n      // to avoid impeding with the ongoing actions.\n      this.run(telemetryData).catch(err => {\n        this.logger('warn', 'Failed to send telemetry data', err);\n      });\n    };\n    this.run = async telemetry => {\n      const [subscriberStats, publisherStats] = await Promise.all([this.subscriber.stats.get(), this.publisher?.stats.get()]);\n      this.subscriber.tracer?.trace('getstats', subscriberStats.delta);\n      if (publisherStats) {\n        this.publisher?.tracer?.trace('getstats', publisherStats.delta);\n      }\n      const subscriberTrace = this.subscriber.tracer?.take();\n      const publisherTrace = this.publisher?.tracer?.take();\n      const mediaTrace = tracer.take();\n      const sfuTrace = this.sfuClient.getTrace();\n      const traces = [...mediaTrace.snapshot, ...(sfuTrace?.snapshot ?? []), ...(publisherTrace?.snapshot ?? []), ...(subscriberTrace?.snapshot ?? [])];\n      try {\n        await this.sfuClient.sendStats({\n          sdk: this.sdkName,\n          sdkVersion: this.sdkVersion,\n          webrtcVersion: this.webRTCVersion,\n          subscriberStats: JSON.stringify(flatten(subscriberStats.stats)),\n          publisherStats: publisherStats ? JSON.stringify(flatten(publisherStats.stats)) : '[]',\n          subscriberRtcStats: '',\n          publisherRtcStats: '',\n          rtcStats: JSON.stringify(traces),\n          encodeStats: publisherStats?.performanceStats ?? [],\n          decodeStats: subscriberStats.performanceStats,\n          audioDevices: this.inputDevices.get('mic'),\n          videoDevices: this.inputDevices.get('camera'),\n          unifiedSessionId: this.unifiedSessionId,\n          deviceState: getDeviceState(),\n          telemetry\n        });\n      } catch (err) {\n        publisherTrace?.rollback();\n        subscriberTrace?.rollback();\n        mediaTrace.rollback();\n        sfuTrace?.rollback();\n        throw err;\n      }\n    };\n    this.start = () => {\n      if (this.options.reporting_interval_ms <= 0) return;\n      this.observeDevice(this.microphone, 'mic');\n      this.observeDevice(this.camera, 'camera');\n      clearInterval(this.intervalId);\n      this.intervalId = setInterval(() => {\n        this.run().catch(err => {\n          this.logger('warn', 'Failed to report stats', err);\n        });\n      }, this.options.reporting_interval_ms);\n    };\n    this.stop = () => {\n      this.unsubscribeDevicePermissionsSubscription?.();\n      this.unsubscribeDevicePermissionsSubscription = undefined;\n      this.unsubscribeListDevicesSubscription?.();\n      this.unsubscribeListDevicesSubscription = undefined;\n      this.inputDevices.clear();\n      clearInterval(this.intervalId);\n      this.intervalId = undefined;\n      clearTimeout(this.timeoutId);\n      this.timeoutId = undefined;\n    };\n    this.scheduleOne = timeout => {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = setTimeout(() => {\n        this.run().catch(err => {\n          this.logger('warn', 'Failed to report stats', err);\n        });\n      }, timeout);\n    };\n    this.sfuClient = sfuClient;\n    this.options = options;\n    this.subscriber = subscriber;\n    this.publisher = publisher;\n    this.microphone = microphone;\n    this.camera = camera;\n    this.state = state;\n    this.unifiedSessionId = unifiedSessionId;\n    const {\n      sdk,\n      browser\n    } = clientDetails;\n    this.sdkName = getSdkName(sdk);\n    this.sdkVersion = getSdkVersion(sdk);\n    // use the WebRTC version if set by the SDK (React Native) otherwise,\n    // use the browser version as a fallback\n    const webRTCInfo = getWebRTCInfo();\n    this.webRTCVersion = webRTCInfo?.version || `${browser?.name || ''}-${browser?.version || ''}` || 'N/A';\n  }\n}\nconst traceRTCPeerConnection = (pc, trace) => {\n  pc.addEventListener('icecandidate', e => {\n    trace('onicecandidate', e.candidate);\n  });\n  pc.addEventListener('track', e => {\n    const streams = e.streams.map(stream => `stream:${stream.id}`);\n    trace('ontrack', `${e.track.kind}:${e.track.id} ${streams}`);\n  });\n  pc.addEventListener('signalingstatechange', () => {\n    trace('signalingstatechange', pc.signalingState);\n  });\n  pc.addEventListener('iceconnectionstatechange', () => {\n    trace('iceconnectionstatechange', pc.iceConnectionState);\n  });\n  pc.addEventListener('icegatheringstatechange', () => {\n    trace('icegatheringstatechange', pc.iceGatheringState);\n  });\n  pc.addEventListener('connectionstatechange', () => {\n    trace('connectionstatechange', pc.connectionState);\n  });\n  pc.addEventListener('negotiationneeded', () => {\n    trace('negotiationneeded', undefined);\n  });\n  pc.addEventListener('datachannel', ({\n    channel\n  }) => {\n    trace('datachannel', [channel.id, channel.label]);\n  });\n  const origClose = pc.close;\n  pc.close = function tracedClose() {\n    trace('close', undefined);\n    return origClose.call(this);\n  };\n  for (const method of ['createOffer', 'createAnswer', 'setLocalDescription', 'setRemoteDescription', 'addIceCandidate']) {\n    const original = pc[method];\n    if (!original) continue;\n    // @ts-expect-error we don't use deprecated APIs\n    pc[method] = async function tracedMethod(...args) {\n      try {\n        trace(method, args);\n        // @ts-expect-error improper types\n        const result = await original.apply(this, args);\n        trace(`${method}OnSuccess`, result);\n        return result;\n      } catch (err) {\n        trace(`${method}OnFailure`, err.toString());\n        throw err;\n      }\n    };\n  }\n};\n\n/**\n * StatsTracer is a class that collects and processes WebRTC stats.\n * It is used to track the performance of the WebRTC connection\n * and to provide information about the media streams.\n * It is used by both the Publisher and Subscriber classes.\n *\n * @internal\n */\nclass StatsTracer {\n  /**\n   * Creates a new StatsTracer instance.\n   */\n  constructor(pc, peerType, trackIdToTrackType) {\n    this.previousStats = {};\n    this.frameTimeHistory = [];\n    this.fpsHistory = [];\n    /**\n     * Get the stats from the RTCPeerConnection.\n     * When called, it will return the stats for the current connection.\n     * It will also return the delta between the current stats and the previous stats.\n     * This is used to track the performance of the connection.\n     *\n     * @internal\n     */\n    this.get = async () => {\n      const stats = await this.pc.getStats();\n      const currentStats = toObject(stats);\n      const performanceStats = this.withOverrides(this.peerType === PeerType.SUBSCRIBER ? this.getDecodeStats(currentStats) : this.getEncodeStats(currentStats));\n      const delta = deltaCompression(this.previousStats, currentStats);\n      // store the current data for the next iteration\n      this.previousStats = currentStats;\n      this.frameTimeHistory = this.frameTimeHistory.slice(-2);\n      this.fpsHistory = this.fpsHistory.slice(-2);\n      return {\n        performanceStats,\n        delta,\n        stats\n      };\n    };\n    /**\n     * Collects encode stats from the RTCPeerConnection.\n     */\n    this.getEncodeStats = currentStats => {\n      const encodeStats = [];\n      for (const rtp of Object.values(currentStats)) {\n        if (rtp.type !== 'outbound-rtp') continue;\n        const {\n          codecId,\n          framesSent = 0,\n          kind,\n          id,\n          totalEncodeTime = 0,\n          framesPerSecond = 0,\n          frameHeight = 0,\n          frameWidth = 0,\n          targetBitrate = 0,\n          mediaSourceId\n        } = rtp;\n        if (kind === 'audio' || !this.previousStats[id]) continue;\n        const prevRtp = this.previousStats[id];\n        const deltaTotalEncodeTime = totalEncodeTime - (prevRtp.totalEncodeTime || 0);\n        const deltaFramesSent = framesSent - (prevRtp.framesSent || 0);\n        const framesEncodeTime = deltaFramesSent > 0 ? deltaTotalEncodeTime / deltaFramesSent * 1000 : 0;\n        this.frameTimeHistory.push(framesEncodeTime);\n        this.fpsHistory.push(framesPerSecond);\n        let trackType = TrackType.VIDEO;\n        if (mediaSourceId && currentStats[mediaSourceId]) {\n          const mediaSource = currentStats[mediaSourceId];\n          trackType = this.trackIdToTrackType.get(mediaSource.trackIdentifier) || trackType;\n        }\n        encodeStats.push({\n          trackType,\n          codec: getCodecFromStats(currentStats, codecId),\n          avgFrameTimeMs: average(this.frameTimeHistory),\n          avgFps: average(this.fpsHistory),\n          targetBitrate: Math.round(targetBitrate),\n          videoDimension: {\n            width: frameWidth,\n            height: frameHeight\n          }\n        });\n      }\n      return encodeStats;\n    };\n    /**\n     * Collects decode stats from the RTCPeerConnection.\n     */\n    this.getDecodeStats = currentStats => {\n      let rtp = undefined;\n      let max = 0;\n      for (const item of Object.values(currentStats)) {\n        if (item.type !== 'inbound-rtp') continue;\n        const rtpItem = item;\n        const {\n          kind,\n          frameWidth = 0,\n          frameHeight = 0\n        } = rtpItem;\n        const area = frameWidth * frameHeight;\n        if (kind === 'video' && area > max) {\n          rtp = rtpItem;\n          max = area;\n        }\n      }\n      if (!rtp || !this.previousStats[rtp.id]) return [];\n      const prevRtp = this.previousStats[rtp.id];\n      const {\n        framesDecoded = 0,\n        framesPerSecond = 0,\n        totalDecodeTime = 0,\n        trackIdentifier\n      } = rtp;\n      const deltaTotalDecodeTime = totalDecodeTime - (prevRtp.totalDecodeTime || 0);\n      const deltaFramesDecoded = framesDecoded - (prevRtp.framesDecoded || 0);\n      const framesDecodeTime = deltaFramesDecoded > 0 ? deltaTotalDecodeTime / deltaFramesDecoded * 1000 : 0;\n      this.frameTimeHistory.push(framesDecodeTime);\n      this.fpsHistory.push(framesPerSecond);\n      const trackType = this.trackIdToTrackType.get(trackIdentifier) || TrackType.VIDEO;\n      return [PerformanceStats.create({\n        trackType,\n        codec: getCodecFromStats(currentStats, rtp.codecId),\n        avgFrameTimeMs: average(this.frameTimeHistory),\n        avgFps: average(this.fpsHistory),\n        videoDimension: {\n          width: rtp.frameWidth,\n          height: rtp.frameHeight\n        }\n      })];\n    };\n    /**\n     * Applies cost overrides to the performance stats.\n     * This is used to override the default encode/decode times with custom values.\n     * This is useful for testing and debugging purposes, and it shouldn't be used in production.\n     */\n    this.withOverrides = performanceStats => {\n      if (this.costOverrides) {\n        for (const s of performanceStats) {\n          const override = this.costOverrides.get(s.trackType);\n          if (override !== undefined) {\n            // override the average encode/decode time with the provided cost.\n            // format: [override].[original-frame-time]\n            s.avgFrameTimeMs = override + (s.avgFrameTimeMs || 0) / 1000;\n          }\n        }\n      }\n      return performanceStats;\n    };\n    /**\n     * Set the encode/decode cost for a specific track type.\n     * This is used to override the default encode/decode times with custom values.\n     * This is useful for testing and debugging purposes, and it shouldn't be used in production.\n     *\n     * @internal\n     */\n    this.setCost = (cost, trackType = TrackType.VIDEO) => {\n      if (!this.costOverrides) this.costOverrides = new Map();\n      this.costOverrides.set(trackType, cost);\n    };\n    this.pc = pc;\n    this.peerType = peerType;\n    this.trackIdToTrackType = trackIdToTrackType;\n  }\n}\n/**\n * Convert the stat report to an object.\n *\n * @param report the stat report to convert.\n */\nconst toObject = report => {\n  const obj = {};\n  report.forEach((v, k) => {\n    obj[k] = v;\n  });\n  return obj;\n};\n/**\n * Apply delta compression to the stats report.\n * Reduces size by ~90%.\n * To reduce further, report keys could be compressed.\n */\nconst deltaCompression = (oldStats, newStats) => {\n  newStats = JSON.parse(JSON.stringify(newStats));\n  for (const [id, report] of Object.entries(newStats)) {\n    delete report.id;\n    if (!oldStats[id]) continue;\n    for (const [name, value] of Object.entries(report)) {\n      if (value === oldStats[id][name]) {\n        delete report[name];\n      }\n    }\n  }\n  let timestamp = -Infinity;\n  const values = Object.values(newStats);\n  for (const report of values) {\n    if (report.timestamp > timestamp) {\n      timestamp = report.timestamp;\n    }\n  }\n  for (const report of values) {\n    if (report.timestamp === timestamp) {\n      report.timestamp = 0;\n    }\n  }\n  newStats.timestamp = timestamp;\n  return newStats;\n};\n/**\n * Calculates an average value.\n */\nconst average = arr => arr.reduce((a, b) => a + b, 0) / arr.length;\n/**\n * Create a Codec object from the codec stats.\n *\n * @param stats the stats report.\n * @param codecId the codec ID to look for.\n */\nconst getCodecFromStats = (stats, codecId) => {\n  if (!codecId || !stats[codecId]) return;\n  const codecStats = stats[codecId];\n  return Codec.create({\n    name: codecStats.mimeType.split('/').pop(),\n    // video/av1 -> av1\n    clockRate: codecStats.clockRate,\n    payloadType: codecStats.payloadType,\n    fmtp: codecStats.sdpFmtpLine\n  });\n};\n\n/**\n * A base class for the `Publisher` and `Subscriber` classes.\n * @internal\n */\nclass BasePeerConnection {\n  /**\n   * Constructs a new `BasePeerConnection` instance.\n   */\n  constructor(peerType, {\n    sfuClient,\n    connectionConfig,\n    state,\n    dispatcher,\n    onUnrecoverableError,\n    logTag,\n    enableTracing\n  }) {\n    this.isIceRestarting = false;\n    this.isDisposed = false;\n    this.trackIdToTrackType = new Map();\n    this.subscriptions = [];\n    /**\n     * Handles events synchronously.\n     * Consecutive events are queued and executed one after the other.\n     */\n    this.on = (event, fn) => {\n      this.subscriptions.push(this.dispatcher.on(event, e => {\n        withoutConcurrency(`pc.${event}`, async () => fn(e)).catch(err => {\n          if (this.isDisposed) return;\n          this.logger('warn', `Error handling ${event}`, err);\n        });\n      }));\n    };\n    /**\n     * Appends the trickled ICE candidates to the `RTCPeerConnection`.\n     */\n    this.addTrickledIceCandidates = () => {\n      const {\n        iceTrickleBuffer\n      } = this.sfuClient;\n      const observable = this.peerType === PeerType.SUBSCRIBER ? iceTrickleBuffer.subscriberCandidates : iceTrickleBuffer.publisherCandidates;\n      this.unsubscribeIceTrickle?.();\n      this.unsubscribeIceTrickle = createSafeAsyncSubscription(observable, async candidate => {\n        return this.pc.addIceCandidate(candidate).catch(e => {\n          if (this.isDisposed) return;\n          this.logger('warn', `ICE candidate error`, e, candidate);\n        });\n      });\n    };\n    /**\n     * Sets the SFU client to use.\n     *\n     * @param sfuClient the SFU client to use.\n     */\n    this.setSfuClient = sfuClient => {\n      this.sfuClient = sfuClient;\n    };\n    /**\n     * Returns the result of the `RTCPeerConnection.getStats()` method\n     * @param selector an optional `MediaStreamTrack` to get the stats for.\n     */\n    this.getStats = selector => {\n      return this.pc.getStats(selector);\n    };\n    /**\n     * Maps the given track ID to the corresponding track type.\n     */\n    this.getTrackType = trackId => {\n      return this.trackIdToTrackType.get(trackId);\n    };\n    /**\n     * Handles the ICECandidate event and\n     * Initiates an ICE Trickle process with the SFU.\n     */\n    this.onIceCandidate = e => {\n      const {\n        candidate\n      } = e;\n      if (!candidate) {\n        this.logger('debug', 'null ice candidate');\n        return;\n      }\n      const iceCandidate = this.asJSON(candidate);\n      this.sfuClient.iceTrickle({\n        peerType: this.peerType,\n        iceCandidate\n      }).catch(err => {\n        if (this.isDisposed) return;\n        this.logger('warn', `ICETrickle failed`, err);\n      });\n    };\n    /**\n     * Converts the ICE candidate to a JSON string.\n     */\n    this.asJSON = candidate => {\n      if (!candidate.usernameFragment) {\n        // react-native-webrtc doesn't include usernameFragment in the candidate\n        const segments = candidate.candidate.split(' ');\n        const ufragIndex = segments.findIndex(s => s === 'ufrag') + 1;\n        const usernameFragment = segments[ufragIndex];\n        return JSON.stringify({\n          ...candidate,\n          usernameFragment\n        });\n      }\n      return JSON.stringify(candidate.toJSON());\n    };\n    /**\n     * Handles the ConnectionStateChange event.\n     */\n    this.onConnectionStateChange = async () => {\n      const state = this.pc.connectionState;\n      this.logger('debug', `Connection state changed`, state);\n      if (!this.tracer) return;\n      if (state === 'connected' || state === 'failed') {\n        try {\n          const stats = await this.stats.get();\n          this.tracer.trace('getstats', stats.delta);\n        } catch (err) {\n          this.tracer.trace('getstatsOnFailure', err.toString());\n        }\n      }\n    };\n    /**\n     * Handles the ICE connection state change event.\n     */\n    this.onIceConnectionStateChange = () => {\n      const state = this.pc.iceConnectionState;\n      this.logger('debug', `ICE connection state changed`, state);\n      if (this.state.callingState === CallingState.OFFLINE) return;\n      if (this.state.callingState === CallingState.RECONNECTING) return;\n      // do nothing when ICE is restarting\n      if (this.isIceRestarting) return;\n      if (state === 'failed' || state === 'disconnected') {\n        this.logger('debug', `Attempting to restart ICE`);\n        this.restartIce().catch(e => {\n          if (this.isDisposed) return;\n          const reason = `ICE restart failed`;\n          this.logger('error', reason, e);\n          this.onUnrecoverableError?.(`${reason}: ${e}`);\n        });\n      }\n    };\n    /**\n     * Handles the ICE candidate error event.\n     */\n    this.onIceCandidateError = e => {\n      const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n      const iceState = this.pc.iceConnectionState;\n      const logLevel = iceState === 'connected' || iceState === 'checking' ? 'debug' : 'warn';\n      this.logger(logLevel, `ICE Candidate error`, errorMessage);\n    };\n    /**\n     * Handles the ICE gathering state change event.\n     */\n    this.onIceGatherChange = () => {\n      this.logger('debug', `ICE Gathering State`, this.pc.iceGatheringState);\n    };\n    /**\n     * Handles the signaling state change event.\n     */\n    this.onSignalingChange = () => {\n      this.logger('debug', `Signaling state changed`, this.pc.signalingState);\n    };\n    this.peerType = peerType;\n    this.sfuClient = sfuClient;\n    this.state = state;\n    this.dispatcher = dispatcher;\n    this.onUnrecoverableError = onUnrecoverableError;\n    this.logger = getLogger([peerType === PeerType.SUBSCRIBER ? 'Subscriber' : 'Publisher', logTag]);\n    this.pc = new RTCPeerConnection(connectionConfig);\n    this.pc.addEventListener('icecandidate', this.onIceCandidate);\n    this.pc.addEventListener('icecandidateerror', this.onIceCandidateError);\n    this.pc.addEventListener('iceconnectionstatechange', this.onIceConnectionStateChange);\n    this.pc.addEventListener('icegatheringstatechange', this.onIceGatherChange);\n    this.pc.addEventListener('signalingstatechange', this.onSignalingChange);\n    this.pc.addEventListener('connectionstatechange', this.onConnectionStateChange);\n    this.stats = new StatsTracer(this.pc, peerType, this.trackIdToTrackType);\n    if (enableTracing) {\n      const tag = `${logTag}-${peerType === PeerType.SUBSCRIBER ? 'sub' : 'pub'}-${sfuClient.edgeName}`;\n      this.tracer = new Tracer(tag);\n      this.tracer.trace('create', connectionConfig);\n      traceRTCPeerConnection(this.pc, this.tracer.trace);\n    }\n  }\n  /**\n   * Disposes the `RTCPeerConnection` instance.\n   */\n  dispose() {\n    this.onUnrecoverableError = undefined;\n    this.isDisposed = true;\n    this.detachEventHandlers();\n    this.pc.close();\n    this.tracer?.dispose();\n  }\n  /**\n   * Detaches the event handlers from the `RTCPeerConnection`.\n   */\n  detachEventHandlers() {\n    this.pc.removeEventListener('icecandidate', this.onIceCandidate);\n    this.pc.removeEventListener('icecandidateerror', this.onIceCandidateError);\n    this.pc.removeEventListener('signalingstatechange', this.onSignalingChange);\n    this.pc.removeEventListener('iceconnectionstatechange', this.onIceConnectionStateChange);\n    this.pc.removeEventListener('icegatheringstatechange', this.onIceGatherChange);\n    this.unsubscribeIceTrickle?.();\n    this.subscriptions.forEach(unsubscribe => unsubscribe());\n  }\n}\nclass TransceiverCache {\n  constructor() {\n    this.cache = [];\n    this.layers = [];\n    /**\n     * An array maintaining the order how transceivers were added to the peer connection.\n     * This is needed because some browsers (Firefox) don't reliably report\n     * trackId and `mid` parameters.\n     */\n    this.transceiverOrder = [];\n    /**\n     * Adds a transceiver to the cache.\n     */\n    this.add = (publishOption, transceiver) => {\n      this.cache.push({\n        publishOption,\n        transceiver\n      });\n      this.transceiverOrder.push(transceiver);\n    };\n    /**\n     * Gets the transceiver for the given publish option.\n     */\n    this.get = publishOption => {\n      return this.findTransceiver(publishOption)?.transceiver;\n    };\n    /**\n     * Checks if the cache has the given publish option.\n     */\n    this.has = publishOption => {\n      return !!this.get(publishOption);\n    };\n    /**\n     * Finds the first transceiver that satisfies the given predicate.\n     */\n    this.find = predicate => {\n      return this.cache.find(predicate);\n    };\n    /**\n     * Provides all the items in the cache.\n     */\n    this.items = () => {\n      return this.cache;\n    };\n    /**\n     * Init index of the transceiver in the cache.\n     */\n    this.indexOf = transceiver => {\n      return this.transceiverOrder.indexOf(transceiver);\n    };\n    /**\n     * Gets cached video layers for the given track.\n     */\n    this.getLayers = publishOption => {\n      const entry = this.layers.find(item => item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n      return entry?.layers;\n    };\n    /**\n     * Sets the video layers for the given track.\n     */\n    this.setLayers = (publishOption, layers = []) => {\n      const entry = this.findLayer(publishOption);\n      if (entry) {\n        entry.layers = layers;\n      } else {\n        this.layers.push({\n          publishOption,\n          layers\n        });\n      }\n    };\n    this.findTransceiver = publishOption => {\n      return this.cache.find(item => item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n    };\n    this.findLayer = publishOption => {\n      return this.layers.find(item => item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n    };\n  }\n}\nconst ensureExhausted = (x, message) => {\n  getLogger(['helpers'])('warn', message, x);\n};\nconst trackTypeToParticipantStreamKey = trackType => {\n  switch (trackType) {\n    case TrackType.SCREEN_SHARE:\n      return 'screenShareStream';\n    case TrackType.SCREEN_SHARE_AUDIO:\n      return 'screenShareAudioStream';\n    case TrackType.VIDEO:\n      return 'videoStream';\n    case TrackType.AUDIO:\n      return 'audioStream';\n    case TrackType.UNSPECIFIED:\n      throw new Error('Track type is unspecified');\n    default:\n      ensureExhausted(trackType, 'Unknown track type');\n  }\n};\nconst muteTypeToTrackType = muteType => {\n  switch (muteType) {\n    case 'audio':\n      return TrackType.AUDIO;\n    case 'video':\n      return TrackType.VIDEO;\n    case 'screenshare':\n      return TrackType.SCREEN_SHARE;\n    case 'screenshare_audio':\n      return TrackType.SCREEN_SHARE_AUDIO;\n    default:\n      ensureExhausted(muteType, 'Unknown mute type');\n  }\n};\nconst toTrackType = trackType => {\n  switch (trackType) {\n    case 'TRACK_TYPE_AUDIO':\n      return TrackType.AUDIO;\n    case 'TRACK_TYPE_VIDEO':\n      return TrackType.VIDEO;\n    case 'TRACK_TYPE_SCREEN_SHARE':\n      return TrackType.SCREEN_SHARE;\n    case 'TRACK_TYPE_SCREEN_SHARE_AUDIO':\n      return TrackType.SCREEN_SHARE_AUDIO;\n    default:\n      return undefined;\n  }\n};\nconst isAudioTrackType = trackType => trackType === TrackType.AUDIO || trackType === TrackType.SCREEN_SHARE_AUDIO;\nconst defaultBitratePerRid = {\n  q: 300000,\n  h: 750000,\n  f: 1250000\n};\n/**\n * In SVC, we need to send only one video encoding (layer).\n * this layer will have the additional spatial and temporal layers\n * defined via the scalabilityMode property.\n *\n * @param layers the layers to process.\n */\nconst toSvcEncodings = layers => {\n  if (!layers) return;\n  // we take the highest quality layer, and we assign it to `q` encoder.\n  const withRid = rid => l => l.rid === rid;\n  const highestLayer = layers.find(withRid('f')) || layers.find(withRid('h')) || layers.find(withRid('q'));\n  return [{\n    ...highestLayer,\n    rid: 'q'\n  }];\n};\n/**\n * Converts the rid to a video quality.\n */\nconst ridToVideoQuality = rid => {\n  return rid === 'q' ? VideoQuality.LOW_UNSPECIFIED : rid === 'h' ? VideoQuality.MID : VideoQuality.HIGH; // default to HIGH\n};\n/**\n * Converts the given video layers to SFU video layers.\n */\nconst toVideoLayers = (layers = []) => {\n  return layers.map(layer => ({\n    rid: layer.rid || '',\n    bitrate: layer.maxBitrate || 0,\n    fps: layer.maxFramerate || 0,\n    quality: ridToVideoQuality(layer.rid || ''),\n    videoDimension: {\n      width: layer.width,\n      height: layer.height\n    }\n  }));\n};\n/**\n * Converts the spatial and temporal layers to a scalability mode.\n */\nconst toScalabilityMode = (spatialLayers, temporalLayers) => `L${spatialLayers}T${temporalLayers}${spatialLayers > 1 ? '_KEY' : ''}`;\n/**\n * Determines the most optimal video layers for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param publishOption the publish options for the track.\n */\nconst computeVideoLayers = (videoTrack, publishOption) => {\n  if (isAudioTrackType(publishOption.trackType)) return;\n  const optimalVideoLayers = [];\n  const settings = videoTrack.getSettings();\n  const {\n    width = 0,\n    height = 0\n  } = settings;\n  const {\n    bitrate,\n    codec,\n    fps,\n    maxSpatialLayers = 3,\n    maxTemporalLayers = 3,\n    videoDimension = {\n      width: 1280,\n      height: 720\n    }\n  } = publishOption;\n  const maxBitrate = getComputedMaxBitrate(videoDimension, width, height, bitrate);\n  let downscaleFactor = 1;\n  let bitrateFactor = 1;\n  const svcCodec = isSvcCodec(codec?.name);\n  for (const rid of ['f', 'h', 'q'].slice(0, maxSpatialLayers)) {\n    const layer = {\n      active: true,\n      rid,\n      width: Math.round(width / downscaleFactor),\n      height: Math.round(height / downscaleFactor),\n      maxBitrate: Math.round(maxBitrate / bitrateFactor) || defaultBitratePerRid[rid],\n      maxFramerate: fps\n    };\n    if (svcCodec) {\n      // for SVC codecs, we need to set the scalability mode, and the\n      // codec will handle the rest (layers, temporal layers, etc.)\n      layer.scalabilityMode = toScalabilityMode(maxSpatialLayers, maxTemporalLayers);\n    } else {\n      // for non-SVC codecs, we need to downscale proportionally (simulcast)\n      layer.scaleResolutionDownBy = downscaleFactor;\n    }\n    downscaleFactor *= 2;\n    bitrateFactor *= 2;\n    // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n    // when deciding which layer to disable when CPU or bandwidth is constrained.\n    // Encodings should be ordered in increasing spatial resolution order.\n    optimalVideoLayers.unshift(layer);\n  }\n  // for simplicity, we start with all layers enabled, then this function\n  // will clear/reassign the layers that are not needed\n  return withSimulcastConstraints(settings, optimalVideoLayers);\n};\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n * @param bitrate the target bitrate.\n */\nconst getComputedMaxBitrate = (targetResolution, currentWidth, currentHeight, bitrate) => {\n  // if the current resolution is lower than the target resolution,\n  // we want to proportionally reduce the target bitrate\n  const {\n    width: targetWidth,\n    height: targetHeight\n  } = targetResolution;\n  if (currentWidth < targetWidth || currentHeight < targetHeight) {\n    const currentPixels = currentWidth * currentHeight;\n    const targetPixels = targetWidth * targetHeight;\n    const reductionFactor = currentPixels / targetPixels;\n    return Math.round(bitrate * reductionFactor);\n  }\n  return bitrate;\n};\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */\nconst withSimulcastConstraints = (settings, optimalVideoLayers) => {\n  let layers;\n  const size = Math.max(settings.width || 0, settings.height || 0);\n  if (size <= 320) {\n    // provide only one layer 320x240 (q), the one with the highest quality\n    layers = optimalVideoLayers.filter(layer => layer.rid === 'f');\n  } else if (size <= 640) {\n    // provide two layers, 160x120 (q) and 640x480 (h)\n    layers = optimalVideoLayers.filter(layer => layer.rid !== 'h');\n  } else {\n    // provide three layers for sizes > 640x480\n    layers = optimalVideoLayers;\n  }\n  const ridMapping = ['q', 'h', 'f'];\n  return layers.map((layer, index) => ({\n    ...layer,\n    rid: ridMapping[index] // reassign rid\n  }));\n};\n\n/**\n * Extracts the mid from the transceiver or the SDP.\n *\n * @param transceiver the transceiver.\n * @param transceiverInitIndex the index of the transceiver in the transceiver's init array.\n * @param sdp the SDP.\n */\nconst extractMid = (transceiver, transceiverInitIndex, sdp) => {\n  if (transceiver.mid) return transceiver.mid;\n  if (!sdp) return String(transceiverInitIndex);\n  const track = transceiver.sender.track;\n  const parsedSdp = parse(sdp);\n  const media = parsedSdp.media.find(m => {\n    return m.type === track.kind && (\n    // if `msid` is not present, we assume that the track is the first one\n    m.msid?.includes(track.id) ?? true);\n  });\n  if (typeof media?.mid !== 'undefined') return String(media.mid);\n  if (transceiverInitIndex < 0) return '';\n  return String(transceiverInitIndex);\n};\n\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n *\n * @internal\n */\nclass Publisher extends BasePeerConnection {\n  /**\n   * Constructs a new `Publisher` instance.\n   */\n  constructor({\n    publishOptions,\n    ...baseOptions\n  }) {\n    super(PeerType.PUBLISHER_UNSPECIFIED, baseOptions);\n    this.transceiverCache = new TransceiverCache();\n    this.clonedTracks = new Set();\n    /**\n     * Starts publishing the given track of the given media stream.\n     *\n     * Consecutive calls to this method will replace the stream.\n     * The previous stream will be stopped.\n     *\n     * @param track the track to publish.\n     * @param trackType the track type to publish.\n     */\n    this.publish = async (track, trackType) => {\n      if (!this.publishOptions.some(o => o.trackType === trackType)) {\n        throw new Error(`No publish options found for ${TrackType[trackType]}`);\n      }\n      for (const publishOption of this.publishOptions) {\n        if (publishOption.trackType !== trackType) continue;\n        // create a clone of the track as otherwise the same trackId will\n        // appear in the SDP in multiple transceivers\n        const trackToPublish = this.cloneTrack(track);\n        const transceiver = this.transceiverCache.get(publishOption);\n        if (!transceiver) {\n          await this.addTransceiver(trackToPublish, publishOption);\n        } else {\n          const previousTrack = transceiver.sender.track;\n          await this.updateTransceiver(transceiver, trackToPublish, trackType);\n          if (!isReactNative()) {\n            this.stopTrack(previousTrack);\n          }\n        }\n      }\n    };\n    /**\n     * Adds a new transceiver carrying the given track to the peer connection.\n     */\n    this.addTransceiver = async (track, publishOption) => {\n      const videoEncodings = computeVideoLayers(track, publishOption);\n      const sendEncodings = isSvcCodec(publishOption.codec?.name) ? toSvcEncodings(videoEncodings) : videoEncodings;\n      const transceiver = this.pc.addTransceiver(track, {\n        direction: 'sendonly',\n        sendEncodings\n      });\n      const trackType = publishOption.trackType;\n      this.logger('debug', `Added ${TrackType[trackType]} transceiver`);\n      this.transceiverCache.add(publishOption, transceiver);\n      this.trackIdToTrackType.set(track.id, trackType);\n      await this.negotiate();\n    };\n    /**\n     * Updates the transceiver with the given track and track type.\n     */\n    this.updateTransceiver = async (transceiver, track, trackType) => {\n      const sender = transceiver.sender;\n      if (sender.track) this.trackIdToTrackType.delete(sender.track.id);\n      await sender.replaceTrack(track);\n      if (track) this.trackIdToTrackType.set(track.id, trackType);\n    };\n    /**\n     * Synchronizes the current Publisher state with the provided publish options.\n     */\n    this.syncPublishOptions = async () => {\n      // enable publishing with new options -> [av1, vp9]\n      for (const publishOption of this.publishOptions) {\n        const {\n          trackType\n        } = publishOption;\n        if (!this.isPublishing(trackType)) continue;\n        if (this.transceiverCache.has(publishOption)) continue;\n        const item = this.transceiverCache.find(i => !!i.transceiver.sender.track && i.publishOption.trackType === trackType);\n        if (!item || !item.transceiver) continue;\n        // take the track from the existing transceiver for the same track type,\n        // clone it and publish it with the new publish options\n        const track = this.cloneTrack(item.transceiver.sender.track);\n        await this.addTransceiver(track, publishOption);\n      }\n      // stop publishing with options not required anymore -> [vp9]\n      for (const item of this.transceiverCache.items()) {\n        const {\n          publishOption,\n          transceiver\n        } = item;\n        const hasPublishOption = this.publishOptions.some(option => option.id === publishOption.id && option.trackType === publishOption.trackType);\n        if (hasPublishOption) continue;\n        // it is safe to stop the track here, it is a clone\n        this.stopTrack(transceiver.sender.track);\n        await this.updateTransceiver(transceiver, null, publishOption.trackType);\n      }\n    };\n    /**\n     * Returns true if the given track type is currently being published to the SFU.\n     *\n     * @param trackType the track type to check.\n     */\n    this.isPublishing = trackType => {\n      for (const item of this.transceiverCache.items()) {\n        if (item.publishOption.trackType !== trackType) continue;\n        const track = item.transceiver.sender.track;\n        if (!track) continue;\n        if (track.readyState === 'live' && track.enabled) return true;\n      }\n      return false;\n    };\n    /**\n     * Stops the cloned track that is being published to the SFU.\n     */\n    this.stopTracks = (...trackTypes) => {\n      for (const item of this.transceiverCache.items()) {\n        const {\n          publishOption,\n          transceiver\n        } = item;\n        if (!trackTypes.includes(publishOption.trackType)) continue;\n        this.stopTrack(transceiver.sender.track);\n      }\n    };\n    /**\n     * Stops all the cloned tracks that are being published to the SFU.\n     */\n    this.stopAllTracks = () => {\n      for (const {\n        transceiver\n      } of this.transceiverCache.items()) {\n        this.stopTrack(transceiver.sender.track);\n      }\n      for (const track of this.clonedTracks) {\n        this.stopTrack(track);\n      }\n    };\n    this.changePublishQuality = async videoSender => {\n      const {\n        trackType,\n        layers,\n        publishOptionId\n      } = videoSender;\n      const enabledLayers = layers.filter(l => l.active);\n      const tag = 'Update publish quality:';\n      this.logger('info', `${tag} requested layers by SFU:`, enabledLayers);\n      const transceiverId = this.transceiverCache.find(t => t.publishOption.id === publishOptionId && t.publishOption.trackType === trackType);\n      const sender = transceiverId?.transceiver.sender;\n      if (!sender) {\n        return this.logger('warn', `${tag} no video sender found.`);\n      }\n      const params = sender.getParameters();\n      if (params.encodings.length === 0) {\n        return this.logger('warn', `${tag} there are no encodings set.`);\n      }\n      const codecInUse = transceiverId?.publishOption.codec?.name;\n      const usesSvcCodec = codecInUse && isSvcCodec(codecInUse);\n      let changed = false;\n      for (const encoder of params.encodings) {\n        const layer = usesSvcCodec ?\n        // for SVC, we only have one layer (q) and often rid is omitted\n        enabledLayers[0] :\n        // for non-SVC, we need to find the layer by rid (simulcast)\n        enabledLayers.find(l => l.name === encoder.rid) ?? (params.encodings.length === 1 ? enabledLayers[0] : undefined);\n        // flip 'active' flag only when necessary\n        const shouldActivate = !!layer?.active;\n        if (shouldActivate !== encoder.active) {\n          encoder.active = shouldActivate;\n          changed = true;\n        }\n        // skip the rest of the settings if the layer is disabled or not found\n        if (!layer) continue;\n        const {\n          maxFramerate,\n          scaleResolutionDownBy,\n          maxBitrate,\n          scalabilityMode\n        } = layer;\n        if (scaleResolutionDownBy >= 1 && scaleResolutionDownBy !== encoder.scaleResolutionDownBy) {\n          encoder.scaleResolutionDownBy = scaleResolutionDownBy;\n          changed = true;\n        }\n        if (maxBitrate > 0 && maxBitrate !== encoder.maxBitrate) {\n          encoder.maxBitrate = maxBitrate;\n          changed = true;\n        }\n        if (maxFramerate > 0 && maxFramerate !== encoder.maxFramerate) {\n          encoder.maxFramerate = maxFramerate;\n          changed = true;\n        }\n        // @ts-expect-error scalabilityMode is not in the typedefs yet\n        if (scalabilityMode && scalabilityMode !== encoder.scalabilityMode) {\n          // @ts-expect-error scalabilityMode is not in the typedefs yet\n          encoder.scalabilityMode = scalabilityMode;\n          changed = true;\n        }\n      }\n      const activeEncoders = params.encodings.filter(e => e.active);\n      if (!changed) {\n        return this.logger('info', `${tag} no change:`, activeEncoders);\n      }\n      await sender.setParameters(params);\n      this.logger('info', `${tag} enabled rids:`, activeEncoders);\n    };\n    /**\n     * Restarts the ICE connection and renegotiates with the SFU.\n     */\n    this.restartIce = async () => {\n      this.logger('debug', 'Restarting ICE connection');\n      const signalingState = this.pc.signalingState;\n      if (this.isIceRestarting || signalingState === 'have-local-offer') {\n        this.logger('debug', 'ICE restart is already in progress');\n        return;\n      }\n      await this.negotiate({\n        iceRestart: true\n      });\n    };\n    /**\n     * Initiates a new offer/answer exchange with the currently connected SFU.\n     *\n     * @param options the optional offer options to use.\n     */\n    this.negotiate = async options => {\n      return withoutConcurrency('publisher.negotiate', async () => {\n        const offer = await this.pc.createOffer(options);\n        const tracks = this.getAnnouncedTracks(offer.sdp);\n        if (!tracks.length) throw new Error(`Can't negotiate without any tracks`);\n        try {\n          this.isIceRestarting = options?.iceRestart ?? false;\n          await this.pc.setLocalDescription(offer);\n          const {\n            sdp = ''\n          } = offer;\n          const {\n            response\n          } = await this.sfuClient.setPublisher({\n            sdp,\n            tracks\n          });\n          if (response.error) throw new Error(response.error.message);\n          const {\n            sdp: answerSdp\n          } = response;\n          await this.pc.setRemoteDescription({\n            type: 'answer',\n            sdp: answerSdp\n          });\n        } finally {\n          this.isIceRestarting = false;\n        }\n        this.addTrickledIceCandidates();\n      });\n    };\n    /**\n     * Returns a list of tracks that are currently being published.\n     */\n    this.getPublishedTracks = () => {\n      const tracks = [];\n      for (const {\n        transceiver\n      } of this.transceiverCache.items()) {\n        const track = transceiver.sender.track;\n        if (track && track.readyState === 'live') tracks.push(track);\n      }\n      return tracks;\n    };\n    /**\n     * Returns a list of tracks that are currently being published.\n     * @param sdp an optional SDP to extract the `mid` from.\n     */\n    this.getAnnouncedTracks = sdp => {\n      const trackInfos = [];\n      for (const bundle of this.transceiverCache.items()) {\n        const {\n          transceiver,\n          publishOption\n        } = bundle;\n        const track = transceiver.sender.track;\n        if (!track) continue;\n        trackInfos.push(this.toTrackInfo(transceiver, publishOption, sdp));\n      }\n      return trackInfos;\n    };\n    /**\n     * Returns a list of tracks that are currently being published.\n     * This method shall be used for the reconnection flow.\n     * There we shouldn't announce the tracks that have been stopped due to a codec switch.\n     */\n    this.getAnnouncedTracksForReconnect = () => {\n      const sdp = this.pc.localDescription?.sdp;\n      const trackInfos = [];\n      for (const publishOption of this.publishOptions) {\n        const transceiver = this.transceiverCache.get(publishOption);\n        if (!transceiver || !transceiver.sender.track) continue;\n        trackInfos.push(this.toTrackInfo(transceiver, publishOption, sdp));\n      }\n      return trackInfos;\n    };\n    /**\n     * Converts the given transceiver to a `TrackInfo` object.\n     */\n    this.toTrackInfo = (transceiver, publishOption, sdp) => {\n      const track = transceiver.sender.track;\n      const isTrackLive = track.readyState === 'live';\n      const layers = isTrackLive ? computeVideoLayers(track, publishOption) : this.transceiverCache.getLayers(publishOption);\n      this.transceiverCache.setLayers(publishOption, layers);\n      const isAudioTrack = isAudioTrackType(publishOption.trackType);\n      const isStereo = isAudioTrack && track.getSettings().channelCount === 2;\n      const transceiverIndex = this.transceiverCache.indexOf(transceiver);\n      const audioSettings = this.state.settings?.audio;\n      return {\n        trackId: track.id,\n        layers: toVideoLayers(layers),\n        trackType: publishOption.trackType,\n        mid: extractMid(transceiver, transceiverIndex, sdp),\n        stereo: isStereo,\n        dtx: isAudioTrack && !!audioSettings?.opus_dtx_enabled,\n        red: isAudioTrack && !!audioSettings?.redundant_coding_enabled,\n        muted: !isTrackLive,\n        codec: publishOption.codec,\n        publishOptionId: publishOption.id\n      };\n    };\n    this.cloneTrack = track => {\n      const clone = track.clone();\n      this.clonedTracks.add(clone);\n      return clone;\n    };\n    this.stopTrack = track => {\n      if (!track) return;\n      track.stop();\n      this.clonedTracks.delete(track);\n    };\n    this.publishOptions = publishOptions;\n    this.on('iceRestart', iceRestart => {\n      if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n      this.restartIce().catch(err => {\n        const reason = `ICE restart failed`;\n        this.logger('warn', reason, err);\n        this.onUnrecoverableError?.(`${reason}: ${err}`);\n      });\n    });\n    this.on('changePublishQuality', async event => {\n      for (const videoSender of event.videoSenders) {\n        await this.changePublishQuality(videoSender);\n      }\n    });\n    this.on('changePublishOptions', event => {\n      this.publishOptions = event.publishOptions;\n      return this.syncPublishOptions();\n    });\n  }\n  /**\n   * Disposes this Publisher instance.\n   */\n  dispose() {\n    super.dispose();\n    this.stopAllTracks();\n    this.clonedTracks.clear();\n  }\n}\n\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n *\n * @internal\n */\nclass Subscriber extends BasePeerConnection {\n  /**\n   * Constructs a new `Subscriber` instance.\n   */\n  constructor(opts) {\n    super(PeerType.SUBSCRIBER, opts);\n    /**\n     * Restarts the ICE connection and renegotiates with the SFU.\n     */\n    this.restartIce = async () => {\n      this.logger('debug', 'Restarting ICE connection');\n      if (this.pc.signalingState === 'have-remote-offer') {\n        this.logger('debug', 'ICE restart is already in progress');\n        return;\n      }\n      if (this.pc.connectionState === 'new') {\n        this.logger('debug', `ICE connection is not yet established, skipping restart.`);\n        return;\n      }\n      const previousIsIceRestarting = this.isIceRestarting;\n      try {\n        this.isIceRestarting = true;\n        await this.sfuClient.iceRestart({\n          peerType: PeerType.SUBSCRIBER\n        });\n      } catch (e) {\n        // restore the previous state, as our intent for restarting ICE failed\n        this.isIceRestarting = previousIsIceRestarting;\n        throw e;\n      }\n    };\n    this.handleOnTrack = e => {\n      const [primaryStream] = e.streams;\n      // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n      const [trackId, rawTrackType] = primaryStream.id.split(':');\n      const participantToUpdate = this.state.participants.find(p => p.trackLookupPrefix === trackId);\n      this.logger('debug', `[onTrack]: Got remote ${rawTrackType} track for userId: ${participantToUpdate?.userId}`, e.track.id, e.track);\n      const trackDebugInfo = `${participantToUpdate?.userId} ${rawTrackType}:${trackId}`;\n      e.track.addEventListener('mute', () => {\n        this.logger('info', `[onTrack]: Track muted: ${trackDebugInfo}`);\n      });\n      e.track.addEventListener('unmute', () => {\n        this.logger('info', `[onTrack]: Track unmuted: ${trackDebugInfo}`);\n      });\n      e.track.addEventListener('ended', () => {\n        this.logger('info', `[onTrack]: Track ended: ${trackDebugInfo}`);\n        this.state.removeOrphanedTrack(primaryStream.id);\n      });\n      const trackType = toTrackType(rawTrackType);\n      if (!trackType) {\n        return this.logger('error', `Unknown track type: ${rawTrackType}`);\n      }\n      this.trackIdToTrackType.set(e.track.id, trackType);\n      if (!participantToUpdate) {\n        this.logger('warn', `[onTrack]: Received track for unknown participant: ${trackId}`, e);\n        this.state.registerOrphanedTrack({\n          id: primaryStream.id,\n          trackLookupPrefix: trackId,\n          track: primaryStream,\n          trackType\n        });\n        return;\n      }\n      const streamKindProp = trackTypeToParticipantStreamKey(trackType);\n      if (!streamKindProp) {\n        this.logger('error', `Unknown track type: ${rawTrackType}`);\n        return;\n      }\n      // get the previous stream to dispose it later\n      // usually this happens during migration, when the stream is replaced\n      // with a new one but the old one is still in the state\n      const previousStream = participantToUpdate[streamKindProp];\n      // replace the previous stream with the new one, prevents flickering\n      this.state.updateParticipant(participantToUpdate.sessionId, {\n        [streamKindProp]: primaryStream\n      });\n      // now, dispose the previous stream if it exists\n      if (previousStream) {\n        this.logger('info', `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`);\n        previousStream.getTracks().forEach(t => {\n          t.stop();\n          previousStream.removeTrack(t);\n        });\n      }\n    };\n    this.negotiate = async subscriberOffer => {\n      await this.pc.setRemoteDescription({\n        type: 'offer',\n        sdp: subscriberOffer.sdp\n      });\n      this.addTrickledIceCandidates();\n      const answer = await this.pc.createAnswer();\n      await this.pc.setLocalDescription(answer);\n      await this.sfuClient.sendAnswer({\n        peerType: PeerType.SUBSCRIBER,\n        sdp: answer.sdp || ''\n      });\n      this.isIceRestarting = false;\n    };\n    this.pc.addEventListener('track', this.handleOnTrack);\n    this.on('subscriberOffer', async subscriberOffer => {\n      return this.negotiate(subscriberOffer).catch(err => {\n        this.logger('error', `Negotiation failed.`, err);\n      });\n    });\n  }\n  /**\n   * Detaches the event handlers from the `RTCPeerConnection`.\n   * This is useful when we want to replace the `RTCPeerConnection`\n   * instance with a new one (in case of migration).\n   */\n  detachEventHandlers() {\n    super.detachEventHandlers();\n    this.pc.removeEventListener('track', this.handleOnTrack);\n  }\n}\nconst createWebSocketSignalChannel = opts => {\n  const {\n    endpoint,\n    onMessage,\n    logTag\n  } = opts;\n  const logger = getLogger(['SfuClientWS', logTag]);\n  logger('debug', 'Creating signaling WS channel:', endpoint);\n  const ws = new WebSocket(endpoint);\n  ws.binaryType = 'arraybuffer'; // do we need this?\n  ws.addEventListener('error', e => {\n    logger('error', 'Signaling WS channel error', e);\n  });\n  ws.addEventListener('close', e => {\n    logger('info', 'Signaling WS channel is closed', e);\n  });\n  ws.addEventListener('open', e => {\n    logger('info', 'Signaling WS channel is open', e);\n  });\n  ws.addEventListener('message', e => {\n    try {\n      const message = e.data instanceof ArrayBuffer ? SfuEvent.fromBinary(new Uint8Array(e.data)) : SfuEvent.fromJsonString(e.data.toString());\n      onMessage(message);\n    } catch (err) {\n      logger('error', 'Failed to decode a message. Check whether the Proto models match.', {\n        event: e,\n        error: err\n      });\n    }\n  });\n  return ws;\n};\nconst toRtcConfiguration = config => {\n  return {\n    bundlePolicy: 'max-bundle',\n    iceServers: config.map(ice => ({\n      urls: ice.urls,\n      username: ice.username,\n      credential: ice.password\n    }))\n  };\n};\n\n/**\n * Saving a long-lived reference to a promise that can reject can be unsafe,\n * since rejecting the promise causes an unhandled rejection error (even if the\n * rejection is handled everywhere promise result is expected).\n *\n * To avoid that, we add both resolution and rejection handlers to the promise.\n * That way, the saved promise never rejects. A callback is provided as return\n * value to build a *new* promise, that resolves and rejects along with\n * the original promise.\n * @param promise Promise to wrap, which possibly rejects\n * @returns Callback to build a new promise, which resolves and rejects along\n * with the original promise\n */\nfunction makeSafePromise(promise) {\n  let isPending = true;\n  const safePromise = promise.then(result => ({\n    status: 'resolved',\n    result\n  }), error => ({\n    status: 'rejected',\n    error\n  })).finally(() => isPending = false);\n  const unwrapPromise = () => safePromise.then(fulfillment => {\n    if (fulfillment.status === 'rejected') throw fulfillment.error;\n    return fulfillment.result;\n  });\n  unwrapPromise.checkPending = () => isPending;\n  return unwrapPromise;\n}\n/**\n * Creates a new promise with resolvers.\n *\n * Based on:\n * - https://github.com/tc39/proposal-promise-with-resolvers/blob/main/polyfills.js\n */\nconst promiseWithResolvers = () => {\n  let resolve;\n  let reject;\n  const promise = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  let isResolved = false;\n  let isRejected = false;\n  const resolver = value => {\n    isResolved = true;\n    resolve(value);\n  };\n  const rejecter = reason => {\n    isRejected = true;\n    reject(reason);\n  };\n  return {\n    promise,\n    resolve: resolver,\n    reject: rejecter,\n    isResolved: () => isResolved,\n    isRejected: () => isRejected\n  };\n};\nconst uninitialized = Symbol('uninitialized');\n/**\n * Lazily creates a value using a provided factory\n */\nfunction lazy(factory) {\n  let value = uninitialized;\n  return () => {\n    if (value === uninitialized) {\n      value = factory();\n    }\n    return value;\n  };\n}\n\n// Do not modify this file manually. Instead, edit worker.ts\n// and the run ./generate-timer-worker.sh\nconst timerWorker = {\n  src: `const timerIdMapping = new Map();\nself.addEventListener('message', (event) => {\n    const request = event.data;\n    switch (request.type) {\n        case 'setTimeout':\n        case 'setInterval':\n            timerIdMapping.set(request.id, (request.type === 'setTimeout' ? setTimeout : setInterval)(() => {\n                tick(request.id);\n                if (request.type === 'setTimeout') {\n                    timerIdMapping.delete(request.id);\n                }\n            }, request.timeout));\n            break;\n        case 'clearTimeout':\n        case 'clearInterval':\n            (request.type === 'clearTimeout' ? clearTimeout : clearInterval)(timerIdMapping.get(request.id));\n            timerIdMapping.delete(request.id);\n            break;\n    }\n});\nfunction tick(id) {\n    const message = { type: 'tick', id };\n    self.postMessage(message);\n}`\n};\nclass TimerWorker {\n  constructor() {\n    this.currentTimerId = 1;\n    this.callbacks = new Map();\n    this.fallback = false;\n  }\n  setup({\n    useTimerWorker = true\n  } = {}) {\n    if (!useTimerWorker) {\n      this.fallback = true;\n      return;\n    }\n    try {\n      const source = timerWorker.src;\n      const blob = new Blob([source], {\n        type: 'application/javascript; charset=utf-8'\n      });\n      const script = URL.createObjectURL(blob);\n      this.worker = new Worker(script, {\n        name: 'str-timer-worker'\n      });\n      this.worker.addEventListener('message', event => {\n        const {\n          type,\n          id\n        } = event.data;\n        if (type === 'tick') {\n          this.callbacks.get(id)?.();\n        }\n      });\n    } catch (err) {\n      getLogger(['timer-worker'])('error', err);\n      this.fallback = true;\n    }\n  }\n  destroy() {\n    this.callbacks.clear();\n    this.worker?.terminate();\n    this.worker = undefined;\n    this.fallback = false;\n  }\n  get ready() {\n    return this.fallback || Boolean(this.worker);\n  }\n  setInterval(callback, timeout) {\n    return this.setTimer('setInterval', callback, timeout);\n  }\n  clearInterval(id) {\n    this.clearTimer('clearInterval', id);\n  }\n  setTimeout(callback, timeout) {\n    return this.setTimer('setTimeout', callback, timeout);\n  }\n  clearTimeout(id) {\n    this.clearTimer('clearTimeout', id);\n  }\n  setTimer(type, callback, timeout) {\n    if (!this.ready) {\n      this.setup();\n    }\n    if (this.fallback) {\n      return (type === 'setTimeout' ? setTimeout : setInterval)(callback, timeout);\n    }\n    const id = this.getTimerId();\n    this.callbacks.set(id, () => {\n      callback();\n      // Timeouts are one-off operations, so no need to keep callback reference\n      // after timer has fired\n      if (type === 'setTimeout') {\n        this.callbacks.delete(id);\n      }\n    });\n    this.sendMessage({\n      type,\n      id,\n      timeout\n    });\n    return id;\n  }\n  clearTimer(type, id) {\n    if (!id) {\n      return;\n    }\n    if (!this.ready) {\n      this.setup();\n    }\n    if (this.fallback) {\n      (type === 'clearTimeout' ? clearTimeout : clearInterval)(id);\n      return;\n    }\n    this.callbacks.delete(id);\n    this.sendMessage({\n      type,\n      id\n    });\n  }\n  getTimerId() {\n    return this.currentTimerId++;\n  }\n  sendMessage(message) {\n    if (!this.worker) {\n      throw new Error(\"Cannot use timer worker before it's set up\");\n    }\n    this.worker.postMessage(message);\n  }\n}\nlet timerWorkerEnabled = false;\nconst enableTimerWorker = () => {\n  timerWorkerEnabled = true;\n};\nconst getTimers = lazy(() => {\n  const instance = new TimerWorker();\n  instance.setup({\n    useTimerWorker: timerWorkerEnabled\n  });\n  return instance;\n});\n\n/**\n * The client used for exchanging information with the SFU.\n */\nclass StreamSfuClient {\n  /**\n   * Constructs a new SFU client.\n   */\n  constructor({\n    dispatcher,\n    credentials,\n    sessionId,\n    logTag,\n    joinResponseTimeout = 5000,\n    onSignalClose,\n    streamClient,\n    enableTracing\n  }) {\n    /**\n     * A buffer for ICE Candidates that are received before\n     * the Publisher and Subscriber Peer Connections are ready to handle them.\n     */\n    this.iceTrickleBuffer = new IceTrickleBuffer();\n    /**\n     * Flag to indicate if the client is in the process of leaving the call.\n     * This is set to `true` when the user initiates the leave process.\n     */\n    this.isLeaving = false;\n    /**\n     * Flag to indicate if the client is in the process of closing the connection.\n     */\n    this.isClosing = false;\n    this.pingIntervalInMs = 10 * 1000;\n    this.unhealthyTimeoutInMs = this.pingIntervalInMs + 5 * 1000;\n    /**\n     * Promise that resolves when the JoinResponse is received.\n     * Rejects after a certain threshold if the response is not received.\n     */\n    this.joinResponseTask = promiseWithResolvers();\n    /**\n     * A controller to abort the current requests.\n     */\n    this.abortController = new AbortController();\n    this.createWebSocket = () => {\n      const eventsToTrace = {\n        callEnded: true,\n        changePublishQuality: true,\n        error: true,\n        goAway: true\n      };\n      this.signalWs = createWebSocketSignalChannel({\n        logTag: this.logTag,\n        endpoint: `${this.credentials.server.ws_endpoint}?tag=${this.logTag}`,\n        onMessage: message => {\n          this.lastMessageTimestamp = new Date();\n          this.scheduleConnectionCheck();\n          const eventKind = message.eventPayload.oneofKind;\n          if (eventsToTrace[eventKind]) {\n            this.tracer?.trace(eventKind, message);\n          }\n          this.dispatcher.dispatch(message, this.logTag);\n        }\n      });\n      this.signalReady = makeSafePromise(Promise.race([new Promise((resolve, reject) => {\n        const onOpen = () => {\n          this.signalWs.removeEventListener('open', onOpen);\n          resolve(this.signalWs);\n        };\n        this.signalWs.addEventListener('open', onOpen);\n        this.signalWs.addEventListener('close', e => {\n          this.handleWebSocketClose(e);\n          // Normally, this shouldn't have any effect, because WS should never emit 'close'\n          // before emitting 'open'. However, strager things have happened, and we don't\n          // want to leave signalReady in pending state.\n          reject(new Error('SFU WS closed unexpectedly'));\n        });\n      }), new Promise((resolve, reject) => {\n        setTimeout(() => reject(new Error('SFU WS connection timed out')), this.joinResponseTimeout);\n      })]));\n    };\n    this.cleanUpWebSocket = () => {\n      this.signalWs.removeEventListener('close', this.handleWebSocketClose);\n    };\n    this.handleWebSocketClose = e => {\n      this.signalWs.removeEventListener('close', this.handleWebSocketClose);\n      getTimers().clearInterval(this.keepAliveInterval);\n      clearTimeout(this.connectionCheckTimeout);\n      this.onSignalClose?.(`${e.code} ${e.reason}`);\n    };\n    this.close = (code = StreamSfuClient.NORMAL_CLOSURE, reason) => {\n      this.isClosing = true;\n      if (this.signalWs.readyState === WebSocket.OPEN) {\n        this.logger('debug', `Closing SFU WS connection: ${code} - ${reason}`);\n        this.signalWs.close(code, `js-client: ${reason}`);\n        this.cleanUpWebSocket();\n      }\n      this.dispose();\n    };\n    this.dispose = () => {\n      this.logger('debug', 'Disposing SFU client');\n      this.unsubscribeIceTrickle();\n      this.unsubscribeNetworkChanged();\n      clearInterval(this.keepAliveInterval);\n      clearTimeout(this.connectionCheckTimeout);\n      clearTimeout(this.migrateAwayTimeout);\n      this.abortController.abort();\n      this.migrationTask?.resolve();\n      this.iceTrickleBuffer.dispose();\n    };\n    this.getTrace = () => {\n      return this.tracer?.take();\n    };\n    this.leaveAndClose = async reason => {\n      await this.joinTask;\n      try {\n        this.isLeaving = true;\n        await this.notifyLeave(reason);\n      } catch (err) {\n        this.logger('debug', 'Error notifying SFU about leaving call', err);\n      }\n      this.close(StreamSfuClient.NORMAL_CLOSURE, reason.substring(0, 115));\n    };\n    this.updateSubscriptions = async tracks => {\n      await this.joinTask;\n      return retryable(() => this.rpc.updateSubscriptions({\n        sessionId: this.sessionId,\n        tracks\n      }), this.abortController.signal);\n    };\n    this.setPublisher = async data => {\n      await this.joinTask;\n      return retryable(() => this.rpc.setPublisher({\n        ...data,\n        sessionId: this.sessionId\n      }), this.abortController.signal);\n    };\n    this.sendAnswer = async data => {\n      await this.joinTask;\n      return retryable(() => this.rpc.sendAnswer({\n        ...data,\n        sessionId: this.sessionId\n      }), this.abortController.signal);\n    };\n    this.iceTrickle = async data => {\n      await this.joinTask;\n      return retryable(() => this.rpc.iceTrickle({\n        ...data,\n        sessionId: this.sessionId\n      }), this.abortController.signal);\n    };\n    this.iceRestart = async data => {\n      await this.joinTask;\n      return retryable(() => this.rpc.iceRestart({\n        ...data,\n        sessionId: this.sessionId\n      }), this.abortController.signal);\n    };\n    this.updateMuteStates = async muteStates => {\n      await this.joinTask;\n      return retryable(() => this.rpc.updateMuteStates({\n        muteStates,\n        sessionId: this.sessionId\n      }), this.abortController.signal);\n    };\n    this.sendStats = async stats => {\n      await this.joinTask;\n      // NOTE: we don't retry sending stats\n      return this.rpc.sendStats({\n        ...stats,\n        sessionId: this.sessionId\n      });\n    };\n    this.startNoiseCancellation = async () => {\n      await this.joinTask;\n      return retryable(() => this.rpc.startNoiseCancellation({\n        sessionId: this.sessionId\n      }), this.abortController.signal);\n    };\n    this.stopNoiseCancellation = async () => {\n      await this.joinTask;\n      return retryable(() => this.rpc.stopNoiseCancellation({\n        sessionId: this.sessionId\n      }), this.abortController.signal);\n    };\n    this.enterMigration = async (opts = {}) => {\n      this.isLeaving = true;\n      const {\n        timeout = 7 * 1000\n      } = opts;\n      this.migrationTask?.reject(new Error('Cancelled previous migration'));\n      const task = this.migrationTask = promiseWithResolvers();\n      const unsubscribe = this.dispatcher.on('participantMigrationComplete', () => {\n        unsubscribe();\n        clearTimeout(this.migrateAwayTimeout);\n        task.resolve();\n      });\n      this.migrateAwayTimeout = setTimeout(() => {\n        unsubscribe();\n        task.reject(new Error(`Migration (${this.logTag}) failed to complete in ${timeout}ms`));\n      }, timeout);\n      return task.promise;\n    };\n    this.join = async data => {\n      // wait for the signal web socket to be ready before sending \"joinRequest\"\n      await this.signalReady();\n      if (this.joinResponseTask.isResolved() || this.joinResponseTask.isRejected()) {\n        // we need to lock the RPC requests until we receive a JoinResponse.\n        // that's why we have this primitive lock mechanism.\n        // the client starts with already initialized joinResponseTask,\n        // and this code creates a new one for the next join request.\n        this.joinResponseTask = promiseWithResolvers();\n      }\n      // capture a reference to the current joinResponseTask as it might\n      // be replaced with a new one in case a second join request is made\n      const current = this.joinResponseTask;\n      let timeoutId = undefined;\n      const unsubscribe = this.dispatcher.on('joinResponse', joinResponse => {\n        this.logger('debug', 'Received joinResponse', joinResponse);\n        clearTimeout(timeoutId);\n        unsubscribe();\n        this.keepAlive();\n        current.resolve(joinResponse);\n      });\n      timeoutId = setTimeout(() => {\n        unsubscribe();\n        current.reject(new Error('Waiting for \"joinResponse\" has timed out'));\n      }, this.joinResponseTimeout);\n      const joinRequest = SfuRequest.create({\n        requestPayload: {\n          oneofKind: 'joinRequest',\n          joinRequest: JoinRequest.create({\n            ...data,\n            sessionId: this.sessionId,\n            token: this.credentials.token\n          })\n        }\n      });\n      this.tracer?.trace('joinRequest', joinRequest);\n      await this.send(joinRequest);\n      return current.promise;\n    };\n    this.ping = async () => {\n      return this.send(SfuRequest.create({\n        requestPayload: {\n          oneofKind: 'healthCheckRequest',\n          healthCheckRequest: {}\n        }\n      }));\n    };\n    this.notifyLeave = async reason => {\n      return this.send(SfuRequest.create({\n        requestPayload: {\n          oneofKind: 'leaveCallRequest',\n          leaveCallRequest: {\n            sessionId: this.sessionId,\n            reason\n          }\n        }\n      }));\n    };\n    this.send = async message => {\n      await this.signalReady(); // wait for the signal ws to be open\n      const msgJson = SfuRequest.toJson(message);\n      if (this.signalWs.readyState !== WebSocket.OPEN) {\n        this.logger('debug', 'Signal WS is not open. Skipping message', msgJson);\n        return;\n      }\n      this.logger('debug', `Sending message to: ${this.edgeName}`, msgJson);\n      this.signalWs.send(SfuRequest.toBinary(message));\n    };\n    this.keepAlive = () => {\n      const timers = getTimers();\n      timers.clearInterval(this.keepAliveInterval);\n      this.keepAliveInterval = timers.setInterval(() => {\n        this.ping().catch(e => {\n          this.logger('error', 'Error sending healthCheckRequest to SFU', e);\n        });\n      }, this.pingIntervalInMs);\n    };\n    this.scheduleConnectionCheck = () => {\n      clearTimeout(this.connectionCheckTimeout);\n      this.connectionCheckTimeout = setTimeout(() => {\n        if (this.lastMessageTimestamp) {\n          const timeSinceLastMessage = new Date().getTime() - this.lastMessageTimestamp.getTime();\n          if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n            this.close(StreamSfuClient.ERROR_CONNECTION_UNHEALTHY, `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`);\n          }\n        }\n      }, this.unhealthyTimeoutInMs);\n    };\n    this.dispatcher = dispatcher;\n    this.sessionId = sessionId || generateUUIDv4();\n    this.onSignalClose = onSignalClose;\n    this.credentials = credentials;\n    const {\n      server,\n      token\n    } = credentials;\n    this.edgeName = server.edge_name;\n    this.joinResponseTimeout = joinResponseTimeout;\n    this.logTag = logTag;\n    this.logger = getLogger(['SfuClient', logTag]);\n    this.tracer = enableTracing ? new Tracer(`${logTag}-${this.edgeName}`) : undefined;\n    this.rpc = createSignalClient({\n      baseUrl: server.url,\n      interceptors: [withHeaders({\n        Authorization: `Bearer ${token}`\n      }), this.tracer && withRequestTracer(this.tracer.trace), getLogLevel() === 'trace' && withRequestLogger(this.logger, 'trace')].filter(v => !!v)\n    });\n    // Special handling for the ICETrickle kind of events.\n    // The SFU might trigger these events before the initial RTC\n    // connection is established or \"JoinResponse\" received.\n    // In that case, those events (ICE candidates) need to be buffered\n    // and later added to the appropriate PeerConnection\n    // once the remoteDescription is known and set.\n    this.unsubscribeIceTrickle = dispatcher.on('iceTrickle', iceTrickle => {\n      this.iceTrickleBuffer.push(iceTrickle);\n    });\n    // listen to network changes to handle offline state\n    // we shouldn't attempt to recover websocket connection when offline\n    this.unsubscribeNetworkChanged = streamClient.on('network.changed', e => {\n      if (!e.online) {\n        this.networkAvailableTask = promiseWithResolvers();\n      } else {\n        this.networkAvailableTask?.resolve();\n      }\n    });\n    this.createWebSocket();\n  }\n  get isHealthy() {\n    return this.signalWs.readyState === WebSocket.OPEN && this.joinResponseTask.isResolved();\n  }\n  get joinTask() {\n    return this.joinResponseTask.promise;\n  }\n}\n/**\n * The normal closure code. Used for controlled shutdowns.\n */\nStreamSfuClient.NORMAL_CLOSURE = 1000;\n/**\n * The error code used when the SFU connection is unhealthy.\n * Usually, this means that no message has been received from the SFU for\n * a certain amount of time (`connectionCheckTimeout`).\n */\nStreamSfuClient.ERROR_CONNECTION_UNHEALTHY = 4001;\n/**\n * The error code used when the SFU connection is disposed because a new\n * connection is established or is about to be established.\n * Here, we don't use 1000 (normal closure) because we don't want the\n * SFU to clean up the resources associated with the current participant.\n */\nStreamSfuClient.DISPOSE_OLD_SOCKET = 4002;\n\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */\nconst watchCallAccepted = call => {\n  return async function onCallAccepted(event) {\n    // We want to discard the event if it's from the current user\n    if (event.user.id === call.currentUserId) return;\n    const {\n      state\n    } = call;\n    if (event.call.created_by.id === call.currentUserId && state.callingState === CallingState.RINGING) {\n      await call.join();\n    }\n  };\n};\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */\nconst watchCallRejected = call => {\n  return async function onCallRejected(event) {\n    // We want to discard the event if it's from the current user\n    if (event.user.id === call.currentUserId) return;\n    const {\n      call: eventCall\n    } = event;\n    const {\n      session: callSession\n    } = eventCall;\n    if (!callSession) {\n      call.logger('warn', 'No call session provided. Ignoring call.rejected event.', event);\n      return;\n    }\n    const rejectedBy = callSession.rejected_by;\n    const {\n      members,\n      callingState\n    } = call.state;\n    if (callingState !== CallingState.RINGING) {\n      call.logger('info', 'Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.', event);\n      return;\n    }\n    if (call.isCreatedByMe) {\n      const everyoneElseRejected = members.filter(m => m.user_id !== call.currentUserId).every(m => rejectedBy[m.user_id]);\n      if (everyoneElseRejected) {\n        call.logger('info', 'everyone rejected, leaving the call');\n        await call.leave({\n          reject: true,\n          reason: 'cancel',\n          message: 'ring: everyone rejected'\n        });\n      }\n    } else {\n      if (rejectedBy[eventCall.created_by.id]) {\n        call.logger('info', 'call creator rejected, leaving call');\n        await call.leave({\n          message: 'ring: creator rejected'\n        });\n      }\n    }\n  };\n};\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */\nconst watchCallEnded = call => {\n  return function onCallEnded() {\n    const {\n      callingState\n    } = call.state;\n    if (callingState !== CallingState.IDLE && callingState !== CallingState.LEFT) {\n      call.leave({\n        message: 'call.ended event received',\n        reject: false\n      }).catch(err => {\n        call.logger('error', 'Failed to leave call after call.ended ', err);\n      });\n    }\n  };\n};\n/**\n * Watches for `callEnded` events.\n */\nconst watchSfuCallEnded = call => {\n  return call.on('callEnded', async e => {\n    if (call.state.callingState === CallingState.LEFT) return;\n    try {\n      // `call.ended` event arrived after the call is already left\n      // and all event handlers are detached. We need to manually\n      // update the call state to reflect the call has ended.\n      call.state.setEndedAt(new Date());\n      const reason = CallEndedReason[e.reason];\n      await call.leave({\n        message: `callEnded received: ${reason}`\n      });\n    } catch (err) {\n      call.logger('error', 'Failed to leave call after being ended by the SFU', err);\n    }\n  });\n};\n\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */\nconst watchCallGrantsUpdated = state => {\n  return function onCallGrantsUpdated(event) {\n    const {\n      currentGrants\n    } = event;\n    if (currentGrants) {\n      const {\n        canPublishAudio,\n        canPublishVideo,\n        canScreenshare\n      } = currentGrants;\n      const update = {\n        [OwnCapability.SEND_AUDIO]: canPublishAudio,\n        [OwnCapability.SEND_VIDEO]: canPublishVideo,\n        [OwnCapability.SCREENSHARE]: canScreenshare\n      };\n      const nextCapabilities = state.ownCapabilities.filter(capability => update[capability] !== false);\n      Object.entries(update).forEach(([capability, value]) => {\n        if (value && !nextCapabilities.includes(capability)) {\n          nextCapabilities.push(capability);\n        }\n      });\n      state.setOwnCapabilities(nextCapabilities);\n    }\n  };\n};\nconst watchConnectionQualityChanged = (dispatcher, state) => {\n  return dispatcher.on('connectionQualityChanged', e => {\n    const {\n      connectionQualityUpdates\n    } = e;\n    if (!connectionQualityUpdates) return;\n    state.updateParticipants(connectionQualityUpdates.reduce((patches, update) => {\n      const {\n        sessionId,\n        connectionQuality\n      } = update;\n      patches[sessionId] = {\n        connectionQuality\n      };\n      return patches;\n    }, {}));\n  });\n};\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */\nconst watchParticipantCountChanged = (dispatcher, state) => {\n  return dispatcher.on('healthCheckResponse', e => {\n    const {\n      participantCount\n    } = e;\n    if (participantCount) {\n      state.setParticipantCount(participantCount.total);\n      state.setAnonymousParticipantCount(participantCount.anonymous);\n    }\n  });\n};\nconst watchLiveEnded = (dispatcher, call) => {\n  return dispatcher.on('error', e => {\n    if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n    call.state.setBackstage(true);\n    if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n      call.leave({\n        message: 'live ended'\n      }).catch(err => {\n        call.logger('error', 'Failed to leave call after live ended', err);\n      });\n    }\n  });\n};\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */\nconst watchSfuErrorReports = dispatcher => {\n  return dispatcher.on('error', e => {\n    if (!e.error) return;\n    const logger = getLogger(['SfuClient']);\n    const {\n      error,\n      reconnectStrategy\n    } = e;\n    logger('error', 'SFU reported error', {\n      code: ErrorCode[error.code],\n      reconnectStrategy: WebsocketReconnectStrategy[reconnectStrategy],\n      message: error.message,\n      shouldRetry: error.shouldRetry\n    });\n  });\n};\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */\nconst watchPinsUpdated = state => {\n  return function onPinsUpdated(e) {\n    const {\n      pins\n    } = e;\n    state.setServerSidePins(pins);\n  };\n};\n\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */\nconst handleRemoteSoftMute = call => {\n  return call.on('trackUnpublished', async event => {\n    const {\n      cause,\n      type,\n      sessionId\n    } = event;\n    const {\n      localParticipant\n    } = call.state;\n    if (cause === TrackUnpublishReason.MODERATION && sessionId === localParticipant?.sessionId) {\n      const logger = call.logger;\n      logger('info', `Local participant's ${TrackType[type]} track is muted remotely`);\n      try {\n        if (type === TrackType.VIDEO) {\n          await call.camera.disable();\n        } else if (type === TrackType.AUDIO) {\n          await call.microphone.disable();\n        } else if (type === TrackType.SCREEN_SHARE || type === TrackType.SCREEN_SHARE_AUDIO) {\n          await call.screenShare.disable();\n        } else {\n          logger('warn', 'Unsupported track type to soft mute', TrackType[type]);\n        }\n      } catch (error) {\n        logger('error', 'Failed to stop publishing', error);\n      }\n    }\n  });\n};\n\n/**\n * Adds unique values to an array.\n *\n * @param arr the array to add to.\n * @param values the values to add.\n */\nconst pushToIfMissing = (arr, ...values) => {\n  for (const v of values) {\n    if (!arr.includes(v)) {\n      arr.push(v);\n    }\n  }\n  return arr;\n};\n\n/**\n * An event responder which handles the `participantJoined` event.\n */\nconst watchParticipantJoined = state => {\n  return function onParticipantJoined(e) {\n    const {\n      participant\n    } = e;\n    if (!participant) return;\n    // `state.updateOrAddParticipant` acts as a safeguard against\n    // potential duplicate events from the SFU.\n    //\n    // Although the SFU should not send duplicate events, we have seen\n    // some race conditions in the past during the `join-flow`.\n    // The SFU would send participant info as part of the `join`\n    // response and then follow up with a `participantJoined` event for\n    // already announced participants.\n    const orphanedTracks = reconcileOrphanedTracks(state, participant);\n    state.updateOrAddParticipant(participant.sessionId, Object.assign(participant, orphanedTracks, {\n      viewportVisibilityState: {\n        videoTrack: VisibilityState.UNKNOWN,\n        screenShareTrack: VisibilityState.UNKNOWN\n      }\n    }));\n  };\n};\n/**\n * An event responder which handles the `participantLeft` event.\n */\nconst watchParticipantLeft = state => {\n  return function onParticipantLeft(e) {\n    const {\n      participant\n    } = e;\n    if (!participant) return;\n    state.setParticipants(participants => participants.filter(p => p.sessionId !== participant.sessionId));\n  };\n};\n/**\n * An event responder which handles the `participantUpdated` event.\n */\nconst watchParticipantUpdated = state => {\n  return function onParticipantUpdated(e) {\n    const {\n      participant\n    } = e;\n    if (!participant) return;\n    state.updateParticipant(participant.sessionId, participant);\n  };\n};\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */\nconst watchTrackPublished = state => {\n  return function onTrackPublished(e) {\n    const {\n      type,\n      sessionId\n    } = e;\n    // An optimization for large calls.\n    // After a certain threshold, the SFU would stop emitting `participantJoined`\n    // events, and instead, it would only provide the participant's information\n    // once they start publishing a track.\n    if (e.participant) {\n      const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n      const participant = Object.assign(e.participant, orphanedTracks);\n      state.updateOrAddParticipant(sessionId, participant);\n    } else {\n      state.updateParticipant(sessionId, p => ({\n        publishedTracks: pushToIfMissing([...p.publishedTracks], type)\n      }));\n    }\n  };\n};\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */\nconst watchTrackUnpublished = state => {\n  return function onTrackUnpublished(e) {\n    const {\n      type,\n      sessionId\n    } = e;\n    // An optimization for large calls. See `watchTrackPublished`.\n    if (e.participant) {\n      const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n      const participant = Object.assign(e.participant, orphanedTracks);\n      state.updateOrAddParticipant(sessionId, participant);\n    } else {\n      state.updateParticipant(sessionId, p => ({\n        publishedTracks: p.publishedTracks.filter(t => t !== type)\n      }));\n    }\n  };\n};\n/**\n * Reconciles orphaned tracks (if any) for the given participant.\n *\n * @param state the call state.\n * @param participant the participant.\n */\nconst reconcileOrphanedTracks = (state, participant) => {\n  const orphanTracks = state.takeOrphanedTracks(participant.trackLookupPrefix);\n  if (!orphanTracks.length) return;\n  const reconciledTracks = {};\n  for (const orphan of orphanTracks) {\n    const key = trackTypeToParticipantStreamKey(orphan.trackType);\n    if (!key) continue;\n    reconciledTracks[key] = orphan.track;\n  }\n  return reconciledTracks;\n};\n\n/**\n * Watches for `dominantSpeakerChanged` events.\n */\nconst watchDominantSpeakerChanged = (dispatcher, state) => {\n  return dispatcher.on('dominantSpeakerChanged', e => {\n    const {\n      sessionId\n    } = e;\n    if (sessionId === state.dominantSpeaker?.sessionId) return;\n    state.setParticipants(participants => participants.map(participant => {\n      // mark the new dominant speaker\n      if (participant.sessionId === sessionId) {\n        return {\n          ...participant,\n          isDominantSpeaker: true\n        };\n      }\n      // unmark the old dominant speaker\n      if (participant.isDominantSpeaker) {\n        return {\n          ...participant,\n          isDominantSpeaker: false\n        };\n      }\n      return participant; // no change\n    }));\n  });\n};\n/**\n * Watches for `audioLevelChanged` events.\n */\nconst watchAudioLevelChanged = (dispatcher, state) => {\n  return dispatcher.on('audioLevelChanged', e => {\n    const {\n      audioLevels\n    } = e;\n    state.updateParticipants(audioLevels.reduce((patches, current) => {\n      patches[current.sessionId] = {\n        audioLevel: current.level,\n        isSpeaking: current.isSpeaking\n      };\n      return patches;\n    }, {}));\n  });\n};\n\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param dispatcher the dispatcher.\n */\nconst registerEventHandlers = (call, dispatcher) => {\n  const state = call.state;\n  const eventHandlers = [call.on('call.ended', watchCallEnded(call)), watchSfuCallEnded(call), watchLiveEnded(dispatcher, call), watchSfuErrorReports(dispatcher), watchConnectionQualityChanged(dispatcher, state), watchParticipantCountChanged(dispatcher, state), call.on('participantJoined', watchParticipantJoined(state)), call.on('participantLeft', watchParticipantLeft(state)), call.on('participantUpdated', watchParticipantUpdated(state)), call.on('trackPublished', watchTrackPublished(state)), call.on('trackUnpublished', watchTrackUnpublished(state)), watchAudioLevelChanged(dispatcher, state), watchDominantSpeakerChanged(dispatcher, state), call.on('callGrantsUpdated', watchCallGrantsUpdated(state)), call.on('pinsUpdated', watchPinsUpdated(state)), handleRemoteSoftMute(call)];\n  if (call.ringing) {\n    // these events are only relevant when the call is ringing\n    eventHandlers.push(registerRingingCallEventHandlers(call));\n  }\n  return () => {\n    eventHandlers.forEach(unsubscribe => unsubscribe());\n  };\n};\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */\nconst registerRingingCallEventHandlers = call => {\n  const coordinatorRingEvents = {\n    'call.accepted': watchCallAccepted(call),\n    'call.rejected': watchCallRejected(call)\n  };\n  const eventHandlers = Object.keys(coordinatorRingEvents).map(event => {\n    const eventName = event;\n    return call.on(eventName, coordinatorRingEvents[eventName]);\n  });\n  return () => {\n    eventHandlers.forEach(unsubscribe => unsubscribe());\n  };\n};\nconst DEFAULT_THRESHOLD = 0.35;\nclass ViewportTracker {\n  constructor() {\n    /**\n     * @private\n     */\n    this.elementHandlerMap = new Map();\n    /**\n     * @private\n     */\n    this.observer = null;\n    // in React children render before viewport is set, add\n    // them to the queue and observe them once the observer is ready\n    /**\n     * @private\n     */\n    this.queueSet = new Set();\n    /**\n     * Method to set scrollable viewport as root for the IntersectionObserver, returns\n     * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n     *\n     * @param viewportElement\n     * @param options\n     * @returns Unobserve\n     */\n    this.setViewport = (viewportElement, options) => {\n      const cleanup = () => {\n        this.observer?.disconnect();\n        this.observer = null;\n        this.elementHandlerMap.clear();\n      };\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          const handler = this.elementHandlerMap.get(entry.target);\n          handler?.(entry);\n        });\n      }, {\n        root: viewportElement,\n        ...options,\n        threshold: options?.threshold ?? DEFAULT_THRESHOLD\n      });\n      if (this.queueSet.size) {\n        this.queueSet.forEach(([queueElement, queueHandler]) => {\n          // check if element which requested observation is\n          // a child of a viewport element, skip if isn't\n          if (!viewportElement.contains(queueElement)) return;\n          this.observer.observe(queueElement);\n          this.elementHandlerMap.set(queueElement, queueHandler);\n        });\n        this.queueSet.clear();\n      }\n      return cleanup;\n    };\n    /**\n     * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n     * detects a possible change in element's visibility within specified viewport, returns\n     * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n     *\n     * @param element\n     * @param handler\n     * @returns Unobserve\n     */\n    this.observe = (element, handler) => {\n      const queueItem = [element, handler];\n      const cleanup = () => {\n        this.elementHandlerMap.delete(element);\n        this.observer?.unobserve(element);\n        this.queueSet.delete(queueItem);\n      };\n      if (this.elementHandlerMap.has(element)) return cleanup;\n      if (!this.observer) {\n        this.queueSet.add(queueItem);\n        return cleanup;\n      }\n      if (this.observer.root.contains(element)) {\n        this.elementHandlerMap.set(element, handler);\n        this.observer.observe(element);\n      }\n      return cleanup;\n    };\n  }\n}\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE = {\n  videoTrack: VisibilityState.UNKNOWN,\n  screenShareTrack: VisibilityState.UNKNOWN\n};\nconst globalOverrideKey = Symbol('globalOverrideKey');\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */\nclass DynascaleManager {\n  /**\n   * Creates a new DynascaleManager instance.\n   */\n  constructor(callState, speaker) {\n    /**\n     * The viewport tracker instance.\n     */\n    this.viewportTracker = new ViewportTracker();\n    this.logger = getLogger(['DynascaleManager']);\n    this.pendingSubscriptionsUpdate = null;\n    this.videoTrackSubscriptionOverridesSubject = new BehaviorSubject({});\n    this.videoTrackSubscriptionOverrides$ = this.videoTrackSubscriptionOverridesSubject.asObservable();\n    this.incomingVideoSettings$ = this.videoTrackSubscriptionOverrides$.pipe(map(overrides => {\n      const {\n        [globalOverrideKey]: globalSettings,\n        ...participants\n      } = overrides;\n      return {\n        enabled: globalSettings?.enabled !== false,\n        preferredResolution: globalSettings?.enabled ? globalSettings.dimension : undefined,\n        participants: Object.fromEntries(Object.entries(participants).map(([sessionId, participantOverride]) => [sessionId, {\n          enabled: participantOverride?.enabled !== false,\n          preferredResolution: participantOverride?.enabled ? participantOverride.dimension : undefined\n        }])),\n        isParticipantVideoEnabled: sessionId => overrides[sessionId]?.enabled ?? overrides[globalOverrideKey]?.enabled ?? true\n      };\n    }), shareReplay(1));\n    this.setVideoTrackSubscriptionOverrides = (override, sessionIds) => {\n      if (!sessionIds) {\n        return setCurrentValue(this.videoTrackSubscriptionOverridesSubject, override ? {\n          [globalOverrideKey]: override\n        } : {});\n      }\n      return setCurrentValue(this.videoTrackSubscriptionOverridesSubject, overrides => ({\n        ...overrides,\n        ...Object.fromEntries(sessionIds.map(id => [id, override]))\n      }));\n    };\n    this.applyTrackSubscriptions = (debounceType = DebounceType.SLOW) => {\n      if (this.pendingSubscriptionsUpdate) {\n        clearTimeout(this.pendingSubscriptionsUpdate);\n      }\n      const updateSubscriptions = () => {\n        this.pendingSubscriptionsUpdate = null;\n        this.sfuClient?.updateSubscriptions(this.trackSubscriptions).catch(err => {\n          this.logger('debug', `Failed to update track subscriptions`, err);\n        });\n      };\n      if (debounceType) {\n        this.pendingSubscriptionsUpdate = setTimeout(updateSubscriptions, debounceType);\n      } else {\n        updateSubscriptions();\n      }\n    };\n    /**\n     * Will begin tracking the given element for visibility changes within the\n     * configured viewport element (`call.setViewport`).\n     *\n     * @param element the element to track.\n     * @param sessionId the session id.\n     * @param trackType the kind of video.\n     * @returns Untrack.\n     */\n    this.trackElementVisibility = (element, sessionId, trackType) => {\n      const cleanup = this.viewportTracker.observe(element, entry => {\n        this.callState.updateParticipant(sessionId, participant => {\n          const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n          // observer triggers when the element is \"moved\" to be a fullscreen element\n          // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n          const isVisible = entry.isIntersecting || document.fullscreenElement === element ? VisibilityState.VISIBLE : VisibilityState.INVISIBLE;\n          return {\n            ...participant,\n            viewportVisibilityState: {\n              ...previousVisibilityState,\n              [trackType]: isVisible\n            }\n          };\n        });\n      });\n      return () => {\n        cleanup();\n        // reset visibility state to UNKNOWN upon cleanup\n        // so that the layouts that are not actively observed\n        // can still function normally (runtime layout switching)\n        this.callState.updateParticipant(sessionId, participant => {\n          const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n          return {\n            ...participant,\n            viewportVisibilityState: {\n              ...previousVisibilityState,\n              [trackType]: VisibilityState.UNKNOWN\n            }\n          };\n        });\n      };\n    };\n    /**\n     * Sets the viewport element to track bound video elements for visibility.\n     *\n     * @param element the viewport element.\n     */\n    this.setViewport = element => {\n      return this.viewportTracker.setViewport(element);\n    };\n    /**\n     * Binds a DOM <video> element to the given session id.\n     * This method will make sure that the video element will play\n     * the correct video stream for the given session id.\n     *\n     * Under the hood, it would also keep track of the video element dimensions\n     * and update the subscription accordingly in order to optimize the bandwidth.\n     *\n     * If a \"viewport\" is configured, the video element will be automatically\n     * tracked for visibility and the subscription will be updated accordingly.\n     *\n     * @param videoElement the video element to bind to.\n     * @param sessionId the session id.\n     * @param trackType the kind of video.\n     */\n    this.bindVideoElement = (videoElement, sessionId, trackType) => {\n      const boundParticipant = this.callState.findParticipantBySessionId(sessionId);\n      if (!boundParticipant) return;\n      const requestTrackWithDimensions = (debounceType, dimension) => {\n        if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n          // ignore 0x0 dimensions. this can happen when the video element\n          // is not visible (e.g., has display: none).\n          // we treat this as \"unsubscription\" as we don't want to keep\n          // consuming bandwidth for a video that is not visible on the screen.\n          this.logger('debug', `Ignoring 0x0 dimension`, boundParticipant);\n          dimension = undefined;\n        }\n        this.callState.updateParticipantTracks(trackType, {\n          [sessionId]: {\n            dimension\n          }\n        });\n        this.applyTrackSubscriptions(debounceType);\n      };\n      const participant$ = this.callState.participants$.pipe(map(participants => participants.find(participant => participant.sessionId === sessionId)), takeWhile(participant => !!participant), distinctUntilChanged(), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n      /**\n       * Since the video elements are now being removed from the DOM (React SDK) upon\n       * visibility change, this subscription is not in use an stays here only for the\n       * plain JS integrations where integrators might choose not to remove the video\n       * elements from the DOM.\n       */\n      // keep copy for resize observer handler\n      let viewportVisibilityState;\n      const viewportVisibilityStateSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe(map(p => p.viewportVisibilityState?.[trackType]), distinctUntilChanged()).subscribe(nextViewportVisibilityState => {\n        // skip initial trigger\n        if (!viewportVisibilityState) {\n          viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n          return;\n        }\n        viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n        if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n          return requestTrackWithDimensions(DebounceType.MEDIUM, undefined);\n        }\n        requestTrackWithDimensions(DebounceType.MEDIUM, {\n          width: videoElement.clientWidth,\n          height: videoElement.clientHeight\n        });\n      });\n      let lastDimensions;\n      const resizeObserver = boundParticipant.isLocalParticipant ? null : new ResizeObserver(() => {\n        const currentDimensions = {\n          width: videoElement.clientWidth,\n          height: videoElement.clientHeight\n        };\n        // skip initial trigger\n        if (!lastDimensions) {\n          lastDimensions = currentDimensions;\n          return;\n        }\n        if (lastDimensions.width === currentDimensions.width && lastDimensions.height === currentDimensions.height || viewportVisibilityState === VisibilityState.INVISIBLE) {\n          return;\n        }\n        const relativeDelta = Math.max(currentDimensions.width / lastDimensions.width, currentDimensions.height / lastDimensions.height);\n        // Low quality video in an upscaled video element is very noticable.\n        // We try to upscale faster, and downscale slower. We also update debounce\n        // more if the size change is not significant, gurading against fast-firing\n        // resize events.\n        const debounceType = relativeDelta > 1.2 ? DebounceType.IMMEDIATE : DebounceType.MEDIUM;\n        requestTrackWithDimensions(debounceType, {\n          width: videoElement.clientWidth,\n          height: videoElement.clientHeight\n        });\n        lastDimensions = currentDimensions;\n      });\n      resizeObserver?.observe(videoElement);\n      // element renders and gets bound - track subscription gets\n      // triggered first other ones get skipped on initial subscriptions\n      const publishedTracksSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe(distinctUntilKeyChanged('publishedTracks'), map(p => trackType === 'videoTrack' ? hasVideo(p) : hasScreenShare(p)), distinctUntilChanged()).subscribe(isPublishing => {\n        if (isPublishing) {\n          // the participant just started to publish a track\n          requestTrackWithDimensions(DebounceType.IMMEDIATE, {\n            width: videoElement.clientWidth,\n            height: videoElement.clientHeight\n          });\n        } else {\n          // the participant just stopped publishing a track\n          requestTrackWithDimensions(DebounceType.FAST, undefined);\n        }\n      });\n      videoElement.autoplay = true;\n      videoElement.playsInline = true;\n      // explicitly marking the element as muted will allow autoplay to work\n      // without prior user interaction:\n      // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n      videoElement.muted = true;\n      const streamSubscription = participant$.pipe(distinctUntilKeyChanged(trackType === 'videoTrack' ? 'videoStream' : 'screenShareStream')).subscribe(p => {\n        const source = trackType === 'videoTrack' ? p.videoStream : p.screenShareStream;\n        if (videoElement.srcObject === source) return;\n        videoElement.srcObject = source ?? null;\n        if (isSafari() || isFirefox()) {\n          setTimeout(() => {\n            videoElement.srcObject = source ?? null;\n            videoElement.play().catch(e => {\n              this.logger('warn', `Failed to play stream`, e);\n            });\n            // we add extra delay until we attempt to force-play\n            // the participant's media stream in Firefox and Safari,\n            // as they seem to have some timing issues\n          }, 25);\n        }\n      });\n      return () => {\n        requestTrackWithDimensions(DebounceType.FAST, undefined);\n        viewportVisibilityStateSubscription?.unsubscribe();\n        publishedTracksSubscription?.unsubscribe();\n        streamSubscription.unsubscribe();\n        resizeObserver?.disconnect();\n      };\n    };\n    /**\n     * Binds a DOM <audio> element to the given session id.\n     *\n     * This method will make sure that the audio element will\n     * play the correct audio stream for the given session id.\n     *\n     * @param audioElement the audio element to bind to.\n     * @param sessionId the session id.\n     * @param trackType the kind of audio.\n     * @returns a cleanup function that will unbind the audio element.\n     */\n    this.bindAudioElement = (audioElement, sessionId, trackType) => {\n      const participant = this.callState.findParticipantBySessionId(sessionId);\n      if (!participant || participant.isLocalParticipant) return;\n      const participant$ = this.callState.participants$.pipe(map(participants => participants.find(p => p.sessionId === sessionId)), takeWhile(p => !!p), distinctUntilChanged(), shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n      const updateMediaStreamSubscription = participant$.pipe(distinctUntilKeyChanged(trackType === 'screenShareAudioTrack' ? 'screenShareAudioStream' : 'audioStream')).subscribe(p => {\n        const source = trackType === 'screenShareAudioTrack' ? p.screenShareAudioStream : p.audioStream;\n        if (audioElement.srcObject === source) return;\n        setTimeout(() => {\n          audioElement.srcObject = source ?? null;\n          if (audioElement.srcObject) {\n            audioElement.play().catch(e => {\n              this.logger('warn', `Failed to play stream`, e);\n            });\n            // audio output device shall be set after the audio element is played\n            // otherwise, the browser will not pick it up, and will always\n            // play audio through the system's default device\n            const {\n              selectedDevice\n            } = this.speaker.state;\n            if (selectedDevice && 'setSinkId' in audioElement) {\n              audioElement.setSinkId(selectedDevice);\n            }\n          }\n        });\n      });\n      const sinkIdSubscription = !('setSinkId' in audioElement) ? null : this.speaker.state.selectedDevice$.subscribe(deviceId => {\n        if (deviceId) {\n          audioElement.setSinkId(deviceId);\n        }\n      });\n      const volumeSubscription = combineLatest([this.speaker.state.volume$, participant$.pipe(distinctUntilKeyChanged('audioVolume'))]).subscribe(([volume, p]) => {\n        audioElement.volume = p.audioVolume ?? volume;\n      });\n      audioElement.autoplay = true;\n      return () => {\n        sinkIdSubscription?.unsubscribe();\n        volumeSubscription.unsubscribe();\n        updateMediaStreamSubscription.unsubscribe();\n      };\n    };\n    this.callState = callState;\n    this.speaker = speaker;\n  }\n  setSfuClient(sfuClient) {\n    this.sfuClient = sfuClient;\n  }\n  get trackSubscriptions() {\n    const subscriptions = [];\n    for (const p of this.callState.remoteParticipants) {\n      // NOTE: audio tracks don't have to be requested explicitly\n      // as the SFU will implicitly subscribe us to all of them,\n      // once they become available.\n      if (p.videoDimension && hasVideo(p)) {\n        const override = this.videoTrackSubscriptionOverrides[p.sessionId] ?? this.videoTrackSubscriptionOverrides[globalOverrideKey];\n        if (override?.enabled !== false) {\n          subscriptions.push({\n            userId: p.userId,\n            sessionId: p.sessionId,\n            trackType: TrackType.VIDEO,\n            dimension: override?.dimension ?? p.videoDimension\n          });\n        }\n      }\n      if (p.screenShareDimension && hasScreenShare(p)) {\n        subscriptions.push({\n          userId: p.userId,\n          sessionId: p.sessionId,\n          trackType: TrackType.SCREEN_SHARE,\n          dimension: p.screenShareDimension\n        });\n      }\n      if (hasScreenShareAudio(p)) {\n        subscriptions.push({\n          userId: p.userId,\n          sessionId: p.sessionId,\n          trackType: TrackType.SCREEN_SHARE_AUDIO\n        });\n      }\n    }\n    return subscriptions;\n  }\n  get videoTrackSubscriptionOverrides() {\n    return getCurrentValue(this.videoTrackSubscriptionOverrides$);\n  }\n}\n\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */\nclass PermissionsContext {\n  constructor() {\n    this.permissions = [];\n    /**\n     * Sets the permissions for the current user.\n     *\n     * @param permissions the permissions to set.\n     */\n    this.setPermissions = permissions => {\n      this.permissions = permissions || [];\n    };\n    /**\n     * Sets the settings for the bound call.\n     * @param settings\n     */\n    this.setCallSettings = settings => {\n      this.settings = settings;\n    };\n    /**\n     * Checks if the current user has a specific permission.\n     *\n     * @param permission the permission to check for.\n     */\n    this.hasPermission = permission => {\n      return this.permissions.includes(permission);\n    };\n    /**\n     * Helper method that checks whether the current user has the permission\n     * to publish the given track type.\n     */\n    this.canPublish = trackType => {\n      switch (trackType) {\n        case TrackType.AUDIO:\n          return this.hasPermission(OwnCapability.SEND_AUDIO);\n        case TrackType.VIDEO:\n          return this.hasPermission(OwnCapability.SEND_VIDEO);\n        case TrackType.SCREEN_SHARE:\n        case TrackType.SCREEN_SHARE_AUDIO:\n          return this.hasPermission(OwnCapability.SCREENSHARE);\n        case TrackType.UNSPECIFIED:\n          return false;\n        default:\n          ensureExhausted(trackType, 'Unknown track type');\n      }\n    };\n    /**\n     * Checks if the current user can request a specific permission\n     * within the call.\n     *\n     * @param permission the permission to check for.\n     * @param settings the call settings to check against (optional).\n     */\n    this.canRequest = (permission, settings = this.settings) => {\n      if (!settings) return false;\n      const {\n        audio,\n        video,\n        screensharing\n      } = settings;\n      switch (permission) {\n        case OwnCapability.SEND_AUDIO:\n          return audio.access_request_enabled;\n        case OwnCapability.SEND_VIDEO:\n          return video.access_request_enabled;\n        case OwnCapability.SCREENSHARE:\n          return screensharing.access_request_enabled;\n        default:\n          return false;\n      }\n    };\n  }\n}\n\n/**\n * Represents a call type.\n */\nclass CallType {\n  /**\n   * Constructs a new CallType.\n   *\n   * @param name the name of the call type.\n   * @param options the options for the call type.\n   */\n  constructor(name, options = {\n    sortParticipantsBy: defaultSortPreset\n  }) {\n    this.name = name;\n    this.options = options;\n  }\n}\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */\nclass CallTypesRegistry {\n  /**\n   * Constructs a new CallTypesRegistry.\n   *\n   * @param callTypes the initial call types to register.\n   */\n  constructor(callTypes) {\n    /**\n     * Registers a new call type.\n     *\n     * @param callType the call type to register.\n     */\n    this.register = callType => {\n      this.callTypes[callType.name] = callType;\n    };\n    /**\n     * Unregisters a call type.\n     *\n     * @param name the name of the call type to unregister.\n     */\n    this.unregister = name => {\n      delete this.callTypes[name];\n    };\n    /**\n     * Gets a call type by name.\n     *\n     * @param name the name of the call type to get.\n     */\n    this.get = name => {\n      if (!this.callTypes[name]) {\n        this.register(new CallType(name));\n      }\n      return this.callTypes[name];\n    };\n    this.callTypes = callTypes.reduce((acc, callType) => {\n      acc[callType.name] = callType;\n      return acc;\n    }, {});\n  }\n}\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */\nconst CallTypes = new CallTypesRegistry([new CallType('default', {\n  sortParticipantsBy: defaultSortPreset\n}), new CallType('development', {\n  sortParticipantsBy: defaultSortPreset\n}), new CallType('livestream', {\n  sortParticipantsBy: livestreamOrAudioRoomSortPreset\n}), new CallType('audio_room', {\n  sortParticipantsBy: livestreamOrAudioRoomSortPreset\n})]);\nclass BrowserPermission {\n  constructor(permission) {\n    this.permission = permission;\n    this.disposeController = new AbortController();\n    this.wasPrompted = false;\n    this.listeners = new Set();\n    this.logger = getLogger(['permissions']);\n    const signal = this.disposeController.signal;\n    this.ready = (async () => {\n      const assumeGranted = () => {\n        this.setState('prompt');\n      };\n      if (!canQueryPermissions()) {\n        return assumeGranted();\n      }\n      try {\n        const status = await navigator.permissions.query({\n          name: permission.queryName\n        });\n        if (!signal.aborted) {\n          this.setState(status.state);\n          status.addEventListener('change', () => this.setState(status.state), {\n            signal\n          });\n        }\n      } catch (err) {\n        this.logger('debug', 'Failed to query permission status', err);\n        assumeGranted();\n      }\n    })();\n  }\n  dispose() {\n    this.state = undefined;\n    this.disposeController.abort();\n  }\n  async getState() {\n    await this.ready;\n    if (!this.state) {\n      throw new Error('BrowserPermission instance possibly disposed');\n    }\n    return this.state;\n  }\n  async prompt({\n    forcePrompt = false,\n    throwOnNotAllowed = false\n  } = {}) {\n    return await withoutConcurrency(`permission-prompt-${this.permission.queryName}`, async () => {\n      if ((await this.getState()) !== 'prompt' || this.wasPrompted && !forcePrompt) {\n        const isGranted = this.state === 'granted';\n        if (!isGranted && throwOnNotAllowed) {\n          throw new Error('Permission was not granted previously, and prompting again is not allowed');\n        }\n        return isGranted;\n      }\n      try {\n        this.wasPrompted = true;\n        this.setState('prompting');\n        const stream = await navigator.mediaDevices.getUserMedia(this.permission.constraints);\n        disposeOfMediaStream(stream);\n        this.setState('granted');\n        return true;\n      } catch (e) {\n        if (e && typeof e === 'object' && 'name' in e && (e.name === 'NotAllowedError' || e.name === 'SecurityError')) {\n          this.logger('info', 'Browser permission was not granted', {\n            permission: this.permission\n          });\n          this.setState('denied');\n          if (throwOnNotAllowed) {\n            throw e;\n          }\n          return false;\n        }\n        this.logger('error', `Failed to getUserMedia`, {\n          error: e,\n          permission: this.permission\n        });\n        this.setState('prompt');\n        throw e;\n      }\n    });\n  }\n  listen(cb) {\n    this.listeners.add(cb);\n    if (this.state) cb(this.state);\n    return () => this.listeners.delete(cb);\n  }\n  asObservable() {\n    return this.getStateObservable().pipe(\n    // In some browsers, the 'change' event doesn't reliably emit and hence,\n    // permissionState stays in 'prompt' state forever.\n    // Typically, this happens when a user grants one-time permission.\n    // Instead of checking if a permission is granted, we check if it isn't denied\n    map(state => state !== 'denied'));\n  }\n  asStateObservable() {\n    return this.getStateObservable();\n  }\n  getIsPromptingObservable() {\n    return this.getStateObservable().pipe(map(state => state === 'prompting'));\n  }\n  getStateObservable() {\n    return fromEventPattern(handler => this.listen(handler), (handler, unlisten) => unlisten());\n  }\n  setState(state) {\n    if (this.state !== state) {\n      this.state = state;\n      this.listeners.forEach(listener => listener(state));\n    }\n  }\n}\nfunction canQueryPermissions() {\n  return !isReactNative() && typeof navigator !== 'undefined' && !!navigator.permissions?.query;\n}\n\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param permission a BrowserPermission instance.\n * @param kind the kind of devices to enumerate.\n */\nconst getDevices = (permission, kind) => {\n  return from((async () => {\n    let devices = await navigator.mediaDevices.enumerateDevices();\n    // for privacy reasons, most browsers don't give you device labels\n    // unless you have a corresponding camera or microphone permission\n    const shouldPromptForBrowserPermission = devices.some(device => device.kind === kind && device.label === '');\n    if (shouldPromptForBrowserPermission && (await permission.prompt())) {\n      devices = await navigator.mediaDevices.enumerateDevices();\n    }\n    return devices.filter(device => device.kind === kind && device.label !== '' && device.deviceId !== 'default');\n  })());\n};\n/**\n * Tells if the browser supports audio output change on 'audio' elements,\n * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId.\n */\nconst checkIfAudioOutputChangeSupported = () => {\n  if (typeof document === 'undefined') return false;\n  const element = document.createElement('audio');\n  return 'setSinkId' in element;\n};\n/**\n * The default constraints used to request audio devices.\n */\nconst audioDeviceConstraints = {\n  audio: {\n    autoGainControl: true,\n    noiseSuppression: true,\n    echoCancellation: true\n  }\n};\n/**\n * The default constraints used to request video devices.\n */\nconst videoDeviceConstraints = {\n  video: {\n    width: 1280,\n    height: 720\n  }\n};\n/**\n * Keeps track of the browser permission to use microphone. This permission also\n * affects an ability to enumerate audio devices.\n */\nconst getAudioBrowserPermission = lazy(() => new BrowserPermission({\n  constraints: audioDeviceConstraints,\n  queryName: 'microphone'\n}));\n/**\n * Keeps track of the browser permission to use camera. This permission also\n * affects an ability to enumerate video devices.\n */\nconst getVideoBrowserPermission = lazy(() => new BrowserPermission({\n  constraints: videoDeviceConstraints,\n  queryName: 'camera'\n}));\nconst getDeviceChangeObserver = lazy(() => {\n  // 'addEventListener' is not available in React Native, returning\n  // an observable that will never fire\n  if (!navigator.mediaDevices.addEventListener) return from([]);\n  return fromEvent(navigator.mediaDevices, 'devicechange').pipe(map(() => undefined), debounceTime(500));\n});\n/**\n * Prompts the user for a permission to use audio devices (if not already granted\n * and was not prompted before) and lists the available 'audioinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */\nconst getAudioDevices = lazy(() => {\n  return merge(getDeviceChangeObserver(), getAudioBrowserPermission().asObservable()).pipe(startWith(undefined), concatMap(() => getDevices(getAudioBrowserPermission(), 'audioinput')), shareReplay(1));\n});\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'videoinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */\nconst getVideoDevices = lazy(() => {\n  return merge(getDeviceChangeObserver(), getVideoBrowserPermission().asObservable()).pipe(startWith(undefined), concatMap(() => getDevices(getVideoBrowserPermission(), 'videoinput')), shareReplay(1));\n});\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'audiooutput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */\nconst getAudioOutputDevices = lazy(() => {\n  return merge(getDeviceChangeObserver(), getAudioBrowserPermission().asObservable()).pipe(startWith(undefined), concatMap(() => getDevices(getAudioBrowserPermission(), 'audiooutput')), shareReplay(1));\n});\nconst getStream = async constraints => {\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  if (isFirefox()) {\n    // When enumerating devices, Firefox will hide device labels unless there's been\n    // an active user media stream on the page. So we force device list updates after\n    // every successful getUserMedia call.\n    navigator.mediaDevices.dispatchEvent(new Event('devicechange'));\n  }\n  return stream;\n};\nfunction isNotFoundOrOverconstrainedError(error) {\n  if (!error || typeof error !== 'object') {\n    return false;\n  }\n  if ('name' in error && typeof error.name === 'string') {\n    const name = error.name;\n    if (['OverconstrainedError', 'NotFoundError'].includes(name)) {\n      return true;\n    }\n  }\n  if ('message' in error && typeof error.message === 'string') {\n    const message = error.message;\n    if (message.startsWith('OverconstrainedError')) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns the new `MediaStream` fulfilling the given constraints.\n */\nconst getAudioStream = async trackConstraints => {\n  const constraints = {\n    audio: {\n      ...audioDeviceConstraints.audio,\n      ...trackConstraints\n    }\n  };\n  try {\n    await getAudioBrowserPermission().prompt({\n      throwOnNotAllowed: true,\n      forcePrompt: true\n    });\n    return await getStream(constraints);\n  } catch (error) {\n    if (isNotFoundOrOverconstrainedError(error) && trackConstraints?.deviceId) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        deviceId,\n        ...relaxedConstraints\n      } = trackConstraints;\n      getLogger(['devices'])('warn', 'Failed to get audio stream, will try again with relaxed constraints', {\n        error,\n        constraints,\n        relaxedConstraints\n      });\n      return getAudioStream(relaxedConstraints);\n    }\n    getLogger(['devices'])('error', 'Failed to get audio stream', {\n      error,\n      constraints\n    });\n    throw error;\n  }\n};\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */\nconst getVideoStream = async trackConstraints => {\n  const constraints = {\n    video: {\n      ...videoDeviceConstraints.video,\n      ...trackConstraints\n    }\n  };\n  try {\n    await getVideoBrowserPermission().prompt({\n      throwOnNotAllowed: true,\n      forcePrompt: true\n    });\n    return await getStream(constraints);\n  } catch (error) {\n    if (isNotFoundOrOverconstrainedError(error) && trackConstraints?.deviceId) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        deviceId,\n        ...relaxedConstraints\n      } = trackConstraints;\n      getLogger(['devices'])('warn', 'Failed to get video stream, will try again with relaxed constraints', {\n        error,\n        constraints,\n        relaxedConstraints\n      });\n      return getVideoStream(relaxedConstraints);\n    }\n    getLogger(['devices'])('error', 'Failed to get video stream', {\n      error,\n      constraints\n    });\n    throw error;\n  }\n};\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n */\nconst getScreenShareStream = async options => {\n  try {\n    return await navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: {\n        channelCount: {\n          ideal: 2\n        },\n        echoCancellation: false,\n        autoGainControl: false,\n        noiseSuppression: false\n      },\n      // @ts-expect-error - not present in types yet\n      systemAudio: 'include',\n      ...options\n    });\n  } catch (e) {\n    getLogger(['devices'])('error', 'Failed to get screen share stream', e);\n    throw e;\n  }\n};\nconst deviceIds$ = typeof navigator !== 'undefined' && typeof navigator.mediaDevices !== 'undefined' ? getDeviceChangeObserver().pipe(startWith(undefined), concatMap(() => navigator.mediaDevices.enumerateDevices()), shareReplay(1)) : undefined;\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */\nconst disposeOfMediaStream = stream => {\n  if (!stream.active) return;\n  stream.getTracks().forEach(track => {\n    track.stop();\n  });\n  // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n  if (typeof stream.release === 'function') {\n    // @ts-expect-error - release() is present in react-native-webrtc\n    stream.release();\n  }\n};\n\n/**\n * Checks if the current platform is a mobile device.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n */\nconst isMobile = () => /Mobi/i.test(navigator.userAgent);\nclass InputMediaDeviceManager {\n  constructor(call, state, trackType) {\n    this.call = call;\n    this.state = state;\n    this.trackType = trackType;\n    /**\n     * if true, stops the media stream when call is left\n     */\n    this.stopOnLeave = true;\n    this.subscriptions = [];\n    this.isTrackStoppedDueToTrackEnd = false;\n    this.filters = [];\n    this.statusChangeConcurrencyTag = Symbol('statusChangeConcurrencyTag');\n    this.filterRegistrationConcurrencyTag = Symbol('filterRegistrationConcurrencyTag');\n    /**\n     * Disposes the manager.\n     *\n     * @internal\n     */\n    this.dispose = () => {\n      this.subscriptions.forEach(s => s());\n    };\n    this.logger = getLogger([`${TrackType[trackType].toLowerCase()} manager`]);\n    if (deviceIds$ && !isReactNative() && (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)) {\n      this.handleDisconnectedOrReplacedDevices();\n    }\n  }\n  /**\n   * Lists the available audio/video devices\n   *\n   * Note: It prompts the user for a permission to use devices (if not already granted)\n   *\n   * @returns an Observable that will be updated if a device is connected or disconnected\n   */\n  listDevices() {\n    return this.getDevices();\n  }\n  /**\n   * Returns `true` when this device is in enabled state.\n   */\n  get enabled() {\n    return this.state.status === 'enabled';\n  }\n  /**\n   * Starts stream.\n   */\n  async enable() {\n    this.state.prevStatus = this.state.optimisticStatus;\n    if (this.state.optimisticStatus === 'enabled') {\n      return;\n    }\n    this.state.setPendingStatus('enabled');\n    await withCancellation(this.statusChangeConcurrencyTag, async signal => {\n      try {\n        await this.unmuteStream();\n        this.state.setStatus('enabled');\n      } finally {\n        if (!signal.aborted) {\n          this.state.setPendingStatus(this.state.status);\n        }\n      }\n    });\n  }\n  /**\n   * Stops or pauses the stream based on state.disableMode\n   * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n   */\n  async disable(forceStop = false) {\n    this.state.prevStatus = this.state.optimisticStatus;\n    if (!forceStop && this.state.optimisticStatus === 'disabled') {\n      return;\n    }\n    this.state.setPendingStatus('disabled');\n    await withCancellation(this.statusChangeConcurrencyTag, async signal => {\n      try {\n        const stopTracks = forceStop || this.state.disableMode === 'stop-tracks';\n        await this.muteStream(stopTracks);\n        this.state.setStatus('disabled');\n      } finally {\n        if (!signal.aborted) {\n          this.state.setPendingStatus(this.state.status);\n        }\n      }\n    });\n  }\n  /**\n   * Returns a promise that resolves when all pe\n   */\n  async statusChangeSettled() {\n    await settled(this.statusChangeConcurrencyTag);\n  }\n  /**\n   * If status was previously enabled, it will re-enable the device.\n   */\n  async resume() {\n    if (this.state.prevStatus === 'enabled' && this.state.status !== 'enabled') {\n      await this.enable();\n    }\n  }\n  /**\n   * If the current device status is disabled, it will enable the device,\n   * else it will disable it.\n   */\n  async toggle() {\n    if (this.state.optimisticStatus === 'enabled') {\n      return await this.disable();\n    } else {\n      return await this.enable();\n    }\n  }\n  /**\n   * Registers a filter that will be applied to the stream.\n   *\n   * The registered filter will get the existing stream, and it should return\n   * a new stream with the applied filter.\n   *\n   * @param filter the filter to register.\n   * @returns MediaStreamFilterRegistrationResult\n   */\n  registerFilter(filter) {\n    const entry = {\n      start: filter,\n      stop: undefined\n    };\n    const registered = withoutConcurrency(this.filterRegistrationConcurrencyTag, async () => {\n      this.filters.push(entry);\n      await this.applySettingsToStream();\n    });\n    return {\n      registered,\n      unregister: () => withoutConcurrency(this.filterRegistrationConcurrencyTag, async () => {\n        entry.stop?.();\n        this.filters = this.filters.filter(f => f !== entry);\n        await this.applySettingsToStream();\n      })\n    };\n  }\n  /**\n   * Will set the default constraints for the device.\n   *\n   * @param constraints the constraints to set.\n   */\n  setDefaultConstraints(constraints) {\n    this.state.setDefaultConstraints(constraints);\n  }\n  /**\n   * Selects a device.\n   *\n   * Note: This method is not supported in React Native\n   * @param deviceId the device id to select.\n   */\n  async select(deviceId) {\n    if (isReactNative()) {\n      throw new Error('This method is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for reference.');\n    }\n    const prevDeviceId = this.state.selectedDevice;\n    if (deviceId === prevDeviceId) {\n      return;\n    }\n    try {\n      this.state.setDevice(deviceId);\n      await this.applySettingsToStream();\n    } catch (error) {\n      this.state.setDevice(prevDeviceId);\n      throw error;\n    }\n  }\n  async applySettingsToStream() {\n    await withCancellation(this.statusChangeConcurrencyTag, async () => {\n      if (this.enabled) {\n        await this.muteStream();\n        await this.unmuteStream();\n      }\n    });\n  }\n  publishStream(stream) {\n    return this.call.publish(stream, this.trackType);\n  }\n  stopPublishStream() {\n    return this.call.stopPublish(this.trackType);\n  }\n  getTracks() {\n    return this.state.mediaStream?.getTracks() ?? [];\n  }\n  async muteStream(stopTracks = true) {\n    const mediaStream = this.state.mediaStream;\n    if (!mediaStream) return;\n    this.logger('debug', `${stopTracks ? 'Stopping' : 'Disabling'} stream`);\n    if (this.call.state.callingState === CallingState.JOINED) {\n      await this.stopPublishStream();\n    }\n    this.muteLocalStream(stopTracks);\n    const allEnded = this.getTracks().every(t => t.readyState === 'ended');\n    if (allEnded) {\n      // @ts-expect-error release() is present in react-native-webrtc\n      if (typeof mediaStream.release === 'function') {\n        // @ts-expect-error called to dispose the stream in RN\n        mediaStream.release();\n      }\n      this.state.setMediaStream(undefined, undefined);\n      this.filters.forEach(entry => entry.stop?.());\n    }\n  }\n  disableTracks() {\n    this.getTracks().forEach(track => {\n      if (track.enabled) track.enabled = false;\n    });\n  }\n  enableTracks() {\n    this.getTracks().forEach(track => {\n      if (!track.enabled) track.enabled = true;\n    });\n  }\n  stopTracks() {\n    this.getTracks().forEach(track => {\n      if (track.readyState === 'live') track.stop();\n    });\n  }\n  muteLocalStream(stopTracks) {\n    if (!this.state.mediaStream) {\n      return;\n    }\n    if (stopTracks) {\n      this.stopTracks();\n    } else {\n      this.disableTracks();\n    }\n  }\n  async unmuteStream() {\n    this.logger('debug', 'Starting stream');\n    let stream;\n    let rootStream;\n    try {\n      if (this.state.mediaStream && this.getTracks().every(t => t.readyState === 'live')) {\n        stream = this.state.mediaStream;\n        this.enableTracks();\n      } else {\n        const defaultConstraints = this.state.defaultConstraints;\n        const constraints = {\n          ...defaultConstraints,\n          deviceId: this.state.selectedDevice ? {\n            exact: this.state.selectedDevice\n          } : undefined\n        };\n        /**\n         * Chains two media streams together.\n         *\n         * In our case, filters MediaStreams are derived from their parent MediaStream.\n         * However, once a child filter's track is stopped,\n         * the tracks of the parent MediaStream aren't automatically stopped.\n         * This leads to a situation where the camera indicator light is still on\n         * even though the user stopped publishing video.\n         *\n         * This function works around this issue by stopping the parent MediaStream's tracks\n         * as well once the child filter's tracks are stopped.\n         *\n         * It works by patching the stop() method of the child filter's tracks to also stop\n         * the parent MediaStream's tracks of the same type. Here we assume that\n         * the parent MediaStream has only one track of each type.\n         *\n         * @param parentStream the parent MediaStream. Omit for the root stream.\n         */\n        const chainWith = parentStream => async filterStream => {\n          if (!parentStream) return filterStream;\n          // TODO OL: take care of track.enabled property as well\n          const parent = await parentStream;\n          filterStream.getTracks().forEach(track => {\n            const originalStop = track.stop;\n            track.stop = function stop() {\n              originalStop.call(track);\n              parent.getTracks().forEach(parentTrack => {\n                if (parentTrack.kind === track.kind) {\n                  parentTrack.stop();\n                }\n              });\n            };\n          });\n          parent.getTracks().forEach(parentTrack => {\n            // When the parent stream abruptly ends, we propagate the event\n            // to the filter stream.\n            // This usually happens when the camera/microphone permissions\n            // are revoked or when the device is disconnected.\n            const handleParentTrackEnded = () => {\n              filterStream.getTracks().forEach(track => {\n                if (parentTrack.kind !== track.kind) return;\n                track.stop();\n                track.dispatchEvent(new Event('ended')); // propagate the event\n              });\n            };\n            parentTrack.addEventListener('ended', handleParentTrackEnded);\n            this.subscriptions.push(() => {\n              parentTrack.removeEventListener('ended', handleParentTrackEnded);\n            });\n          });\n          return filterStream;\n        };\n        // the rootStream represents the stream coming from the actual device\n        // e.g. camera or microphone stream\n        rootStream = this.getStream(constraints);\n        // we publish the last MediaStream of the chain\n        stream = await this.filters.reduce((parent, entry) => parent.then(inputStream => {\n          const {\n            stop,\n            output\n          } = entry.start(inputStream);\n          entry.stop = stop;\n          return output;\n        }).then(chainWith(parent), error => {\n          this.logger('warn', 'Filter failed to start and will be ignored', error);\n          return parent;\n        }), rootStream);\n      }\n      if (this.call.state.callingState === CallingState.JOINED) {\n        await this.publishStream(stream);\n      }\n      if (this.state.mediaStream !== stream) {\n        this.state.setMediaStream(stream, await rootStream);\n        const handleTrackEnded = async () => {\n          await this.statusChangeSettled();\n          if (this.enabled) {\n            this.isTrackStoppedDueToTrackEnd = true;\n            setTimeout(() => {\n              this.isTrackStoppedDueToTrackEnd = false;\n            }, 2000);\n            await this.disable();\n          }\n        };\n        const createTrackMuteHandler = muted => () => {\n          if (!isMobile() || this.trackType !== TrackType.VIDEO) return;\n          this.call.notifyTrackMuteState(muted, this.trackType).catch(err => {\n            this.logger('warn', 'Error while notifying track mute state', err);\n          });\n        };\n        stream.getTracks().forEach(track => {\n          const muteHandler = createTrackMuteHandler(true);\n          const unmuteHandler = createTrackMuteHandler(false);\n          track.addEventListener('mute', muteHandler);\n          track.addEventListener('unmute', unmuteHandler);\n          track.addEventListener('ended', handleTrackEnded);\n          this.subscriptions.push(() => {\n            track.removeEventListener('mute', muteHandler);\n            track.removeEventListener('unmute', unmuteHandler);\n            track.removeEventListener('ended', handleTrackEnded);\n          });\n        });\n      }\n    } catch (err) {\n      if (rootStream) {\n        disposeOfMediaStream(await rootStream);\n      }\n      throw err;\n    }\n  }\n  get mediaDeviceKind() {\n    if (this.trackType === TrackType.AUDIO) {\n      return 'audioinput';\n    }\n    if (this.trackType === TrackType.VIDEO) {\n      return 'videoinput';\n    }\n    return '';\n  }\n  handleDisconnectedOrReplacedDevices() {\n    this.subscriptions.push(createSubscription(combineLatest([deviceIds$.pipe(pairwise()), this.state.selectedDevice$]), async ([[prevDevices, currentDevices], deviceId]) => {\n      try {\n        if (!deviceId) return;\n        await this.statusChangeSettled();\n        let isDeviceDisconnected = false;\n        let isDeviceReplaced = false;\n        const currentDevice = this.findDevice(currentDevices, deviceId);\n        const prevDevice = this.findDevice(prevDevices, deviceId);\n        if (!currentDevice && prevDevice) {\n          isDeviceDisconnected = true;\n        } else if (currentDevice && prevDevice && currentDevice.deviceId === prevDevice.deviceId && currentDevice.groupId !== prevDevice.groupId) {\n          isDeviceReplaced = true;\n        }\n        if (isDeviceDisconnected) {\n          await this.disable();\n          await this.select(undefined);\n        }\n        if (isDeviceReplaced) {\n          if (this.isTrackStoppedDueToTrackEnd && this.state.status === 'disabled') {\n            await this.enable();\n            this.isTrackStoppedDueToTrackEnd = false;\n          } else {\n            await this.applySettingsToStream();\n          }\n        }\n      } catch (err) {\n        this.logger('warn', 'Unexpected error while handling disconnected or replaced device', err);\n      }\n    }));\n  }\n  findDevice(devices, deviceId) {\n    const kind = this.mediaDeviceKind;\n    return devices.find(d => d.deviceId === deviceId && d.kind === kind);\n  }\n}\nclass InputMediaDeviceManagerState {\n  /**\n   * Constructs new InputMediaDeviceManagerState instance.\n   *\n   * @param disableMode the disable mode to use.\n   * @param permission the BrowserPermission to use for querying.\n   * `undefined` means no permission is required.\n   */\n  constructor(disableMode = 'stop-tracks', permission) {\n    this.disableMode = disableMode;\n    this.statusSubject = new BehaviorSubject(undefined);\n    this.optimisticStatusSubject = new BehaviorSubject(undefined);\n    this.mediaStreamSubject = new BehaviorSubject(undefined);\n    this.selectedDeviceSubject = new BehaviorSubject(undefined);\n    this.defaultConstraintsSubject = new BehaviorSubject(undefined);\n    /**\n     * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n     *\n     */\n    this.mediaStream$ = this.mediaStreamSubject.asObservable();\n    /**\n     * An Observable that emits the currently selected device\n     */\n    this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe(distinctUntilChanged());\n    /**\n     * An Observable that emits the device status\n     */\n    this.status$ = this.statusSubject.asObservable().pipe(distinctUntilChanged());\n    /**\n     * An Observable the reflects the requested device status. Useful for optimistic UIs\n     */\n    this.optimisticStatus$ = this.optimisticStatusSubject.asObservable().pipe(distinctUntilChanged());\n    /**\n     * The default constraints for the device.\n     */\n    this.defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n    this.hasBrowserPermission$ = permission ? permission.asObservable().pipe(shareReplay(1)) : of(true);\n    this.browserPermissionState$ = permission ? permission.asStateObservable().pipe(shareReplay(1)) : of('prompt');\n    this.isPromptingPermission$ = permission ? permission.getIsPromptingObservable().pipe(shareReplay(1)) : of(false);\n  }\n  /**\n   * The device status\n   */\n  get status() {\n    return getCurrentValue(this.status$);\n  }\n  /**\n   * The requested device status. Useful for optimistic UIs\n   */\n  get optimisticStatus() {\n    return getCurrentValue(this.optimisticStatus$);\n  }\n  /**\n   * The currently selected device\n   */\n  get selectedDevice() {\n    return getCurrentValue(this.selectedDevice$);\n  }\n  /**\n   * The current media stream, or `undefined` if the device is currently disabled.\n   */\n  get mediaStream() {\n    return getCurrentValue(this.mediaStream$);\n  }\n  /**\n   * @internal\n   * @param status\n   */\n  setStatus(status) {\n    setCurrentValue(this.statusSubject, status);\n  }\n  /**\n   * @internal\n   * @param pendingStatus\n   */\n  setPendingStatus(pendingStatus) {\n    setCurrentValue(this.optimisticStatusSubject, pendingStatus);\n  }\n  /**\n   * Updates the `mediaStream` state variable.\n   *\n   * @internal\n   * @param stream the stream to set.\n   * @param rootStream the root stream, applicable when filters are used\n   * as this is the stream that holds the actual deviceId information.\n   */\n  setMediaStream(stream, rootStream) {\n    setCurrentValue(this.mediaStreamSubject, stream);\n    if (rootStream) {\n      this.setDevice(this.getDeviceIdFromStream(rootStream));\n    }\n  }\n  /**\n   * @internal\n   * @param deviceId the device id to set.\n   */\n  setDevice(deviceId) {\n    setCurrentValue(this.selectedDeviceSubject, deviceId);\n  }\n  /**\n   * Gets the default constraints for the device.\n   */\n  get defaultConstraints() {\n    return getCurrentValue(this.defaultConstraints$);\n  }\n  /**\n   * Sets the default constraints for the device.\n   *\n   * @internal\n   * @param constraints the constraints to set.\n   */\n  setDefaultConstraints(constraints) {\n    setCurrentValue(this.defaultConstraintsSubject, constraints);\n  }\n}\nclass CameraManagerState extends InputMediaDeviceManagerState {\n  constructor() {\n    super('stop-tracks', getVideoBrowserPermission());\n    this.directionSubject = new BehaviorSubject(undefined);\n    this.direction$ = this.directionSubject.asObservable().pipe(distinctUntilChanged());\n  }\n  /**\n   * The preferred camera direction\n   * front - means the camera facing the user\n   * back - means the camera facing the environment\n   */\n  get direction() {\n    return getCurrentValue(this.direction$);\n  }\n  /**\n   * @internal\n   */\n  setDirection(direction) {\n    setCurrentValue(this.directionSubject, direction);\n  }\n  /**\n   * @internal\n   */\n  setMediaStream(stream, rootStream) {\n    super.setMediaStream(stream, rootStream);\n    if (stream) {\n      // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n      const direction = isReactNative() ? this.direction : stream.getVideoTracks()[0]?.getSettings().facingMode === 'environment' ? 'back' : 'front';\n      this.setDirection(direction);\n    }\n  }\n  getDeviceIdFromStream(stream) {\n    const [track] = stream.getVideoTracks();\n    return track?.getSettings().deviceId;\n  }\n}\nclass CameraManager extends InputMediaDeviceManager {\n  /**\n   * Constructs a new CameraManager.\n   *\n   * @param call the call instance.\n   */\n  constructor(call) {\n    super(call, new CameraManagerState(), TrackType.VIDEO);\n    this.targetResolution = {\n      width: 1280,\n      height: 720\n    };\n  }\n  isDirectionSupportedByDevice() {\n    return isReactNative() || isMobile();\n  }\n  /**\n   * Select the camera direction.\n   *\n   * @param direction the direction of the camera to select.\n   */\n  async selectDirection(direction) {\n    if (this.isDirectionSupportedByDevice()) {\n      if (isReactNative()) {\n        const videoTrack = this.getTracks()[0];\n        if (!videoTrack) {\n          this.logger('warn', 'No video track found to do direction selection');\n          return;\n        }\n        await videoTrack.applyConstraints({\n          facingMode: direction === 'front' ? 'user' : 'environment'\n        });\n        this.state.setDirection(direction);\n        this.state.setDevice(undefined);\n      } else {\n        // web mobile\n        this.state.setDirection(direction);\n        // Providing both device id and direction doesn't work, so we deselect the device\n        this.state.setDevice(undefined);\n        this.getTracks().forEach(track => {\n          track.stop();\n        });\n        await this.unmuteStream();\n      }\n    } else {\n      this.logger('warn', 'Camera direction ignored for desktop devices');\n    }\n  }\n  /**\n   * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n   *\n   * Note: if there is no available camera with the desired direction, this method will do nothing.\n   * @returns\n   */\n  async flip() {\n    const newDirection = this.state.direction === 'front' ? 'back' : 'front';\n    await this.selectDirection(newDirection);\n  }\n  /**\n   * @internal\n   */\n  async selectTargetResolution(resolution) {\n    this.targetResolution.height = resolution.height;\n    this.targetResolution.width = resolution.width;\n    if (this.state.optimisticStatus === 'enabled') {\n      try {\n        await this.statusChangeSettled();\n      } catch (error) {\n        // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n        this.logger('warn', 'could not apply target resolution', error);\n      }\n    }\n    if (this.enabled && this.state.mediaStream) {\n      const [videoTrack] = this.state.mediaStream.getVideoTracks();\n      if (!videoTrack) return;\n      const {\n        width,\n        height\n      } = videoTrack.getSettings();\n      if (width !== this.targetResolution.width || height !== this.targetResolution.height) {\n        await this.applySettingsToStream();\n        this.logger('debug', `${width}x${height} target resolution applied to media stream`);\n      }\n    }\n  }\n  /**\n   * Applies the video settings to the camera.\n   *\n   * @param settings the video settings to apply.\n   * @param publish whether to publish the stream after applying the settings.\n   */\n  async apply(settings, publish) {\n    const hasPublishedVideo = !!this.call.state.localParticipant?.videoStream;\n    const hasPermission = this.call.permissionsContext.hasPermission(OwnCapability.SEND_AUDIO);\n    if (hasPublishedVideo || !hasPermission) return;\n    // Wait for any in progress camera operation\n    await this.statusChangeSettled();\n    const {\n      target_resolution,\n      camera_facing,\n      camera_default_on\n    } = settings;\n    await this.selectTargetResolution(target_resolution);\n    // Set camera direction if it's not yet set\n    if (!this.state.direction && !this.state.selectedDevice) {\n      this.state.setDirection(camera_facing === 'front' ? 'front' : 'back');\n    }\n    if (!publish) return;\n    const {\n      mediaStream\n    } = this.state;\n    if (this.enabled && mediaStream) {\n      // The camera is already enabled (e.g. lobby screen). Publish the stream\n      await this.publishStream(mediaStream);\n    } else if (this.state.status === undefined && camera_default_on) {\n      // Start camera if backend config specifies, and there is no local setting\n      await this.enable();\n    }\n  }\n  getDevices() {\n    return getVideoDevices();\n  }\n  getStream(constraints) {\n    constraints.width = this.targetResolution.width;\n    constraints.height = this.targetResolution.height;\n    // We can't set both device id and facing mode\n    // Device id has higher priority\n    if (!constraints.deviceId && this.state.direction && this.isDirectionSupportedByDevice()) {\n      constraints.facingMode = this.state.direction === 'front' ? 'user' : 'environment';\n    }\n    return getVideoStream(constraints);\n  }\n}\nclass MicrophoneManagerState extends InputMediaDeviceManagerState {\n  constructor(disableMode) {\n    super(disableMode, getAudioBrowserPermission());\n    this.speakingWhileMutedSubject = new BehaviorSubject(false);\n    this.speakingWhileMuted$ = this.speakingWhileMutedSubject.asObservable().pipe(distinctUntilChanged());\n  }\n  /**\n   * `true` if the user's microphone is muted but they'are speaking.\n   *\n   * This feature is not available in the React Native SDK.\n   */\n  get speakingWhileMuted() {\n    return getCurrentValue(this.speakingWhileMuted$);\n  }\n  /**\n   * @internal\n   */\n  setSpeakingWhileMuted(isSpeaking) {\n    setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n  }\n  getDeviceIdFromStream(stream) {\n    const [track] = stream.getAudioTracks();\n    return track?.getSettings().deviceId;\n  }\n}\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD = 150;\nconst FFT_SIZE = 128;\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */\nconst createSoundDetector = (audioStream, onSoundDetectedStateChanged, options = {}) => {\n  const {\n    detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS,\n    audioLevelThreshold = AUDIO_LEVEL_THRESHOLD,\n    fftSize = FFT_SIZE,\n    destroyStreamOnStop = true\n  } = options;\n  const audioContext = new AudioContext();\n  const analyser = audioContext.createAnalyser();\n  analyser.fftSize = fftSize;\n  const microphone = audioContext.createMediaStreamSource(audioStream);\n  microphone.connect(analyser);\n  const intervalId = setInterval(() => {\n    const data = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(data);\n    const isSoundDetected = data.some(value => value >= audioLevelThreshold);\n    const averagedDataValue = data.reduce((pv, cv) => pv + cv, 0) / data.length;\n    const percentage = averagedDataValue > audioLevelThreshold ? 100 : Math.round(averagedDataValue / audioLevelThreshold * 100);\n    // When the track is disabled, it takes time for the buffer to empty\n    // This check will ensure that we don't send anything if the track is disabled\n    if (audioStream.getAudioTracks()[0]?.enabled) {\n      onSoundDetectedStateChanged({\n        isSoundDetected,\n        audioLevel: percentage\n      });\n    } else {\n      onSoundDetectedStateChanged({\n        isSoundDetected: false,\n        audioLevel: 0\n      });\n    }\n  }, detectionFrequencyInMs);\n  return async function stop() {\n    clearInterval(intervalId);\n    // clean-up the AudioContext elements\n    microphone.disconnect();\n    analyser.disconnect();\n    if (audioContext.state !== 'closed') {\n      await audioContext.close();\n    }\n    // stop the stream\n    if (destroyStreamOnStop) {\n      audioStream.getTracks().forEach(track => {\n        track.stop();\n        audioStream.removeTrack(track);\n      });\n    }\n  };\n};\nclass RNSpeechDetector {\n  constructor() {\n    this.pc1 = new RTCPeerConnection({});\n    this.pc2 = new RTCPeerConnection({});\n  }\n  /**\n   * Starts the speech detection.\n   */\n  async start(onSoundDetectedStateChanged) {\n    try {\n      this.cleanupAudioStream();\n      const audioStream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      this.audioStream = audioStream;\n      this.pc1.addEventListener('icecandidate', async e => {\n        await this.pc2.addIceCandidate(e.candidate);\n      });\n      this.pc2.addEventListener('icecandidate', async e => {\n        await this.pc1.addIceCandidate(e.candidate);\n      });\n      this.pc2.addEventListener('track', e => {\n        e.streams[0].getTracks().forEach(track => {\n          // In RN, the remote track is automatically added to the audio output device\n          // so we need to mute it to avoid hearing the audio back\n          // @ts-expect-error _setVolume is a private method in react-native-webrtc\n          track._setVolume(0);\n        });\n      });\n      audioStream.getTracks().forEach(track => this.pc1.addTrack(track, audioStream));\n      const offer = await this.pc1.createOffer({});\n      await this.pc2.setRemoteDescription(offer);\n      await this.pc1.setLocalDescription(offer);\n      const answer = await this.pc2.createAnswer();\n      await this.pc1.setRemoteDescription(answer);\n      await this.pc2.setLocalDescription(answer);\n      const unsub = this.onSpeakingDetectedStateChange(onSoundDetectedStateChanged);\n      return () => {\n        unsub();\n        this.stop();\n      };\n    } catch (error) {\n      const logger = getLogger(['RNSpeechDetector']);\n      logger('error', 'error handling permissions: ', error);\n      return () => {};\n    }\n  }\n  /**\n   * Stops the speech detection and releases all allocated resources.\n   */\n  stop() {\n    this.pc1.close();\n    this.pc2.close();\n    this.cleanupAudioStream();\n  }\n  /**\n   * Public method that detects the audio levels and returns the status.\n   */\n  onSpeakingDetectedStateChange(onSoundDetectedStateChanged) {\n    const initialBaselineNoiseLevel = 0.13;\n    let baselineNoiseLevel = initialBaselineNoiseLevel;\n    let speechDetected = false;\n    let speechTimer;\n    let silenceTimer;\n    const audioLevelHistory = []; // Store recent audio levels for smoother detection\n    const historyLength = 10;\n    const silenceThreshold = 1.1;\n    const resetThreshold = 0.9;\n    const speechTimeout = 500; // Speech is set to true after 500ms of audio detection\n    const silenceTimeout = 5000; // Reset baseline after 5 seconds of silence\n    const checkAudioLevel = async () => {\n      try {\n        const stats = await this.pc1.getStats();\n        const report = flatten(stats);\n        // Audio levels are present inside stats of type `media-source` and of kind `audio`\n        const audioMediaSourceStats = report.find(stat => stat.type === 'media-source' && stat.kind === 'audio');\n        if (audioMediaSourceStats) {\n          const {\n            audioLevel\n          } = audioMediaSourceStats;\n          if (audioLevel) {\n            // Update audio level history (with max historyLength sized array)\n            audioLevelHistory.push(audioLevel);\n            if (audioLevelHistory.length > historyLength) {\n              audioLevelHistory.shift();\n            }\n            // Calculate average audio level\n            const avgAudioLevel = audioLevelHistory.reduce((a, b) => a + b, 0) / audioLevelHistory.length;\n            // Update baseline (if necessary) based on silence detection\n            if (avgAudioLevel < baselineNoiseLevel * silenceThreshold) {\n              if (!silenceTimer) {\n                silenceTimer = setTimeout(() => {\n                  baselineNoiseLevel = Math.min(avgAudioLevel * resetThreshold, initialBaselineNoiseLevel);\n                }, silenceTimeout);\n              }\n            } else {\n              clearTimeout(silenceTimer);\n              silenceTimer = undefined;\n            }\n            // Speech detection with hysteresis\n            if (avgAudioLevel > baselineNoiseLevel * 1.5) {\n              if (!speechDetected) {\n                speechDetected = true;\n                onSoundDetectedStateChanged({\n                  isSoundDetected: true,\n                  audioLevel\n                });\n              }\n              clearTimeout(speechTimer);\n              speechTimer = setTimeout(() => {\n                speechDetected = false;\n                onSoundDetectedStateChanged({\n                  isSoundDetected: false,\n                  audioLevel: 0\n                });\n              }, speechTimeout);\n            }\n          }\n        }\n      } catch (error) {\n        const logger = getLogger(['RNSpeechDetector']);\n        logger('error', 'error checking audio level from stats', error);\n      }\n    };\n    // Call checkAudioLevel periodically (every 100ms)\n    const intervalId = setInterval(checkAudioLevel, 100);\n    return () => {\n      clearInterval(intervalId);\n      clearTimeout(speechTimer);\n      clearTimeout(silenceTimer);\n    };\n  }\n  cleanupAudioStream() {\n    if (!this.audioStream) {\n      return;\n    }\n    this.audioStream.getTracks().forEach(track => track.stop());\n    if (\n    // @ts-expect-error release() is present in react-native-webrtc\n    typeof this.audioStream.release === 'function') {\n      // @ts-expect-error called to dispose the stream in RN\n      this.audioStream.release();\n    }\n  }\n}\nclass MicrophoneManager extends InputMediaDeviceManager {\n  constructor(call, disableMode = 'stop-tracks') {\n    super(call, new MicrophoneManagerState(disableMode), TrackType.AUDIO);\n    this.speakingWhileMutedNotificationEnabled = true;\n    this.soundDetectorConcurrencyTag = Symbol('soundDetectorConcurrencyTag');\n    this.subscriptions.push(createSafeAsyncSubscription(combineLatest([this.call.state.callingState$, this.call.state.ownCapabilities$, this.state.selectedDevice$, this.state.status$]), async ([callingState, ownCapabilities, deviceId, status]) => {\n      try {\n        if (callingState === CallingState.LEFT) {\n          await this.stopSpeakingWhileMutedDetection();\n        }\n        if (callingState !== CallingState.JOINED) return;\n        if (!this.speakingWhileMutedNotificationEnabled) return;\n        if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n          if (status === 'disabled') {\n            await this.startSpeakingWhileMutedDetection(deviceId);\n          } else {\n            await this.stopSpeakingWhileMutedDetection();\n          }\n        } else {\n          await this.stopSpeakingWhileMutedDetection();\n        }\n      } catch (err) {\n        this.logger('warn', 'Could not enable speaking while muted', err);\n      }\n    }));\n    this.subscriptions.push(createSubscription(this.call.state.callingState$, callingState => {\n      // do nothing when noise filtering isn't turned on\n      if (!this.noiseCancellationRegistration || !this.noiseCancellation) return;\n      const autoOn = this.call.state.settings?.audio.noise_cancellation?.mode === NoiseCancellationSettingsModeEnum.AUTO_ON;\n      if (autoOn && callingState === CallingState.JOINED) {\n        this.noiseCancellationRegistration.then(() => this.noiseCancellation?.enable()).catch(err => {\n          this.logger('warn', `Failed to enable noise cancellation`, err);\n          return this.call.notifyNoiseCancellationStopped();\n        });\n      } else if (callingState === CallingState.LEFT) {\n        this.noiseCancellationRegistration.then(() => this.noiseCancellation?.disable()).catch(err => {\n          this.logger('warn', `Failed to disable noise cancellation`, err);\n        });\n      }\n    }));\n  }\n  /**\n   * Enables noise cancellation for the microphone.\n   *\n   * Note: not supported in React Native.\n   * @param noiseCancellation - a noise cancellation instance to use.\n   */\n  async enableNoiseCancellation(noiseCancellation) {\n    if (isReactNative()) {\n      throw new Error('Noise cancellation is not supported in React Native');\n    }\n    const {\n      ownCapabilities,\n      settings\n    } = this.call.state;\n    const hasNoiseCancellationCapability = ownCapabilities.includes(OwnCapability.ENABLE_NOISE_CANCELLATION);\n    if (!hasNoiseCancellationCapability) {\n      throw new Error('Noise cancellation is not available.');\n    }\n    const noiseCancellationSettings = settings?.audio.noise_cancellation;\n    if (!noiseCancellationSettings || noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.DISABLED) {\n      throw new Error('Noise cancellation is disabled for this call type.');\n    }\n    try {\n      this.noiseCancellation = noiseCancellation;\n      // listen for change events and notify the SFU\n      this.noiseCancellationChangeUnsubscribe = this.noiseCancellation.on('change', enabled => {\n        if (enabled) {\n          this.call.notifyNoiseCancellationStarting().catch(err => {\n            this.logger('warn', `notifyNoiseCancellationStart failed`, err);\n          });\n        } else {\n          this.call.notifyNoiseCancellationStopped().catch(err => {\n            this.logger('warn', `notifyNoiseCancellationStop failed`, err);\n          });\n        }\n      });\n      const registrationResult = this.registerFilter(noiseCancellation.toFilter());\n      this.noiseCancellationRegistration = registrationResult.registered;\n      this.unregisterNoiseCancellation = registrationResult.unregister;\n      await this.noiseCancellationRegistration;\n      // handles an edge case where a noise cancellation is enabled after\n      // the participant as joined the call -> we immediately enable NC\n      if (noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.AUTO_ON && this.call.state.callingState === CallingState.JOINED) {\n        noiseCancellation.enable();\n      }\n    } catch (e) {\n      this.logger('warn', 'Failed to enable noise cancellation', e);\n      await this.disableNoiseCancellation().catch(err => {\n        this.logger('warn', 'Failed to disable noise cancellation', err);\n      });\n    }\n  }\n  /**\n   * Disables noise cancellation for the microphone.\n   *\n   * Note: not supported in React Native.\n   */\n  async disableNoiseCancellation() {\n    if (isReactNative()) {\n      throw new Error('Noise cancellation is not supported in React Native');\n    }\n    await (this.unregisterNoiseCancellation?.() ?? Promise.resolve()).then(() => this.noiseCancellation?.disable()).then(() => this.noiseCancellationChangeUnsubscribe?.()).catch(err => {\n      this.logger('warn', 'Failed to unregister noise cancellation', err);\n    });\n    await this.call.notifyNoiseCancellationStopped();\n  }\n  /**\n   * Enables speaking while muted notification.\n   */\n  async enableSpeakingWhileMutedNotification() {\n    this.speakingWhileMutedNotificationEnabled = true;\n    if (this.state.status === 'disabled') {\n      await this.startSpeakingWhileMutedDetection(this.state.selectedDevice);\n    }\n  }\n  /**\n   * Disables speaking while muted notification.\n   */\n  async disableSpeakingWhileMutedNotification() {\n    this.speakingWhileMutedNotificationEnabled = false;\n    await this.stopSpeakingWhileMutedDetection();\n  }\n  /**\n   * Applies the audio settings to the microphone.\n   * @param settings the audio settings to apply.\n   * @param publish whether to publish the stream after applying the settings.\n   */\n  async apply(settings, publish) {\n    if (!publish) return;\n    const hasPublishedAudio = !!this.call.state.localParticipant?.audioStream;\n    const hasPermission = this.call.permissionsContext.hasPermission(OwnCapability.SEND_AUDIO);\n    if (hasPublishedAudio || !hasPermission) return;\n    // Wait for any in progress mic operation\n    await this.statusChangeSettled();\n    // Publish media stream that was set before we joined\n    const {\n      mediaStream\n    } = this.state;\n    if (this.enabled && mediaStream) {\n      // The mic is already enabled (e.g. lobby screen). Publish the stream\n      await this.publishStream(mediaStream);\n    } else if (this.state.status === undefined && settings.mic_default_on) {\n      // Start mic if backend config specifies, and there is no local setting\n      await this.enable();\n    }\n  }\n  getDevices() {\n    return getAudioDevices();\n  }\n  getStream(constraints) {\n    return getAudioStream(constraints);\n  }\n  async startSpeakingWhileMutedDetection(deviceId) {\n    await withoutConcurrency(this.soundDetectorConcurrencyTag, async () => {\n      await this.stopSpeakingWhileMutedDetection();\n      if (isReactNative()) {\n        this.rnSpeechDetector = new RNSpeechDetector();\n        const unsubscribe = await this.rnSpeechDetector.start(event => {\n          this.state.setSpeakingWhileMuted(event.isSoundDetected);\n        });\n        this.soundDetectorCleanup = () => {\n          unsubscribe();\n          this.rnSpeechDetector = undefined;\n        };\n      } else {\n        // Need to start a new stream that's not connected to publisher\n        const stream = await this.getStream({\n          deviceId: {\n            exact: deviceId\n          }\n        });\n        this.soundDetectorCleanup = createSoundDetector(stream, event => {\n          this.state.setSpeakingWhileMuted(event.isSoundDetected);\n        });\n      }\n    });\n  }\n  async stopSpeakingWhileMutedDetection() {\n    await withoutConcurrency(this.soundDetectorConcurrencyTag, async () => {\n      if (!this.soundDetectorCleanup) return;\n      const soundDetectorCleanup = this.soundDetectorCleanup;\n      this.soundDetectorCleanup = undefined;\n      this.state.setSpeakingWhileMuted(false);\n      await soundDetectorCleanup();\n    });\n  }\n}\nclass ScreenShareState extends InputMediaDeviceManagerState {\n  constructor() {\n    super(...arguments);\n    this.audioEnabledSubject = new BehaviorSubject(true);\n    this.settingsSubject = new BehaviorSubject(undefined);\n    /**\n     * An Observable that emits the current screen share audio status.\n     */\n    this.audioEnabled$ = this.audioEnabledSubject.asObservable().pipe(distinctUntilChanged());\n    /**\n     * An Observable that emits the current screen share settings.\n     */\n    this.settings$ = this.settingsSubject.asObservable();\n    /**\n     * @internal\n     */\n    this.getDeviceIdFromStream = stream => {\n      const [track] = stream.getTracks();\n      return track?.getSettings().deviceId;\n    };\n  }\n  /**\n   * The current screen share audio status.\n   */\n  get audioEnabled() {\n    return getCurrentValue(this.audioEnabled$);\n  }\n  /**\n   * Set the current screen share audio status.\n   */\n  setAudioEnabled(isEnabled) {\n    setCurrentValue(this.audioEnabledSubject, isEnabled);\n  }\n  /**\n   * The current screen share settings.\n   */\n  get settings() {\n    return getCurrentValue(this.settings$);\n  }\n  /**\n   * Set the current screen share settings.\n   *\n   * @param settings the screen share settings to set.\n   */\n  setSettings(settings) {\n    setCurrentValue(this.settingsSubject, settings);\n  }\n}\nclass ScreenShareManager extends InputMediaDeviceManager {\n  constructor(call) {\n    super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n    this.subscriptions.push(createSubscription(call.state.settings$, settings => {\n      const maybeTargetResolution = settings?.screensharing.target_resolution;\n      if (maybeTargetResolution) {\n        this.setDefaultConstraints({\n          video: {\n            width: maybeTargetResolution.width,\n            height: maybeTargetResolution.height\n          }\n        });\n      }\n    }));\n  }\n  /**\n   * Will enable screen share audio options on supported platforms.\n   *\n   * Note: for ongoing screen share, audio won't be enabled until you\n   * re-publish the screen share stream.\n   */\n  enableScreenShareAudio() {\n    this.state.setAudioEnabled(true);\n  }\n  /**\n   * Will disable screen share audio options on supported platforms.\n   */\n  async disableScreenShareAudio() {\n    this.state.setAudioEnabled(false);\n    if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n      await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO);\n    }\n  }\n  /**\n   * Returns the current screen share settings.\n   */\n  getSettings() {\n    return this.state.settings;\n  }\n  /**\n   * Sets the current screen share settings.\n   *\n   * @param settings the settings to set.\n   */\n  setSettings(settings) {\n    this.state.setSettings(settings);\n  }\n  getDevices() {\n    return of([]); // there are no devices to be listed for Screen Share\n  }\n  getStream(constraints) {\n    if (!this.state.audioEnabled) {\n      constraints.audio = false;\n    }\n    return getScreenShareStream(constraints);\n  }\n  async stopPublishStream() {\n    return this.call.stopPublish(TrackType.SCREEN_SHARE, TrackType.SCREEN_SHARE_AUDIO);\n  }\n  /**\n   * Overrides the default `select` method to throw an error.\n   */\n  async select() {\n    throw new Error('This method is not supported in for Screen Share');\n  }\n}\nclass SpeakerState {\n  constructor() {\n    this.selectedDeviceSubject = new BehaviorSubject('');\n    this.volumeSubject = new BehaviorSubject(1);\n    /**\n     * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n     */\n    this.isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n    this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe(distinctUntilChanged());\n    this.volume$ = this.volumeSubject.asObservable().pipe(distinctUntilChanged());\n  }\n  /**\n   * The currently selected device\n   *\n   * Note: this feature is not supported in React Native\n   */\n  get selectedDevice() {\n    return getCurrentValue(this.selectedDevice$);\n  }\n  /**\n   * The currently selected volume\n   *\n   * Note: this feature is not supported in React Native\n   */\n  get volume() {\n    return getCurrentValue(this.volume$);\n  }\n  /**\n   * @internal\n   * @param deviceId\n   */\n  setDevice(deviceId) {\n    setCurrentValue(this.selectedDeviceSubject, deviceId);\n    tracer.trace('navigator.mediaDevices.setSinkId', deviceId);\n  }\n  /**\n   * @internal\n   * @param volume\n   */\n  setVolume(volume) {\n    setCurrentValue(this.volumeSubject, volume);\n  }\n}\nclass SpeakerManager {\n  constructor(call) {\n    this.state = new SpeakerState();\n    this.subscriptions = [];\n    /**\n     * Disposes the manager.\n     *\n     * @internal\n     */\n    this.dispose = () => {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    };\n    this.call = call;\n    if (deviceIds$ && !isReactNative()) {\n      this.subscriptions.push(combineLatest([deviceIds$, this.state.selectedDevice$]).subscribe(([devices, deviceId]) => {\n        if (!deviceId) {\n          return;\n        }\n        const device = devices.find(d => d.deviceId === deviceId && d.kind === 'audiooutput');\n        if (!device) {\n          this.select('');\n        }\n      }));\n    }\n  }\n  /**\n   * Lists the available audio output devices\n   *\n   * Note: It prompts the user for a permission to use devices (if not already granted)\n   * Note: This method is not supported in React Native\n   *\n   * @returns an Observable that will be updated if a device is connected or disconnected\n   */\n  listDevices() {\n    if (isReactNative()) {\n      throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    return getAudioOutputDevices();\n  }\n  /**\n   * Select a device.\n   *\n   * Note: This method is not supported in React Native\n   *\n   * @param deviceId empty string means the system default\n   */\n  select(deviceId) {\n    if (isReactNative()) {\n      throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    this.state.setDevice(deviceId);\n  }\n  /**\n   * Set the volume of the audio elements\n   * @param volume a number between 0 and 1.\n   *\n   * Note: This method is not supported in React Native\n   */\n  setVolume(volume) {\n    if (isReactNative()) {\n      throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    if (volume && (volume < 0 || volume > 1)) {\n      throw new Error('Volume must be between 0 and 1');\n    }\n    this.state.setVolume(volume);\n  }\n  /**\n   * Set the volume of a participant.\n   *\n   * Note: This method is not supported in React Native.\n   *\n   * @param sessionId the participant's session id.\n   * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n   */\n  setParticipantVolume(sessionId, volume) {\n    if (isReactNative()) {\n      throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    if (volume && (volume < 0 || volume > 1)) {\n      throw new Error('Volume must be between 0 and 1, or undefined');\n    }\n    this.call.state.updateParticipant(sessionId, {\n      audioVolume: volume\n    });\n  }\n}\n\n/**\n * An object representation of a `Call`.\n */\nclass Call {\n  /**\n   * Constructs a new `Call` instance.\n   *\n   * NOTE: Don't call the constructor directly, instead\n   * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n   * method to construct a `Call` instance.\n   */\n  constructor({\n    type,\n    id,\n    streamClient,\n    members,\n    ownCapabilities,\n    sortParticipantsBy,\n    clientStore,\n    ringing = false,\n    watching = false\n  }) {\n    /**\n     * The state of this call.\n     */\n    this.state = new CallState();\n    /**\n     * The permissions context of this call.\n     */\n    this.permissionsContext = new PermissionsContext();\n    /**\n     * The event dispatcher instance dedicated to this Call instance.\n     * @private\n     */\n    this.dispatcher = new Dispatcher();\n    this.sfuClientTag = 0;\n    this.reconnectConcurrencyTag = Symbol('reconnectConcurrencyTag');\n    this.reconnectAttempts = 0;\n    this.reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n    this.reconnectReason = '';\n    this.fastReconnectDeadlineSeconds = 0;\n    this.disconnectionTimeoutSeconds = 0;\n    this.lastOfflineTimestamp = 0;\n    // maintain the order of publishing tracks to restore them after a reconnection\n    // it shouldn't contain duplicates\n    this.trackPublishOrder = [];\n    this.hasJoinedOnce = false;\n    this.deviceSettingsAppliedOnce = false;\n    this.initialized = false;\n    this.joinLeaveConcurrencyTag = Symbol('joinLeaveConcurrencyTag');\n    /**\n     * A list hooks/functions to invoke when the call is left.\n     * A typical use case is to clean up some global event handlers.\n     * @private\n     */\n    this.leaveCallHooks = new Set();\n    this.streamClientEventHandlers = new Map();\n    /**\n     * Sets up the call instance.\n     *\n     * @internal an internal method and should not be used outside the SDK.\n     */\n    this.setup = async () => {\n      await withoutConcurrency(this.joinLeaveConcurrencyTag, async () => {\n        if (this.initialized) return;\n        this.leaveCallHooks.add(this.on('all', event => {\n          // update state with the latest event data\n          this.state.updateFromEvent(event);\n        }));\n        this.leaveCallHooks.add(this.on('changePublishOptions', event => {\n          this.currentPublishOptions = event.publishOptions;\n        }));\n        this.leaveCallHooks.add(registerEventHandlers(this, this.dispatcher));\n        this.registerEffects();\n        this.registerReconnectHandlers();\n        if (this.state.callingState === CallingState.LEFT) {\n          this.state.setCallingState(CallingState.IDLE);\n        }\n        this.initialized = true;\n      });\n    };\n    this.registerEffects = () => {\n      this.leaveCallHooks.add(\n      // handles updating the permissions context when the settings change.\n      createSubscription(this.state.settings$, settings => {\n        if (!settings) return;\n        this.permissionsContext.setCallSettings(settings);\n      }));\n      this.leaveCallHooks.add(\n      // handle the case when the user permissions are modified.\n      createSafeAsyncSubscription(this.state.ownCapabilities$, this.handleOwnCapabilitiesUpdated));\n      this.leaveCallHooks.add(\n      // handles the case when the user is blocked by the call owner.\n      createSubscription(this.state.blockedUserIds$, async blockedUserIds => {\n        if (!blockedUserIds || blockedUserIds.length === 0) return;\n        const currentUserId = this.currentUserId;\n        if (currentUserId && blockedUserIds.includes(currentUserId)) {\n          this.logger('info', 'Leaving call because of being blocked');\n          await this.leave({\n            message: 'user blocked'\n          }).catch(err => {\n            this.logger('error', 'Error leaving call after being blocked', err);\n          });\n        }\n      }));\n      this.leaveCallHooks.add(\n      // cancel auto-drop when call is accepted or rejected\n      createSubscription(this.state.session$, session => {\n        if (!this.ringing) return;\n        const receiverId = this.clientStore.connectedUser?.id;\n        if (!receiverId) return;\n        const isAcceptedByMe = Boolean(session?.accepted_by[receiverId]);\n        const isRejectedByMe = Boolean(session?.rejected_by[receiverId]);\n        if (isAcceptedByMe || isRejectedByMe) {\n          this.cancelAutoDrop();\n        }\n        const isAcceptedElsewhere = isAcceptedByMe && this.state.callingState === CallingState.RINGING;\n        if ((isAcceptedElsewhere || isRejectedByMe) && !hasPending(this.joinLeaveConcurrencyTag)) {\n          this.leave().catch(() => {\n            this.logger('error', 'Could not leave a call that was accepted or rejected elsewhere');\n          });\n        }\n      }));\n      this.leaveCallHooks.add(\n      // \"ringing\" mode effects and event handlers\n      createSubscription(this.ringingSubject, isRinging => {\n        if (!isRinging) return;\n        const callSession = this.state.session;\n        const receiver_id = this.clientStore.connectedUser?.id;\n        const ended_at = callSession?.ended_at;\n        const created_by_id = this.state.createdBy?.id;\n        const rejected_by = callSession?.rejected_by;\n        const accepted_by = callSession?.accepted_by;\n        let leaveCallIdle = false;\n        if (ended_at) {\n          // call was ended before it was accepted or rejected so we should leave it to idle\n          leaveCallIdle = true;\n        } else if (created_by_id && rejected_by) {\n          if (rejected_by[created_by_id]) {\n            // call was cancelled by the caller\n            leaveCallIdle = true;\n          }\n        } else if (receiver_id && rejected_by) {\n          if (rejected_by[receiver_id]) {\n            // call was rejected by the receiver in some other device\n            leaveCallIdle = true;\n          }\n        } else if (receiver_id && accepted_by) {\n          if (accepted_by[receiver_id]) {\n            // call was accepted by the receiver in some other device\n            leaveCallIdle = true;\n          }\n        }\n        if (leaveCallIdle) {\n          if (this.state.callingState !== CallingState.IDLE) {\n            this.state.setCallingState(CallingState.IDLE);\n          }\n        } else {\n          if (this.state.callingState === CallingState.IDLE) {\n            this.state.setCallingState(CallingState.RINGING);\n          }\n          this.scheduleAutoDrop();\n          this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n        }\n      }));\n    };\n    this.handleOwnCapabilitiesUpdated = async ownCapabilities => {\n      // update the permission context.\n      this.permissionsContext.setPermissions(ownCapabilities);\n      if (!this.publisher) return;\n      // check if the user still has publishing permissions and stop publishing if not.\n      const permissionToTrackType = {\n        [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n        [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n        [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE\n      };\n      for (const [permission, trackType] of Object.entries(permissionToTrackType)) {\n        const hasPermission = this.permissionsContext.hasPermission(permission);\n        if (hasPermission) continue;\n        try {\n          switch (trackType) {\n            case TrackType.AUDIO:\n              if (this.microphone.enabled) await this.microphone.disable();\n              break;\n            case TrackType.VIDEO:\n              if (this.camera.enabled) await this.camera.disable();\n              break;\n            case TrackType.SCREEN_SHARE:\n              if (this.screenShare.enabled) await this.screenShare.disable();\n              break;\n          }\n        } catch (err) {\n          this.logger('error', `Can't disable mic/camera/screenshare after revoked permissions`, err);\n        }\n      }\n    };\n    /**\n     * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n     * Please note that subscribing to WebSocket events is an advanced use-case.\n     * For most use-cases, it should be enough to watch for state changes.\n     *\n     * @param eventName the event name.\n     * @param fn the event handler.\n     */\n    this.on = (eventName, fn) => {\n      if (isSfuEvent(eventName)) {\n        return this.dispatcher.on(eventName, fn);\n      }\n      const offHandler = this.streamClient.on(eventName, e => {\n        const event = e;\n        if (event.call_cid && event.call_cid === this.cid) {\n          fn(event);\n        }\n      });\n      // keep the 'off' reference returned by the stream client\n      this.streamClientEventHandlers.set(fn, offHandler);\n      return () => {\n        this.off(eventName, fn);\n      };\n    };\n    /**\n     * Remove subscription for WebSocket events that were created by the `on` method.\n     *\n     * @param eventName the event name.\n     * @param fn the event handler.\n     */\n    this.off = (eventName, fn) => {\n      if (isSfuEvent(eventName)) {\n        return this.dispatcher.off(eventName, fn);\n      }\n      // unsubscribe from the stream client event by using the 'off' reference\n      const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n      if (registeredOffHandler) {\n        registeredOffHandler();\n      }\n    };\n    /**\n     * Leave the call and stop the media streams that were published by the call.\n     */\n    this.leave = async ({\n      reject,\n      reason,\n      message\n    } = {}) => {\n      await withoutConcurrency(this.joinLeaveConcurrencyTag, async () => {\n        const callingState = this.state.callingState;\n        if (callingState === CallingState.LEFT) {\n          throw new Error('Cannot leave call that has already been left.');\n        }\n        if (callingState === CallingState.JOINING) {\n          const waitUntilCallJoined = () => {\n            return new Promise(resolve => {\n              this.state.callingState$.pipe(takeWhile(state => state !== CallingState.JOINED, true)).subscribe(() => resolve());\n            });\n          };\n          await waitUntilCallJoined();\n        }\n        if (callingState === CallingState.RINGING && reject !== false) {\n          if (reject) {\n            await this.reject(reason ?? 'decline');\n          } else {\n            // if reject was undefined, we still have to cancel the call automatically\n            // when I am the creator and everyone else left the call\n            const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n            if (this.isCreatedByMe && !hasOtherParticipants) {\n              await this.reject('cancel');\n            }\n          }\n        }\n        this.statsReporter?.stop();\n        this.statsReporter = undefined;\n        this.sfuStatsReporter?.stop();\n        this.sfuStatsReporter = undefined;\n        this.subscriber?.dispose();\n        this.subscriber = undefined;\n        this.publisher?.dispose();\n        this.publisher = undefined;\n        await this.sfuClient?.leaveAndClose(message ?? reason ?? 'user is leaving the call');\n        this.sfuClient = undefined;\n        this.dynascaleManager.setSfuClient(undefined);\n        this.state.setCallingState(CallingState.LEFT);\n        this.state.setParticipants([]);\n        this.state.dispose();\n        // Call all leave call hooks, e.g. to clean up global event handlers\n        this.leaveCallHooks.forEach(hook => hook());\n        this.initialized = false;\n        this.hasJoinedOnce = false;\n        this.unifiedSessionId = undefined;\n        this.ringingSubject.next(false);\n        this.cancelAutoDrop();\n        this.clientStore.unregisterCall(this);\n        this.camera.dispose();\n        this.microphone.dispose();\n        this.screenShare.dispose();\n        this.speaker.dispose();\n        const stopOnLeavePromises = [];\n        if (this.camera.stopOnLeave) {\n          stopOnLeavePromises.push(this.camera.disable(true));\n        }\n        if (this.microphone.stopOnLeave) {\n          stopOnLeavePromises.push(this.microphone.disable(true));\n        }\n        if (this.screenShare.stopOnLeave) {\n          stopOnLeavePromises.push(this.screenShare.disable(true));\n        }\n        await Promise.all(stopOnLeavePromises);\n      });\n    };\n    /**\n     * Update from the call response from the \"call.ring\" event\n     * @internal\n     */\n    this.updateFromRingingEvent = async event => {\n      await this.setup();\n      // call.ring event excludes the call creator in the members list\n      // as the creator does not get the ring event\n      // so update the member list accordingly\n      const {\n        created_by,\n        settings\n      } = event.call;\n      const creator = this.state.members.find(m => m.user.id === created_by.id);\n      if (!creator) {\n        this.state.setMembers(event.members);\n      } else {\n        this.state.setMembers([creator, ...event.members]);\n      }\n      // update the call state with the latest event data\n      this.state.updateFromCallResponse(event.call);\n      this.watching = true;\n      this.ringingSubject.next(true);\n      // we remove the instance from the calls list to enable the following filter in useCalls hook\n      // const calls = useCalls().filter((c) => c.ringing);\n      const calls = this.clientStore.calls.filter(c => c.cid !== this.cid);\n      this.clientStore.setCalls([this, ...calls]);\n      await this.applyDeviceConfig(settings, false);\n    };\n    /**\n     * Loads the information about the call.\n     *\n     * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n     * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n     * @param params.members_limit the total number of members to return as part of the response.\n     */\n    this.get = async params => {\n      await this.setup();\n      const response = await this.streamClient.get(this.streamClientBasePath, params);\n      this.state.updateFromCallResponse(response.call);\n      this.state.setMembers(response.members);\n      this.state.setOwnCapabilities(response.own_capabilities);\n      if (params?.ring) {\n        // the call response can indicate where the call is still ringing or not\n        this.ringingSubject.next(true);\n      }\n      if (this.streamClient._hasConnectionID()) {\n        this.watching = true;\n        this.clientStore.registerCall(this);\n      }\n      await this.applyDeviceConfig(response.call.settings, false);\n      return response;\n    };\n    /**\n     * Loads the information about the call and creates it if it doesn't exist.\n     *\n     * @param data the data to create the call with.\n     */\n    this.getOrCreate = async data => {\n      await this.setup();\n      const response = await this.streamClient.post(this.streamClientBasePath, data);\n      this.state.updateFromCallResponse(response.call);\n      this.state.setMembers(response.members);\n      this.state.setOwnCapabilities(response.own_capabilities);\n      if (data?.ring) {\n        // the call response can indicate where the call is still ringing or not\n        this.ringingSubject.next(true);\n      }\n      if (this.streamClient._hasConnectionID()) {\n        this.watching = true;\n        this.clientStore.registerCall(this);\n      }\n      await this.applyDeviceConfig(response.call.settings, false);\n      return response;\n    };\n    /**\n     * Creates a call\n     *\n     * @param data the data to create the call with.\n     */\n    this.create = async data => {\n      return this.getOrCreate(data);\n    };\n    /**\n     * Deletes the call.\n     */\n    this.delete = async (data = {}) => {\n      return this.streamClient.post(`${this.streamClientBasePath}/delete`, data);\n    };\n    /**\n     * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n     * Will send a `call.ring` event to the call members.\n     */\n    this.ring = async () => {\n      return await this.get({\n        ring: true\n      });\n    };\n    /**\n     * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n     * Will send a `call.notification` event to the call members.\n     */\n    this.notify = async () => {\n      return await this.get({\n        notify: true\n      });\n    };\n    /**\n     * Marks the incoming call as accepted.\n     *\n     * This method should be used only for \"ringing\" call flows.\n     * {@link Call.join} invokes this method automatically for you when joining a call.\n     * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n     */\n    this.accept = async () => {\n      return this.streamClient.post(`${this.streamClientBasePath}/accept`);\n    };\n    /**\n     * Marks the incoming call as rejected.\n     *\n     * This method should be used only for \"ringing\" call flows.\n     * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n     * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n     *\n     * @param reason the reason for rejecting the call.\n     */\n    this.reject = async (reason = 'decline') => {\n      return this.streamClient.post(`${this.streamClientBasePath}/reject`, {\n        reason: reason\n      });\n    };\n    /**\n     * Will start to watch for call related WebSocket events and initiate a call session with the server.\n     *\n     * @returns a promise which resolves once the call join-flow has finished.\n     */\n    this.join = async ({\n      maxJoinRetries = 3,\n      ...data\n    } = {}) => {\n      await this.setup();\n      const callingState = this.state.callingState;\n      if ([CallingState.JOINED, CallingState.JOINING].includes(callingState)) {\n        throw new Error(`Illegal State: call.join() shall be called only once`);\n      }\n      this.state.setCallingState(CallingState.JOINING);\n      maxJoinRetries = Math.max(maxJoinRetries, 1);\n      for (let attempt = 0; attempt < maxJoinRetries; attempt++) {\n        try {\n          this.logger('trace', `Joining call (${attempt})`, this.cid);\n          return await this.doJoin(data);\n        } catch (err) {\n          this.logger('warn', `Failed to join call (${attempt})`, this.cid);\n          if (attempt === maxJoinRetries - 1) {\n            // restore the previous call state if the join-flow fails\n            this.state.setCallingState(callingState);\n            throw err;\n          }\n        }\n        await sleep(retryInterval(attempt));\n      }\n    };\n    /**\n     * Will make a single attempt to watch for call related WebSocket events\n     * and initiate a call session with the server.\n     *\n     * @returns a promise which resolves once the call join-flow has finished.\n     */\n    this.doJoin = async data => {\n      const connectStartTime = Date.now();\n      const callingState = this.state.callingState;\n      this.joinCallData = data;\n      this.logger('debug', 'Starting join flow');\n      this.state.setCallingState(CallingState.JOINING);\n      const performingMigration = this.reconnectStrategy === WebsocketReconnectStrategy.MIGRATE;\n      const performingRejoin = this.reconnectStrategy === WebsocketReconnectStrategy.REJOIN;\n      const performingFastReconnect = this.reconnectStrategy === WebsocketReconnectStrategy.FAST;\n      let statsOptions = this.sfuStatsReporter?.options;\n      if (!this.credentials || !statsOptions || performingRejoin || performingMigration) {\n        try {\n          const joinResponse = await this.doJoinRequest(data);\n          this.credentials = joinResponse.credentials;\n          statsOptions = joinResponse.stats_options;\n        } catch (error) {\n          // prevent triggering reconnect flow if the state is OFFLINE\n          const avoidRestoreState = this.state.callingState === CallingState.OFFLINE;\n          if (!avoidRestoreState) {\n            // restore the previous call state if the join-flow fails\n            this.state.setCallingState(callingState);\n          }\n          throw error;\n        }\n      }\n      const previousSfuClient = this.sfuClient;\n      const previousSessionId = previousSfuClient?.sessionId;\n      const isWsHealthy = !!previousSfuClient?.isHealthy;\n      const sfuClient = performingRejoin || performingMigration || !isWsHealthy ? new StreamSfuClient({\n        logTag: String(++this.sfuClientTag),\n        dispatcher: this.dispatcher,\n        credentials: this.credentials,\n        streamClient: this.streamClient,\n        enableTracing: statsOptions.enable_rtc_stats,\n        // a new session_id is necessary for the REJOIN strategy.\n        // we use the previous session_id if available\n        sessionId: performingRejoin ? undefined : previousSessionId,\n        onSignalClose: reason => this.handleSfuSignalClose(sfuClient, reason)\n      }) : previousSfuClient;\n      this.sfuClient = sfuClient;\n      this.dynascaleManager.setSfuClient(sfuClient);\n      const clientDetails = await getClientDetails();\n      // we don't need to send JoinRequest if we are re-using an existing healthy SFU client\n      if (previousSfuClient !== sfuClient) {\n        // prepare a generic SDP and send it to the SFU.\n        // these are throw-away SDPs that the SFU will use to determine\n        // the capabilities of the client (codec support, etc.)\n        const [subscriberSdp, publisherSdp] = await Promise.all([getGenericSdp('recvonly'), getGenericSdp('sendonly')]);\n        const isReconnecting = this.reconnectStrategy !== WebsocketReconnectStrategy.UNSPECIFIED;\n        const reconnectDetails = isReconnecting ? this.getReconnectDetails(data?.migrating_from, previousSessionId) : undefined;\n        const preferredPublishOptions = !isReconnecting ? this.getPreferredPublishOptions() : this.currentPublishOptions || [];\n        const preferredSubscribeOptions = !isReconnecting ? this.getPreferredSubscribeOptions() : [];\n        try {\n          const {\n            callState,\n            fastReconnectDeadlineSeconds,\n            publishOptions\n          } = await sfuClient.join({\n            subscriberSdp,\n            publisherSdp,\n            clientDetails,\n            fastReconnect: performingFastReconnect,\n            reconnectDetails,\n            preferredPublishOptions,\n            preferredSubscribeOptions\n          });\n          this.currentPublishOptions = publishOptions;\n          this.fastReconnectDeadlineSeconds = fastReconnectDeadlineSeconds;\n          if (callState) {\n            this.state.updateFromSfuCallState(callState, sfuClient.sessionId, reconnectDetails);\n          }\n        } catch (error) {\n          this.logger('warn', 'Join SFU request failed', error);\n          sfuClient.close(StreamSfuClient.ERROR_CONNECTION_UNHEALTHY, 'Join request failed, connection considered unhealthy');\n          // restore the previous call state if the join-flow fails\n          this.state.setCallingState(callingState);\n          throw error;\n        }\n      }\n      if (!performingMigration) {\n        // in MIGRATION, `JOINED` state is set in `this.reconnectMigrate()`\n        this.state.setCallingState(CallingState.JOINED);\n      }\n      this.hasJoinedOnce = true;\n      // when performing fast reconnect, or when we reuse the same SFU client,\n      // (ws remained healthy), we just need to restore the ICE connection\n      if (performingFastReconnect) {\n        // the SFU automatically issues an ICE restart on the subscriber\n        // we don't have to do it ourselves\n        await this.restoreICE(sfuClient, {\n          includeSubscriber: false\n        });\n      } else {\n        const connectionConfig = toRtcConfiguration(this.credentials.ice_servers);\n        this.initPublisherAndSubscriber({\n          sfuClient,\n          connectionConfig,\n          clientDetails,\n          statsOptions,\n          publishOptions: this.currentPublishOptions || [],\n          closePreviousInstances: !performingMigration\n        });\n      }\n      // make sure we only track connection timing if we are not calling this method as part of a reconnection flow\n      if (!performingRejoin && !performingFastReconnect && !performingMigration) {\n        this.sfuStatsReporter?.sendConnectionTime((Date.now() - connectStartTime) / 1000);\n      }\n      if (performingRejoin) {\n        const strategy = WebsocketReconnectStrategy[this.reconnectStrategy];\n        await previousSfuClient?.leaveAndClose(`Closing previous WS after reconnect with strategy: ${strategy}`);\n      } else if (!isWsHealthy) {\n        previousSfuClient?.close(StreamSfuClient.DISPOSE_OLD_SOCKET, 'Closing unhealthy WS after reconnect');\n      }\n      // device settings should be applied only once, we don't have to\n      // re-apply them on later reconnections or server-side data fetches\n      if (!this.deviceSettingsAppliedOnce && this.state.settings) {\n        await this.applyDeviceConfig(this.state.settings, true);\n        this.deviceSettingsAppliedOnce = true;\n      }\n      // We shouldn't persist the `ring` and `notify` state after joining the call\n      // as it's a one-time event and clashes with the potential reconnection attempts.\n      // When reconnecting, if provided with `ring: true` or `notify: true`,\n      // we will spam the other participants with push notifications and `call.ring` events.\n      delete this.joinCallData?.ring;\n      delete this.joinCallData?.notify;\n      // reset the reconnect strategy to unspecified after a successful reconnection\n      this.reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n      this.reconnectReason = '';\n      this.logger('info', `Joined call ${this.cid}`);\n    };\n    /**\n     * Prepares Reconnect Details object.\n     * @internal\n     */\n    this.getReconnectDetails = (migratingFromSfuId, previousSessionId) => {\n      const strategy = this.reconnectStrategy;\n      const performingRejoin = strategy === WebsocketReconnectStrategy.REJOIN;\n      const announcedTracks = this.publisher?.getAnnouncedTracksForReconnect() || [];\n      return {\n        strategy,\n        announcedTracks,\n        subscriptions: this.dynascaleManager.trackSubscriptions,\n        reconnectAttempt: this.reconnectAttempts,\n        fromSfuId: migratingFromSfuId || '',\n        previousSessionId: performingRejoin ? previousSessionId || '' : '',\n        reason: this.reconnectReason\n      };\n    };\n    /**\n     * Prepares the preferred codec for the call.\n     * This is an experimental client feature and subject to change.\n     * @internal\n     */\n    this.getPreferredPublishOptions = () => {\n      const {\n        preferredCodec,\n        fmtpLine,\n        preferredBitrate,\n        maxSimulcastLayers\n      } = this.clientPublishOptions || {};\n      if (!preferredCodec && !preferredBitrate && !maxSimulcastLayers) return [];\n      const codec = preferredCodec ? Codec.create({\n        name: preferredCodec.split('/').pop(),\n        fmtp: fmtpLine\n      }) : undefined;\n      const preferredPublishOptions = [PublishOption.create({\n        trackType: TrackType.VIDEO,\n        codec,\n        bitrate: preferredBitrate,\n        maxSpatialLayers: maxSimulcastLayers\n      })];\n      const screenShareSettings = this.screenShare.getSettings();\n      if (screenShareSettings) {\n        preferredPublishOptions.push(PublishOption.create({\n          trackType: TrackType.SCREEN_SHARE,\n          fps: screenShareSettings.maxFramerate,\n          bitrate: screenShareSettings.maxBitrate\n        }));\n      }\n      return preferredPublishOptions;\n    };\n    /**\n     * Prepares the preferred options for subscribing to tracks.\n     * This is an experimental client feature and subject to change.\n     * @internal\n     */\n    this.getPreferredSubscribeOptions = () => {\n      const {\n        subscriberCodec,\n        subscriberFmtpLine\n      } = this.clientPublishOptions || {};\n      if (!subscriberCodec || !subscriberFmtpLine) return [];\n      return [SubscribeOption.create({\n        trackType: TrackType.VIDEO,\n        codecs: [{\n          name: subscriberCodec.split('/').pop(),\n          fmtp: subscriberFmtpLine\n        }]\n      })];\n    };\n    /**\n     * Performs an ICE restart on both the Publisher and Subscriber Peer Connections.\n     * Uses the provided SFU client to restore the ICE connection.\n     *\n     * This method can throw an error if the ICE restart fails.\n     * This error should be handled by the reconnect loop,\n     * and a new reconnection shall be attempted.\n     *\n     * @internal\n     */\n    this.restoreICE = async (nextSfuClient, opts = {}) => {\n      const {\n        includeSubscriber = true,\n        includePublisher = true\n      } = opts;\n      if (this.subscriber) {\n        this.subscriber.setSfuClient(nextSfuClient);\n        if (includeSubscriber) {\n          await this.subscriber.restartIce();\n        }\n      }\n      if (this.publisher) {\n        this.publisher.setSfuClient(nextSfuClient);\n        if (includePublisher) {\n          await this.publisher.restartIce();\n        }\n      }\n    };\n    /**\n     * Initializes the Publisher and Subscriber Peer Connections.\n     * @internal\n     */\n    this.initPublisherAndSubscriber = opts => {\n      const {\n        sfuClient,\n        connectionConfig,\n        clientDetails,\n        statsOptions,\n        publishOptions,\n        closePreviousInstances\n      } = opts;\n      const {\n        enable_rtc_stats: enableTracing\n      } = statsOptions;\n      if (closePreviousInstances && this.subscriber) {\n        this.subscriber.dispose();\n      }\n      this.subscriber = new Subscriber({\n        sfuClient,\n        dispatcher: this.dispatcher,\n        state: this.state,\n        connectionConfig,\n        logTag: String(this.sfuClientTag),\n        enableTracing,\n        onUnrecoverableError: reason => {\n          this.reconnect(WebsocketReconnectStrategy.REJOIN, reason).catch(err => {\n            this.logger('warn', `[Reconnect] Error reconnecting after a subscriber error: ${reason}`, err);\n          });\n        }\n      });\n      // anonymous users can't publish anything hence, there is no need\n      // to create Publisher Peer Connection for them\n      const isAnonymous = this.streamClient.user?.type === 'anonymous';\n      if (!isAnonymous) {\n        if (closePreviousInstances && this.publisher) {\n          this.publisher.dispose();\n        }\n        this.publisher = new Publisher({\n          sfuClient,\n          dispatcher: this.dispatcher,\n          state: this.state,\n          connectionConfig,\n          publishOptions,\n          logTag: String(this.sfuClientTag),\n          enableTracing,\n          onUnrecoverableError: reason => {\n            this.reconnect(WebsocketReconnectStrategy.REJOIN, reason).catch(err => {\n              this.logger('warn', `[Reconnect] Error reconnecting after a publisher error: ${reason}`, err);\n            });\n          }\n        });\n      }\n      tracer.setEnabled(enableTracing);\n      this.statsReporter?.stop();\n      this.statsReporter = createStatsReporter({\n        subscriber: this.subscriber,\n        publisher: this.publisher,\n        state: this.state,\n        datacenter: sfuClient.edgeName\n      });\n      this.sfuStatsReporter?.stop();\n      if (statsOptions?.reporting_interval_ms > 0) {\n        this.unifiedSessionId ?? (this.unifiedSessionId = sfuClient.sessionId);\n        this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n          clientDetails,\n          options: statsOptions,\n          subscriber: this.subscriber,\n          publisher: this.publisher,\n          microphone: this.microphone,\n          camera: this.camera,\n          state: this.state,\n          unifiedSessionId: this.unifiedSessionId\n        });\n        this.sfuStatsReporter.start();\n      }\n    };\n    /**\n     * Retrieves credentials for joining the call.\n     *\n     * @internal\n     *\n     * @param data the join call data.\n     */\n    this.doJoinRequest = async data => {\n      const location = await this.streamClient.getLocationHint();\n      const request = {\n        ...data,\n        location\n      };\n      const joinResponse = await this.streamClient.post(`${this.streamClientBasePath}/join`, request);\n      this.state.updateFromCallResponse(joinResponse.call);\n      this.state.setMembers(joinResponse.members);\n      this.state.setOwnCapabilities(joinResponse.own_capabilities);\n      if (data?.ring) {\n        this.ringingSubject.next(true);\n      }\n      const isReconnecting = this.reconnectStrategy !== WebsocketReconnectStrategy.UNSPECIFIED;\n      if (!isReconnecting && this.ringing && !this.isCreatedByMe) {\n        // signals other users that I have accepted the incoming call.\n        await this.accept();\n      }\n      if (this.streamClient._hasConnectionID()) {\n        this.watching = true;\n        this.clientStore.registerCall(this);\n      }\n      return joinResponse;\n    };\n    /**\n     * Handles the closing of the SFU signal connection.\n     *\n     * @internal\n     * @param sfuClient the SFU client instance that was closed.\n     * @param reason the reason for the closure.\n     */\n    this.handleSfuSignalClose = (sfuClient, reason) => {\n      this.logger('debug', '[Reconnect] SFU signal connection closed');\n      const {\n        callingState\n      } = this.state;\n      if (\n      // SFU WS closed before we finished current join,\n      // no need to schedule reconnecting\n      callingState === CallingState.JOINING ||\n      // we are already in the process of reconnecting,\n      // no need to schedule another one\n      callingState === CallingState.RECONNECTING ||\n      // SFU WS closed as a result of unsuccessful join,\n      // and no further retries need to be made\n      callingState === CallingState.IDLE || callingState === CallingState.LEFT) return;\n      // normal close, no need to reconnect\n      if (sfuClient.isLeaving || sfuClient.isClosing) return;\n      this.reconnect(WebsocketReconnectStrategy.REJOIN, reason).catch(err => {\n        this.logger('warn', '[Reconnect] Error reconnecting', err);\n      });\n    };\n    /**\n     * Handles the reconnection flow.\n     *\n     * @internal\n     *\n     * @param strategy the reconnection strategy to use.\n     * @param reason the reason for the reconnection.\n     */\n    this.reconnect = async (strategy, reason) => {\n      if (this.state.callingState === CallingState.RECONNECTING || this.state.callingState === CallingState.RECONNECTING_FAILED) return;\n      return withoutConcurrency(this.reconnectConcurrencyTag, async () => {\n        this.logger('info', `[Reconnect] Reconnecting with strategy ${WebsocketReconnectStrategy[strategy]}`);\n        const reconnectStartTime = Date.now();\n        this.reconnectStrategy = strategy;\n        this.reconnectReason = reason;\n        do {\n          if (this.disconnectionTimeoutSeconds > 0 && (Date.now() - reconnectStartTime) / 1000 > this.disconnectionTimeoutSeconds) {\n            this.logger('warn', '[Reconnect] Stopping reconnection attempts after reaching disconnection timeout');\n            this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n            return;\n          }\n          // we don't increment reconnect attempts for the FAST strategy.\n          if (this.reconnectStrategy !== WebsocketReconnectStrategy.FAST) {\n            this.reconnectAttempts++;\n          }\n          const current = WebsocketReconnectStrategy[this.reconnectStrategy];\n          try {\n            // wait until the network is available\n            await this.networkAvailableTask?.promise;\n            switch (this.reconnectStrategy) {\n              case WebsocketReconnectStrategy.UNSPECIFIED:\n              case WebsocketReconnectStrategy.DISCONNECT:\n                this.logger('debug', `[Reconnect] No-op strategy ${current}`);\n                break;\n              case WebsocketReconnectStrategy.FAST:\n                await this.reconnectFast();\n                break;\n              case WebsocketReconnectStrategy.REJOIN:\n                await this.reconnectRejoin();\n                break;\n              case WebsocketReconnectStrategy.MIGRATE:\n                await this.reconnectMigrate();\n                break;\n              default:\n                ensureExhausted(this.reconnectStrategy, 'Unknown reconnection strategy');\n                break;\n            }\n            break; // do-while loop, reconnection worked, exit the loop\n          } catch (error) {\n            if (this.state.callingState === CallingState.OFFLINE) {\n              this.logger('trace', `[Reconnect] Can't reconnect while offline, stopping reconnection attempts`);\n              break;\n              // we don't need to handle the error if the call is offline\n              // network change event will trigger the reconnection\n            }\n            if (error instanceof ErrorFromResponse && error.unrecoverable) {\n              this.logger('warn', `[Reconnect] Can't reconnect due to coordinator unrecoverable error`, error);\n              this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n              return;\n            }\n            this.logger('warn', `[Reconnect] ${current} (${this.reconnectAttempts}) failed. Attempting with REJOIN`, error);\n            await sleep(500);\n            this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n          }\n        } while (this.state.callingState !== CallingState.JOINED && this.state.callingState !== CallingState.RECONNECTING_FAILED && this.state.callingState !== CallingState.LEFT);\n      });\n    };\n    /**\n     * Initiates the reconnection flow with the \"fast\" strategy.\n     * @internal\n     */\n    this.reconnectFast = async () => {\n      const reconnectStartTime = Date.now();\n      this.reconnectStrategy = WebsocketReconnectStrategy.FAST;\n      this.state.setCallingState(CallingState.RECONNECTING);\n      await this.doJoin(this.joinCallData);\n      this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.FAST, (Date.now() - reconnectStartTime) / 1000);\n    };\n    /**\n     * Initiates the reconnection flow with the \"rejoin\" strategy.\n     * @internal\n     */\n    this.reconnectRejoin = async () => {\n      const reconnectStartTime = Date.now();\n      this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n      this.state.setCallingState(CallingState.RECONNECTING);\n      await this.doJoin(this.joinCallData);\n      await this.restorePublishedTracks();\n      this.restoreSubscribedTracks();\n      this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.REJOIN, (Date.now() - reconnectStartTime) / 1000);\n    };\n    /**\n     * Initiates the reconnection flow with the \"migrate\" strategy.\n     * @internal\n     */\n    this.reconnectMigrate = async () => {\n      const reconnectStartTime = Date.now();\n      const currentSfuClient = this.sfuClient;\n      if (!currentSfuClient) {\n        throw new Error('Cannot migrate without an active SFU client');\n      }\n      this.reconnectStrategy = WebsocketReconnectStrategy.MIGRATE;\n      this.state.setCallingState(CallingState.MIGRATING);\n      const currentSubscriber = this.subscriber;\n      const currentPublisher = this.publisher;\n      currentSubscriber?.detachEventHandlers();\n      currentPublisher?.detachEventHandlers();\n      const migrationTask = makeSafePromise(currentSfuClient.enterMigration());\n      try {\n        const currentSfu = currentSfuClient.edgeName;\n        await this.doJoin({\n          ...this.joinCallData,\n          migrating_from: currentSfu\n        });\n      } finally {\n        // cleanup the migration_from field after the migration is complete or failed\n        // as we don't want to keep dirty data in the join call data\n        delete this.joinCallData?.migrating_from;\n      }\n      await this.restorePublishedTracks();\n      this.restoreSubscribedTracks();\n      try {\n        // Wait for the migration to complete, then close the previous SFU client\n        // and the peer connection instances. In case of failure, the migration\n        // task would throw an error and REJOIN would be attempted.\n        await migrationTask();\n        // in MIGRATE, we can consider the call as joined only after\n        // `participantMigrationComplete` event is received, signaled by\n        // the `migrationTask`\n        this.state.setCallingState(CallingState.JOINED);\n      } finally {\n        currentSubscriber?.dispose();\n        currentPublisher?.dispose();\n        // and close the previous SFU client, without specifying close code\n        currentSfuClient.close(StreamSfuClient.NORMAL_CLOSURE, 'Migrating away');\n      }\n      this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.MIGRATE, (Date.now() - reconnectStartTime) / 1000);\n    };\n    /**\n     * Registers the various event handlers for reconnection.\n     *\n     * @internal\n     */\n    this.registerReconnectHandlers = () => {\n      // handles the legacy \"goAway\" event\n      const unregisterGoAway = this.on('goAway', () => {\n        this.reconnect(WebsocketReconnectStrategy.MIGRATE, 'goAway').catch(err => this.logger('warn', '[Reconnect] Error reconnecting', err));\n      });\n      // handles the \"error\" event, through which the SFU can request a reconnect\n      const unregisterOnError = this.on('error', e => {\n        const {\n          reconnectStrategy: strategy,\n          error\n        } = e;\n        if (strategy === WebsocketReconnectStrategy.UNSPECIFIED) return;\n        if (strategy === WebsocketReconnectStrategy.DISCONNECT) {\n          this.leave({\n            message: 'SFU instructed to disconnect'\n          }).catch(err => {\n            this.logger('warn', `Can't leave call after disconnect request`, err);\n          });\n        } else {\n          this.reconnect(strategy, error?.message || 'SFU Error').catch(err => {\n            this.logger('warn', '[Reconnect] Error reconnecting', err);\n          });\n        }\n      });\n      const unregisterNetworkChanged = this.streamClient.on('network.changed', e => {\n        if (!e.online) {\n          this.logger('debug', '[Reconnect] Going offline');\n          if (!this.hasJoinedOnce) return;\n          this.lastOfflineTimestamp = Date.now();\n          // create a new task that would resolve when the network is available\n          const networkAvailableTask = promiseWithResolvers();\n          networkAvailableTask.promise.then(() => {\n            let strategy = WebsocketReconnectStrategy.FAST;\n            if (this.lastOfflineTimestamp) {\n              const offline = (Date.now() - this.lastOfflineTimestamp) / 1000;\n              if (offline > this.fastReconnectDeadlineSeconds) {\n                // We shouldn't attempt FAST if we have exceeded the deadline.\n                // The SFU would have already wiped out the session.\n                strategy = WebsocketReconnectStrategy.REJOIN;\n              }\n            }\n            this.reconnect(strategy, 'Going online').catch(err => {\n              this.logger('warn', '[Reconnect] Error reconnecting after going online', err);\n            });\n          });\n          this.networkAvailableTask = networkAvailableTask;\n          this.sfuStatsReporter?.stop();\n          this.state.setCallingState(CallingState.OFFLINE);\n        } else {\n          this.logger('debug', '[Reconnect] Going online');\n          this.sfuClient?.close(StreamSfuClient.DISPOSE_OLD_SOCKET, 'Closing WS to reconnect after going online');\n          // we went online, release the previous waiters and reset the state\n          this.networkAvailableTask?.resolve();\n          this.networkAvailableTask = undefined;\n          this.sfuStatsReporter?.start();\n        }\n      });\n      this.leaveCallHooks.add(unregisterGoAway).add(unregisterOnError).add(unregisterNetworkChanged);\n    };\n    /**\n     * Restores the published tracks after a reconnection.\n     * @internal\n     */\n    this.restorePublishedTracks = async () => {\n      // the tracks need to be restored in their original order of publishing\n      // otherwise, we might get `m-lines order mismatch` errors\n      for (const trackType of this.trackPublishOrder) {\n        let mediaStream;\n        switch (trackType) {\n          case TrackType.AUDIO:\n            mediaStream = this.microphone.state.mediaStream;\n            break;\n          case TrackType.VIDEO:\n            mediaStream = this.camera.state.mediaStream;\n            break;\n          case TrackType.SCREEN_SHARE:\n            mediaStream = this.screenShare.state.mediaStream;\n            break;\n          // screen share audio can't exist without a screen share, so we handle it there\n          case TrackType.SCREEN_SHARE_AUDIO:\n          case TrackType.UNSPECIFIED:\n            break;\n          default:\n            ensureExhausted(trackType, 'Unknown track type');\n            break;\n        }\n        if (mediaStream) await this.publish(mediaStream, trackType);\n      }\n    };\n    /**\n     * Restores the subscribed tracks after a reconnection.\n     * @internal\n     */\n    this.restoreSubscribedTracks = () => {\n      const {\n        remoteParticipants\n      } = this.state;\n      if (remoteParticipants.length <= 0) return;\n      this.dynascaleManager.applyTrackSubscriptions(undefined);\n    };\n    /**\n     * Starts publishing the given video stream to the call.\n     * @deprecated use `call.publish()`.\n     */\n    this.publishVideoStream = async videoStream => {\n      await this.publish(videoStream, TrackType.VIDEO);\n    };\n    /**\n     * Starts publishing the given audio stream to the call.\n     * @deprecated use `call.publish()`\n     */\n    this.publishAudioStream = async audioStream => {\n      await this.publish(audioStream, TrackType.AUDIO);\n    };\n    /**\n     * Starts publishing the given screen-share stream to the call.\n     * @deprecated use `call.publish()`\n     */\n    this.publishScreenShareStream = async screenShareStream => {\n      await this.publish(screenShareStream, TrackType.SCREEN_SHARE);\n    };\n    /**\n     * Publishes the given media stream.\n     *\n     * @param mediaStream the media stream to publish.\n     * @param trackType the type of the track to announce.\n     */\n    this.publish = async (mediaStream, trackType) => {\n      if (!this.sfuClient) throw new Error(`Call not joined yet.`);\n      // joining is in progress, and we should wait until the client is ready\n      await this.sfuClient.joinTask;\n      if (!this.permissionsContext.canPublish(trackType)) {\n        throw new Error(`No permission to publish ${TrackType[trackType]}`);\n      }\n      if (!this.publisher) throw new Error('Publisher is not initialized');\n      const [track] = isAudioTrackType(trackType) ? mediaStream.getAudioTracks() : mediaStream.getVideoTracks();\n      if (!track) {\n        throw new Error(`There is no ${TrackType[trackType]} track in the stream`);\n      }\n      if (track.readyState === 'ended') {\n        throw new Error(`Can't publish ended tracks.`);\n      }\n      pushToIfMissing(this.trackPublishOrder, trackType);\n      await this.publisher.publish(track, trackType);\n      const trackTypes = [trackType];\n      if (trackType === TrackType.SCREEN_SHARE) {\n        const [audioTrack] = mediaStream.getAudioTracks();\n        if (audioTrack) {\n          pushToIfMissing(this.trackPublishOrder, TrackType.SCREEN_SHARE_AUDIO);\n          await this.publisher.publish(audioTrack, TrackType.SCREEN_SHARE_AUDIO);\n          trackTypes.push(TrackType.SCREEN_SHARE_AUDIO);\n        }\n      }\n      if (track.kind === 'video') {\n        // schedules calibration report - the SFU will use the performance stats\n        // to adjust the quality thresholds as early as possible\n        this.sfuStatsReporter?.scheduleOne(3000);\n      }\n      await this.updateLocalStreamState(mediaStream, ...trackTypes);\n    };\n    /**\n     * Stops publishing the given track type to the call, if it is currently being published.\n     *\n     * @param trackTypes the track types to stop publishing.\n     */\n    this.stopPublish = async (...trackTypes) => {\n      if (!this.sfuClient || !this.publisher) return;\n      this.publisher.stopTracks(...trackTypes);\n      await this.updateLocalStreamState(undefined, ...trackTypes);\n    };\n    /**\n     * Updates the call state with the new stream.\n     *\n     * @param mediaStream the new stream to update the call state with.\n     * If undefined, the stream will be removed from the call state.\n     * @param trackTypes the track types to update the call state with.\n     */\n    this.updateLocalStreamState = async (mediaStream, ...trackTypes) => {\n      if (!this.sfuClient || !this.sfuClient.sessionId) return;\n      await this.notifyTrackMuteState(!mediaStream, ...trackTypes);\n      const {\n        sessionId\n      } = this.sfuClient;\n      for (const trackType of trackTypes) {\n        const streamStateProp = trackTypeToParticipantStreamKey(trackType);\n        if (!streamStateProp) continue;\n        this.state.updateParticipant(sessionId, p => ({\n          publishedTracks: mediaStream ? pushToIfMissing([...p.publishedTracks], trackType) : p.publishedTracks.filter(t => t !== trackType),\n          [streamStateProp]: mediaStream\n        }));\n      }\n    };\n    /**\n     * Updates the preferred publishing options\n     *\n     * @internal\n     * @param options the options to use.\n     */\n    this.updatePublishOptions = options => {\n      this.logger('warn', '[call.updatePublishOptions]: You are manually overriding the publish options for this call. ' + 'This is not recommended, and it can cause call stability/compatibility issues. Use with caution.');\n      if (this.state.callingState === CallingState.JOINED) {\n        this.logger('warn', 'Updating publish options after joining the call does not have an effect');\n      }\n      this.clientPublishOptions = {\n        ...this.clientPublishOptions,\n        ...options\n      };\n    };\n    /**\n     * Notifies the SFU that a noise cancellation process has started.\n     *\n     * @internal\n     */\n    this.notifyNoiseCancellationStarting = async () => {\n      return this.sfuClient?.startNoiseCancellation().catch(err => {\n        this.logger('warn', 'Failed to notify start of noise cancellation', err);\n      });\n    };\n    /**\n     * Notifies the SFU that a noise cancellation process has stopped.\n     *\n     * @internal\n     */\n    this.notifyNoiseCancellationStopped = async () => {\n      return this.sfuClient?.stopNoiseCancellation().catch(err => {\n        this.logger('warn', 'Failed to notify stop of noise cancellation', err);\n      });\n    };\n    /**\n     * Notifies the SFU about the mute state of the given track types.\n     * @internal\n     */\n    this.notifyTrackMuteState = async (muted, ...trackTypes) => {\n      if (!this.sfuClient) return;\n      await this.sfuClient.updateMuteStates(trackTypes.map(trackType => ({\n        trackType,\n        muted\n      })));\n    };\n    /**\n     * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n     * This is usually helpful when detailed stats for a specific participant are needed.\n     *\n     * @param sessionId the sessionId to start reporting for.\n     */\n    this.startReportingStatsFor = sessionId => {\n      return this.statsReporter?.startReportingStatsFor(sessionId);\n    };\n    /**\n     * Opposite of `startReportingStatsFor`.\n     * Will turn off stats reporting for a specific participant.\n     *\n     * @param sessionId the sessionId to stop reporting for.\n     */\n    this.stopReportingStatsFor = sessionId => {\n      return this.statsReporter?.stopReportingStatsFor(sessionId);\n    };\n    /**\n     * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n     *\n     * @param sessionId the session id.\n     */\n    this.resetReaction = sessionId => {\n      this.state.updateParticipant(sessionId, {\n        reaction: undefined\n      });\n    };\n    /**\n     * Sets the list of criteria to sort the participants by.\n     *\n     * @param criteria the list of criteria to sort the participants by.\n     */\n    this.setSortParticipantsBy = criteria => {\n      return this.state.setSortParticipantsBy(criteria);\n    };\n    /**\n     * Sends a reaction to the other call participants.\n     *\n     * @param reaction the reaction to send.\n     */\n    this.sendReaction = async reaction => {\n      return this.streamClient.post(`${this.streamClientBasePath}/reaction`, reaction);\n    };\n    /**\n     * Blocks the user with the given `userId`.\n     *\n     * @param userId the id of the user to block.\n     */\n    this.blockUser = async userId => {\n      return this.streamClient.post(`${this.streamClientBasePath}/block`, {\n        user_id: userId\n      });\n    };\n    /**\n     * Unblocks the user with the given `userId`.\n     *\n     * @param userId the id of the user to unblock.\n     */\n    this.unblockUser = async userId => {\n      return this.streamClient.post(`${this.streamClientBasePath}/unblock`, {\n        user_id: userId\n      });\n    };\n    /**\n     * Mutes the current user.\n     *\n     * @param type the type of the mute operation.\n     */\n    this.muteSelf = type => {\n      const myUserId = this.currentUserId;\n      if (myUserId) {\n        return this.muteUser(myUserId, type);\n      }\n    };\n    /**\n     * Mutes all the other participants.\n     *\n     * @param type the type of the mute operation.\n     */\n    this.muteOthers = type => {\n      const trackType = muteTypeToTrackType(type);\n      if (!trackType) return;\n      const userIdsToMute = [];\n      for (const participant of this.state.remoteParticipants) {\n        if (participant.publishedTracks.includes(trackType)) {\n          userIdsToMute.push(participant.userId);\n        }\n      }\n      if (userIdsToMute.length > 0) {\n        return this.muteUser(userIdsToMute, type);\n      }\n    };\n    /**\n     * Mutes the user with the given `userId`.\n     *\n     * @param userId the id of the user to mute.\n     * @param type the type of the mute operation.\n     */\n    this.muteUser = (userId, type) => {\n      return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n        user_ids: Array.isArray(userId) ? userId : [userId],\n        [type]: true\n      });\n    };\n    /**\n     * Will mute all users in the call.\n     *\n     * @param type the type of the mute operation.\n     */\n    this.muteAllUsers = type => {\n      return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n        mute_all_users: true,\n        [type]: true\n      });\n    };\n    /**\n     * Starts recording the call\n     */\n    this.startRecording = async request => {\n      return this.streamClient.post(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n    };\n    /**\n     * Stops recording the call\n     */\n    this.stopRecording = async () => {\n      return this.streamClient.post(`${this.streamClientBasePath}/stop_recording`, {});\n    };\n    /**\n     * Starts the transcription of the call.\n     *\n     * @param request the request data.\n     */\n    this.startTranscription = async request => {\n      return this.streamClient.post(`${this.streamClientBasePath}/start_transcription`, request);\n    };\n    /**\n     * Stops the transcription of the call.\n     */\n    this.stopTranscription = async () => {\n      return this.streamClient.post(`${this.streamClientBasePath}/stop_transcription`);\n    };\n    /**\n     * Starts the closed captions of the call.\n     */\n    this.startClosedCaptions = async options => {\n      const trx = this.state.setCaptioning(true); // optimistic update\n      try {\n        return await this.streamClient.post(`${this.streamClientBasePath}/start_closed_captions`, options);\n      } catch (err) {\n        trx.rollback(); // revert the optimistic update\n        throw err;\n      }\n    };\n    /**\n     * Stops the closed captions of the call.\n     */\n    this.stopClosedCaptions = async options => {\n      const trx = this.state.setCaptioning(false); // optimistic update\n      try {\n        return await this.streamClient.post(`${this.streamClientBasePath}/stop_closed_captions`, options);\n      } catch (err) {\n        trx.rollback(); // revert the optimistic update\n        throw err;\n      }\n    };\n    /**\n     * Updates the closed caption settings.\n     *\n     * @param config the closed caption settings to apply\n     */\n    this.updateClosedCaptionSettings = config => {\n      this.state.updateClosedCaptionSettings(config);\n    };\n    /**\n     * Sends a `call.permission_request` event to all users connected to the call.\n     * The call settings object contains information about which permissions can be requested during a call\n     * (for example, a user might be allowed to request permission to publish audio, but not video).\n     */\n    this.requestPermissions = async data => {\n      const {\n        permissions\n      } = data;\n      const canRequestPermissions = permissions.every(permission => this.permissionsContext.canRequest(permission));\n      if (!canRequestPermissions) {\n        throw new Error(`You are not allowed to request permissions: ${permissions.join(', ')}`);\n      }\n      return this.streamClient.post(`${this.streamClientBasePath}/request_permission`, data);\n    };\n    /**\n     * Allows you to grant certain permissions to a user in a call.\n     * The permissions are specific to the call experience and do not survive the call itself.\n     *\n     * Supported permissions that can be granted are:\n     * - `send-audio`\n     * - `send-video`\n     * - `screenshare`\n     *\n     * @param userId the id of the user to grant permissions to.\n     * @param permissions the permissions to grant.\n     */\n    this.grantPermissions = async (userId, permissions) => {\n      return this.updateUserPermissions({\n        user_id: userId,\n        grant_permissions: permissions\n      });\n    };\n    /**\n     * Allows you to revoke certain permissions from a user in a call.\n     * The permissions are specific to the call experience and do not survive the call itself.\n     *\n     * Supported permissions that can be revoked are:\n     * - `send-audio`\n     * - `send-video`\n     * - `screenshare`\n     *\n     * @param userId the id of the user to revoke permissions from.\n     * @param permissions the permissions to revoke.\n     */\n    this.revokePermissions = async (userId, permissions) => {\n      return this.updateUserPermissions({\n        user_id: userId,\n        revoke_permissions: permissions\n      });\n    };\n    /**\n     * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n     *\n     * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n     *\n     * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n     *\n     * `call.permissions_updated` event is sent to all members of the call.\n     *\n     */\n    this.updateUserPermissions = async data => {\n      return this.streamClient.post(`${this.streamClientBasePath}/user_permissions`, data);\n    };\n    /**\n     * Starts the livestreaming of the call.\n     *\n     * @param data the request data.\n     * @param params the request params.\n     */\n    this.goLive = async (data = {}, params) => {\n      return this.streamClient.post(`${this.streamClientBasePath}/go_live`, data, params);\n    };\n    /**\n     * Stops the livestreaming of the call.\n     */\n    this.stopLive = async (data = {}) => {\n      return this.streamClient.post(`${this.streamClientBasePath}/stop_live`, data);\n    };\n    /**\n     * Starts the broadcasting of the call.\n     */\n    this.startHLS = async () => {\n      return this.streamClient.post(`${this.streamClientBasePath}/start_broadcasting`, {});\n    };\n    /**\n     * Stops the broadcasting of the call.\n     */\n    this.stopHLS = async () => {\n      return this.streamClient.post(`${this.streamClientBasePath}/stop_broadcasting`, {});\n    };\n    /**\n     * Starts the RTMP-out broadcasting of the call.\n     */\n    this.startRTMPBroadcasts = async data => {\n      return this.streamClient.post(`${this.streamClientBasePath}/rtmp_broadcasts`, data);\n    };\n    /**\n     * Stops all RTMP-out broadcasting of the call.\n     */\n    this.stopAllRTMPBroadcasts = async () => {\n      return this.streamClient.post(`${this.streamClientBasePath}/rtmp_broadcasts/stop`);\n    };\n    /**\n     * Stops the RTMP-out broadcasting of the call specified by it's name.\n     */\n    this.stopRTMPBroadcast = async name => {\n      return this.streamClient.post(`${this.streamClientBasePath}/rtmp_broadcasts/${name}/stop`);\n    };\n    /**\n     * Starts frame by frame recording.\n     * Sends call.frame_recording_started events\n     */\n    this.startFrameRecording = async data => {\n      return this.streamClient.post(`${this.streamClientBasePath}/start_frame_recording`, data);\n    };\n    /**\n     * Stops frame recording.\n     */\n    this.stopFrameRecording = async () => {\n      return this.streamClient.post(`${this.streamClientBasePath}/stop_frame_recording`);\n    };\n    /**\n     * Updates the call settings or custom data.\n     *\n     * @param updates the updates to apply to the call.\n     */\n    this.update = async updates => {\n      const response = await this.streamClient.patch(`${this.streamClientBasePath}`, updates);\n      const {\n        call,\n        members,\n        own_capabilities\n      } = response;\n      this.state.updateFromCallResponse(call);\n      this.state.setMembers(members);\n      this.state.setOwnCapabilities(own_capabilities);\n      return response;\n    };\n    /**\n     * Ends the call. Once the call is ended, it cannot be re-joined.\n     */\n    this.endCall = async () => {\n      return this.streamClient.post(`${this.streamClientBasePath}/mark_ended`);\n    };\n    /**\n     * Pins the given session to the top of the participants list.\n     *\n     * @param sessionId the sessionId to pin.\n     */\n    this.pin = sessionId => {\n      this.state.updateParticipant(sessionId, {\n        pin: {\n          isLocalPin: true,\n          pinnedAt: Date.now()\n        }\n      });\n    };\n    /**\n     * Unpins the given session from the top of the participants list.\n     *\n     * @param sessionId the sessionId to unpin.\n     */\n    this.unpin = sessionId => {\n      this.state.updateParticipant(sessionId, {\n        pin: undefined\n      });\n    };\n    /**\n     * Pins the given session to the top of the participants list for everyone\n     * in the call.\n     * You can execute this method only if you have the `pin-for-everyone` capability.\n     *\n     * @param request the request object.\n     */\n    this.pinForEveryone = async request => {\n      return this.streamClient.post(`${this.streamClientBasePath}/pin`, request);\n    };\n    /**\n     * Unpins the given session from the top of the participants list for everyone\n     * in the call.\n     * You can execute this method only if you have the `pin-for-everyone` capability.\n     *\n     * @param request the request object.\n     */\n    this.unpinForEveryone = async request => {\n      return this.streamClient.post(`${this.streamClientBasePath}/unpin`, request);\n    };\n    /**\n     * Query call members with filter query. The result won't be stored in call state.\n     * @param request\n     * @returns\n     */\n    this.queryMembers = request => {\n      return this.streamClient.post('/call/members', {\n        ...(request || {}),\n        id: this.id,\n        type: this.type\n      });\n    };\n    /**\n     * Will update the call members.\n     *\n     * @param data the request data.\n     */\n    this.updateCallMembers = async data => {\n      return this.streamClient.post(`${this.streamClientBasePath}/members`, data);\n    };\n    /**\n     * Schedules an auto-drop timeout based on the call settings.\n     * Applicable only for ringing calls.\n     */\n    this.scheduleAutoDrop = () => {\n      this.cancelAutoDrop();\n      const settings = this.state.settings;\n      if (!settings) return;\n      // ignore if the call is not ringing\n      if (this.state.callingState !== CallingState.RINGING) return;\n      const timeoutInMs = this.isCreatedByMe ? settings.ring.auto_cancel_timeout_ms : settings.ring.incoming_call_timeout_ms;\n      // 0 means no auto-drop\n      if (timeoutInMs <= 0) return;\n      this.dropTimeout = setTimeout(() => {\n        // the call might have stopped ringing by this point,\n        // e.g. it was already accepted and joined\n        if (this.state.callingState !== CallingState.RINGING) return;\n        this.leave({\n          reject: true,\n          reason: 'timeout',\n          message: `ringing timeout - ${this.isCreatedByMe ? 'no one accepted' : `user didn't interact with incoming call screen`}`\n        }).catch(err => {\n          this.logger('error', 'Failed to drop call', err);\n        });\n      }, timeoutInMs);\n    };\n    /**\n     * Cancels a scheduled auto-drop timeout.\n     */\n    this.cancelAutoDrop = () => {\n      clearTimeout(this.dropTimeout);\n      this.dropTimeout = undefined;\n    };\n    /**\n     * Retrieves the list of recordings for the current call or call session.\n     *\n     * If `callSessionId` is provided, it will return the recordings for that call session.\n     * Otherwise, all recordings for the current call will be returned.\n     *\n     * @param callSessionId the call session id to retrieve recordings for.\n     */\n    this.queryRecordings = async callSessionId => {\n      let endpoint = this.streamClientBasePath;\n      if (callSessionId) {\n        endpoint = `${endpoint}/${callSessionId}`;\n      }\n      return this.streamClient.get(`${endpoint}/recordings`);\n    };\n    /**\n     * Retrieves the list of transcriptions for the current call.\n     *\n     * @returns the list of transcriptions.\n     */\n    this.queryTranscriptions = async () => {\n      return this.streamClient.get(`${this.streamClientBasePath}/transcriptions`);\n    };\n    /**\n     * Retrieve call statistics for a particular call session (historical).\n     * Here `callSessionID` is mandatory.\n     *\n     * @param callSessionID the call session ID to retrieve statistics for.\n     * @returns The call stats.\n     * @deprecated use `call.getCallReport` instead.\n     * @internal\n     */\n    this.getCallStats = async callSessionID => {\n      const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n      return this.streamClient.get(endpoint);\n    };\n    /**\n     * Retrieve call report. If the `callSessionID` is not specified, then the\n     * report for the latest call session is retrieved. If it is specified, then\n     * the report for that particular session is retrieved if it exists.\n     *\n     * @param callSessionID the optional call session ID to retrieve statistics for\n     * @returns the call report\n     */\n    this.getCallReport = async (callSessionID = '') => {\n      const endpoint = `${this.streamClientBasePath}/report`;\n      const params = callSessionID !== '' ? {\n        session_id: callSessionID\n      } : {};\n      return this.streamClient.get(endpoint, params);\n    };\n    /**\n     * Submit user feedback for the call\n     *\n     * @param rating Rating between 1 and 5 denoting the experience of the user in the call\n     * @param reason The reason/description for the rating\n     * @param custom Custom data\n     */\n    this.submitFeedback = async (rating, {\n      reason,\n      custom\n    } = {}) => {\n      const {\n        sdkName,\n        sdkVersion,\n        ...platform\n      } = getSdkSignature(await getClientDetails());\n      return this.streamClient.post(`${this.streamClientBasePath}/feedback`, {\n        rating,\n        reason,\n        user_session_id: this.sfuClient?.sessionId,\n        sdk: sdkName,\n        sdk_version: sdkVersion,\n        custom: {\n          ...custom,\n          'x-stream-platform-data': platform\n        }\n      });\n    };\n    /**\n     * Sends a custom event to all call participants.\n     *\n     * @param payload the payload to send.\n     */\n    this.sendCustomEvent = async payload => {\n      return this.streamClient.post(`${this.streamClientBasePath}/event`, {\n        custom: payload\n      });\n    };\n    /**\n     * Applies the device configuration from the backend.\n     *\n     * @internal\n     */\n    this.applyDeviceConfig = async (settings, publish) => {\n      await this.camera.apply(settings.video, publish).catch(err => {\n        this.logger('warn', 'Camera init failed', err);\n      });\n      await this.microphone.apply(settings.audio, publish).catch(err => {\n        this.logger('warn', 'Mic init failed', err);\n      });\n    };\n    /**\n     * Will begin tracking the given element for visibility changes within the\n     * configured viewport element (`call.setViewport`).\n     *\n     * @param element the element to track.\n     * @param sessionId the session id.\n     * @param trackType the video mode.\n     */\n    this.trackElementVisibility = (element, sessionId, trackType) => {\n      return this.dynascaleManager.trackElementVisibility(element, sessionId, trackType);\n    };\n    /**\n     * Sets the viewport element to track bound video elements for visibility.\n     *\n     * @param element the viewport element.\n     */\n    this.setViewport = element => {\n      return this.dynascaleManager.setViewport(element);\n    };\n    /**\n     * Binds a DOM <video> element to the given session id.\n     * This method will make sure that the video element will play\n     * the correct video stream for the given session id.\n     *\n     * Under the hood, it would also keep track of the video element dimensions\n     * and update the subscription accordingly in order to optimize the bandwidth.\n     *\n     * If a \"viewport\" is configured, the video element will be automatically\n     * tracked for visibility and the subscription will be updated accordingly.\n     *\n     * @param videoElement the video element to bind to.\n     * @param sessionId the session id.\n     * @param trackType the kind of video.\n     */\n    this.bindVideoElement = (videoElement, sessionId, trackType) => {\n      const unbind = this.dynascaleManager.bindVideoElement(videoElement, sessionId, trackType);\n      if (!unbind) return;\n      this.leaveCallHooks.add(unbind);\n      return () => {\n        this.leaveCallHooks.delete(unbind);\n        unbind();\n      };\n    };\n    /**\n     * Binds a DOM <audio> element to the given session id.\n     *\n     * This method will make sure that the audio element will\n     * play the correct audio stream for the given session id.\n     *\n     * @param audioElement the audio element to bind to.\n     * @param sessionId the session id.\n     * @param trackType the kind of audio.\n     */\n    this.bindAudioElement = (audioElement, sessionId, trackType = 'audioTrack') => {\n      const unbind = this.dynascaleManager.bindAudioElement(audioElement, sessionId, trackType);\n      if (!unbind) return;\n      this.leaveCallHooks.add(unbind);\n      return () => {\n        this.leaveCallHooks.delete(unbind);\n        unbind();\n      };\n    };\n    /**\n     * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n     *\n     * @param imageElement the image element to bind to.\n     * @param opts options for the binding.\n     */\n    this.bindCallThumbnailElement = (imageElement, opts = {}) => {\n      const handleError = () => {\n        imageElement.src = opts.fallbackImageSource || 'https://getstream.io/random_svg/?name=x&id=x';\n      };\n      const unsubscribe = createSubscription(this.state.thumbnails$, thumbnails => {\n        if (!thumbnails) return;\n        imageElement.addEventListener('error', handleError);\n        const thumbnailUrl = new URL(thumbnails.image_url);\n        thumbnailUrl.searchParams.set('w', String(imageElement.clientWidth));\n        thumbnailUrl.searchParams.set('h', String(imageElement.clientHeight));\n        imageElement.src = thumbnailUrl.toString();\n      });\n      return () => {\n        unsubscribe();\n        imageElement.removeEventListener('error', handleError);\n      };\n    };\n    /**\n     * Specify preference for incoming video resolution. The preference will\n     * be matched as close as possible, but actual resolution will depend\n     * on the video source quality and client network conditions. Will enable\n     * incoming video, if previously disabled.\n     *\n     * @param resolution preferred resolution, or `undefined` to clear preference\n     * @param sessionIds optionally specify session ids of the participants this\n     * preference has effect on. Affects all participants by default.\n     */\n    this.setPreferredIncomingVideoResolution = (resolution, sessionIds) => {\n      this.dynascaleManager.setVideoTrackSubscriptionOverrides(resolution ? {\n        enabled: true,\n        dimension: resolution\n      } : undefined, sessionIds);\n      this.dynascaleManager.applyTrackSubscriptions();\n    };\n    /**\n     * Enables or disables incoming video from all remote call participants,\n     * and removes any preference for preferred resolution.\n     */\n    this.setIncomingVideoEnabled = enabled => {\n      this.dynascaleManager.setVideoTrackSubscriptionOverrides(enabled ? undefined : {\n        enabled: false\n      });\n      this.dynascaleManager.applyTrackSubscriptions();\n    };\n    /**\n     * Sets the maximum amount of time a user can remain waiting for a reconnect\n     * after a network disruption\n     * @param timeoutSeconds Timeout in seconds, or 0 to keep reconnecting indefinetely\n     */\n    this.setDisconnectionTimeout = timeoutSeconds => {\n      this.disconnectionTimeoutSeconds = timeoutSeconds;\n    };\n    this.type = type;\n    this.id = id;\n    this.cid = `${type}:${id}`;\n    this.ringingSubject = new BehaviorSubject(ringing);\n    this.watching = watching;\n    this.streamClient = streamClient;\n    this.clientStore = clientStore;\n    this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n    this.logger = getLogger(['Call']);\n    const callTypeConfig = CallTypes.get(type);\n    const participantSorter = sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n    if (participantSorter) {\n      this.state.setSortParticipantsBy(participantSorter);\n    }\n    this.state.setMembers(members || []);\n    this.state.setOwnCapabilities(ownCapabilities || []);\n    this.state.setCallingState(ringing ? CallingState.RINGING : CallingState.IDLE);\n    this.camera = new CameraManager(this);\n    this.microphone = new MicrophoneManager(this);\n    this.speaker = new SpeakerManager(this);\n    this.screenShare = new ScreenShareManager(this);\n    this.dynascaleManager = new DynascaleManager(this.state, this.speaker);\n  }\n  /**\n   * A flag indicating whether the call is \"ringing\" type of call.\n   */\n  get ringing() {\n    return getCurrentValue(this.ringingSubject);\n  }\n  /**\n   * Retrieves the current user ID.\n   */\n  get currentUserId() {\n    return this.clientStore.connectedUser?.id;\n  }\n  /**\n   * A flag indicating whether the call was created by the current user.\n   */\n  get isCreatedByMe() {\n    return this.state.createdBy?.id === this.currentUserId;\n  }\n}\nvar https = null;\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nclass StableWSConnection {\n  constructor(client) {\n    this._log = (msg, extra = {}, level = 'info') => {\n      this.client.logger(level, `connection:${msg}`, extra);\n    };\n    this.setClient = client => {\n      this.client = client;\n    };\n    /**\n     * Builds and returns the url for websocket.\n     * @private\n     * @returns url string\n     */\n    this._buildUrl = () => {\n      const params = new URLSearchParams();\n      params.set('api_key', this.client.key);\n      params.set('stream-auth-type', this.client.getAuthType());\n      params.set('X-Stream-Client', this.client.getUserAgent());\n      return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n    };\n    /**\n     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n     *\n     * @param {Event} event Event with type online or offline\n     *\n     */\n    this.onlineStatusChanged = event => {\n      if (event.type === 'offline') {\n        // mark the connection as down\n        this._log('onlineStatusChanged() - Status changing to offline');\n        // we know that the app is offline so dispatch the unhealthy connection event immediately\n        this._setHealth(false, true);\n      } else if (event.type === 'online') {\n        // retry right now...\n        // We check this.isHealthy, not sure if it's always\n        // smart to create a new WS connection if the old one is still up and running.\n        // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n        this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n        if (!this.isHealthy) {\n          this._reconnect({\n            interval: 10\n          });\n        }\n      }\n    };\n    this.onopen = wsID => {\n      if (this.wsID !== wsID) return;\n      const user = this.client.user;\n      if (!user) {\n        this.client.logger('error', `User not set, can't connect to WS`);\n        return;\n      }\n      const token = this.client._getToken();\n      if (!token) {\n        this.client.logger('error', `Token not set, can't connect authenticate`);\n        return;\n      }\n      const authMessage = JSON.stringify({\n        token,\n        user_details: {\n          id: user.id,\n          name: user.name,\n          image: user.image,\n          custom: user.custom\n        }\n      });\n      this._log(`onopen() - Sending auth message ${authMessage}`, {}, 'trace');\n      this.ws?.send(authMessage);\n      this._log('onopen() - onopen callback', {\n        wsID\n      });\n    };\n    this.onmessage = (wsID, event) => {\n      if (this.wsID !== wsID) return;\n      this._log('onmessage() - onmessage callback', {\n        event,\n        wsID\n      });\n      const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n      // we wait till the first message before we consider the connection open.\n      // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n      // after that a ws.onclose.\n      if (!this.isConnectionOpenResolved && data && data.type === 'connection.error') {\n        this.isConnectionOpenResolved = true;\n        if (data.error) {\n          this.rejectConnectionOpen?.(this._errorFromWSEvent(data, false));\n          return;\n        }\n      }\n      // trigger the event..\n      this.lastEvent = new Date();\n      if (data && (data.type === 'health.check' || data.type === 'connection.ok')) {\n        // the initial health-check should come from the client\n        this.scheduleNextPing();\n      }\n      if (data && data.type === 'connection.ok') {\n        this.resolveConnectionOpen?.(data);\n        this._setHealth(true);\n      }\n      if (data && data.type === 'connection.error' && data.error) {\n        const {\n          code\n        } = data.error;\n        this.isHealthy = false;\n        this.isConnecting = false;\n        this.consecutiveFailures += 1;\n        if (code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n          clearTimeout(this.connectionCheckTimeoutRef);\n          this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n          this._reconnect({\n            refreshToken: true\n          });\n        }\n      }\n      if (data) {\n        data.received_at = new Date();\n        this.client.dispatchEvent(data);\n      }\n      this.scheduleConnectionCheck();\n    };\n    this.onclose = (wsID, event) => {\n      if (this.wsID !== wsID) return;\n      this._log('onclose() - onclose callback - ' + event.code, {\n        event,\n        wsID\n      });\n      if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n        // this is a permanent error raised by stream..\n        // usually caused by invalid auth details\n        const error = new Error(`WS connection reject with error ${event.reason}`);\n        // @ts-expect-error type issue\n        error.reason = event.reason;\n        // @ts-expect-error type issue\n        error.code = event.code;\n        // @ts-expect-error type issue\n        error.wasClean = event.wasClean;\n        // @ts-expect-error type issue\n        error.target = event.target;\n        this.rejectConnectionOpen?.(error);\n        this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n          event\n        });\n      } else {\n        this.consecutiveFailures += 1;\n        this.totalFailures += 1;\n        this._setHealth(false);\n        this.isConnecting = false;\n        this.rejectConnectionOpen?.(this._errorFromWSEvent(event));\n        this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n          event\n        });\n        // reconnect if its an abnormal failure\n        this._reconnect();\n      }\n    };\n    this.onerror = (wsID, event) => {\n      if (this.wsID !== wsID) return;\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n      this.isConnecting = false;\n      this.rejectConnectionOpen?.(new Error(`WebSocket error: ${event}`));\n      this._log(`onerror() - WS connection resulted into error`, {\n        event\n      });\n      this._reconnect();\n    };\n    /**\n     * _setHealth - Sets the connection to healthy or unhealthy.\n     * Broadcasts an event in case the connection status changed.\n     *\n     * @param {boolean} healthy boolean indicating if the connection is healthy or not\n     * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n     */\n    this._setHealth = (healthy, dispatchImmediately = false) => {\n      if (healthy === this.isHealthy) return;\n      this.isHealthy = healthy;\n      if (this.isHealthy || dispatchImmediately) {\n        this.client.dispatchEvent({\n          type: 'connection.changed',\n          online: this.isHealthy\n        });\n        return;\n      }\n      // we're offline, wait few seconds and fire and event if still offline\n      setTimeout(() => {\n        if (this.isHealthy) return;\n        this.client.dispatchEvent({\n          type: 'connection.changed',\n          online: this.isHealthy\n        });\n      }, 5000);\n    };\n    /**\n     * _errorFromWSEvent - Creates an error object for the WS event\n     */\n    this._errorFromWSEvent = (event, isWSFailure = true) => {\n      let code;\n      let statusCode;\n      let message;\n      if (isCloseEvent(event)) {\n        code = event.code;\n        message = event.reason;\n        statusCode = 0;\n      } else {\n        const {\n          error\n        } = event;\n        code = error.code;\n        message = error.message;\n        statusCode = error.StatusCode;\n      }\n      const msg = `WS failed with code: ${code} and reason: ${message}`;\n      this._log(msg, {\n        event\n      }, 'warn');\n      const error = new Error(msg);\n      error.code = code;\n      /**\n       * StatusCode does not exist on any event types but has been left\n       * as is to preserve JS functionality during the TS implementation\n       */\n      error.StatusCode = statusCode;\n      error.isWSFailure = isWSFailure;\n      return error;\n    };\n    /**\n     * _setupPromise - sets up the this.connectOpen promise\n     */\n    this._setupConnectionPromise = () => {\n      this.isConnectionOpenResolved = false;\n      /** a promise that is resolved once ws.open is called */\n      this.connectionOpenSafe = makeSafePromise(new Promise((resolve, reject) => {\n        this.resolveConnectionOpen = resolve;\n        this.rejectConnectionOpen = reject;\n      }));\n    };\n    /**\n     * Schedules a next health check ping for websocket.\n     */\n    this.scheduleNextPing = () => {\n      const timers = getTimers();\n      if (this.healthCheckTimeoutRef) {\n        timers.clearTimeout(this.healthCheckTimeoutRef);\n      }\n      // 30 seconds is the recommended interval (messenger uses this)\n      this.healthCheckTimeoutRef = timers.setTimeout(() => {\n        // send the healthcheck..., server replies with a health check event\n        const data = [{\n          type: 'health.check',\n          client_id: this.client.clientID\n        }];\n        // try to send on the connection\n        try {\n          this.ws?.send(JSON.stringify(data));\n        } catch {\n          // error will already be detected elsewhere\n        }\n      }, this.pingInterval);\n    };\n    /**\n     * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n     * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n     * to be reconnected.\n     */\n    this.scheduleConnectionCheck = () => {\n      clearTimeout(this.connectionCheckTimeoutRef);\n      this.connectionCheckTimeoutRef = setTimeout(() => {\n        const now = new Date();\n        if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n          this._log('scheduleConnectionCheck - going to reconnect');\n          this._setHealth(false);\n          this._reconnect();\n        }\n      }, this.connectionCheckTimeout);\n    };\n    this.client = client;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** To avoid reconnect if client is disconnected */\n    this.isDisconnected = false;\n    /** Boolean that indicates if the connection promise is resolved */\n    this.isConnectionOpenResolved = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n  /**\n   * connect - Connect to the WS URL\n   * the default 15s timeout allows between 2~3 tries\n   * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n   */\n  async connect(timeout = 15000) {\n    if (this.isConnecting) {\n      throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n    }\n    this.isDisconnected = false;\n    try {\n      const healthCheck = await this._connect();\n      this.consecutiveFailures = 0;\n      this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (\n      // @ts-expect-error type issue\n      error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n        this._reconnect({\n          refreshToken: true\n        });\n      } else {\n        // @ts-expect-error type issue\n        if (!error.isWSFailure) {\n          // API rejected the connection and we should not retry\n          throw new Error(JSON.stringify({\n            // @ts-expect-error type issue\n            code: error.code,\n            // @ts-expect-error type issue\n            StatusCode: error.StatusCode,\n            // @ts-expect-error type issue\n            message: error.message,\n            // @ts-expect-error type issue\n            isWSFailure: error.isWSFailure\n          }));\n        }\n      }\n    }\n    return await this._waitForHealthy(timeout);\n  }\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  async _waitForHealthy(timeout = 15000) {\n    return Promise.race([(async () => {\n      const interval = 50; // ms\n      for (let i = 0; i <= timeout; i += interval) {\n        try {\n          return await this.connectionOpen;\n        } catch (error) {\n          if (i === timeout) {\n            throw new Error(JSON.stringify({\n              code: error.code,\n              StatusCode: error.StatusCode,\n              message: error.message,\n              isWSFailure: error.isWSFailure\n            }));\n          }\n          await sleep(interval);\n        }\n      }\n    })(), (async () => {\n      await sleep(timeout);\n      this.isConnecting = false;\n      throw new Error(JSON.stringify({\n        code: '',\n        StatusCode: '',\n        message: 'initial WS connection could not be established',\n        isWSFailure: true\n      }));\n    })()]);\n  }\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout) {\n    this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n    this.wsID += 1;\n    this.isConnecting = false;\n    this.isDisconnected = true;\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      getTimers().clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n    removeConnectionEventListeners(this.onlineStatusChanged);\n    this.isHealthy = false;\n    let isClosedPromise;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const {\n      ws\n    } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise(resolve => {\n        const onclose = event => {\n          this._log(`disconnect() - resolving isClosedPromise ${event ? 'with' : 'without'} close frame`, {\n            event\n          });\n          resolve();\n        };\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 second.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n      this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n      ws.close(KnownCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');\n    } else {\n      this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n      isClosedPromise = Promise.resolve();\n    }\n    delete this.ws;\n    return isClosedPromise;\n  }\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    if (this.isConnecting) return; // ignore _connect if it's currently trying to connect\n    this.isConnecting = true;\n    let isTokenReady = false;\n    try {\n      this._log(`_connect() - waiting for token`);\n      await this.client.tokenManager.tokenReady();\n      isTokenReady = true;\n    } catch {\n      // token provider has failed before, so try again\n    }\n    try {\n      if (!isTokenReady) {\n        this._log(`_connect() - tokenProvider failed before, so going to retry`);\n        await this.client.tokenManager.loadToken();\n      }\n      if (!this.client.isConnectionIsPromisePending) {\n        this.client._setupConnectionIdPromise();\n      }\n      this._setupConnectionPromise();\n      const wsURL = this._buildUrl();\n      this._log(`_connect() - Connecting to ${wsURL}`);\n      const WS = this.client.options.WebSocketImpl ?? WebSocket;\n      this.ws = new WS(wsURL);\n      this.ws.onopen = this.onopen.bind(this, this.wsID);\n      this.ws.onclose = this.onclose.bind(this, this.wsID);\n      this.ws.onerror = this.onerror.bind(this, this.wsID);\n      this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n      const response = await this.connectionOpen;\n      this.isConnecting = false;\n      if (response) {\n        this.connectionID = response.connection_id;\n        this.client.resolveConnectionId?.(this.connectionID);\n        return response;\n      }\n    } catch (err) {\n      this.client._setupConnectionIdPromise();\n      this.isConnecting = false;\n      // @ts-expect-error type issue\n      this._log(`_connect() - Error - `, err);\n      this.client.rejectConnectionId?.(err);\n      throw err;\n    }\n  }\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(options = {}) {\n    this._log('_reconnect() - Initiating the reconnect');\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (1) since already connecting or healthy');\n      return;\n    }\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (2) since already connecting or healthy');\n      return;\n    }\n    if (this.isDisconnected) {\n      this._log('_reconnect() - Abort (3) since disconnect() is called');\n      return;\n    }\n    this._log('_reconnect() - Destroying current WS connection');\n    // cleanup the old connection\n    this._destroyCurrentWSConnection();\n    if (options.refreshToken) {\n      await this.client.tokenManager.loadToken();\n    }\n    try {\n      await this._connect();\n      this._log('_reconnect() - Waiting for recoverCallBack');\n      // await this.client.recoverState();\n      this._log('_reconnect() - Finished recoverCallBack');\n      this.consecutiveFailures = 0;\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');\n        return this._reconnect({\n          refreshToken: true\n        });\n      }\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this._log('_reconnect() - WS failure, so going to try to reconnect');\n        this._reconnect();\n      }\n    }\n    this._log('_reconnect() - == END ==');\n  }\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n    try {\n      this?.ws?.close();\n    } catch {\n      // we don't care\n    }\n  }\n  get connectionOpen() {\n    return this.connectionOpenSafe?.();\n  }\n}\nfunction getUserFromToken(token) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id;\n}\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nconst decodeBase64 = s => {\n  const e = {},\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      if ((a = b >>> (l -= 8) & 0xff) || x < L - 2) r += w(a);\n    }\n  }\n  return r;\n};\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nclass TokenManager {\n  constructor(secret) {\n    this.loadTokenPromise = null;\n    this.type = 'static';\n    /**\n     * Set the static string token or token provider.\n     * Token provider should return a token string or a promise which resolves to string token.\n     *\n     * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n     * @param {UserResponse} user - the user object.\n     * @param {boolean} isAnonymous - whether the user is anonymous or not.\n     */\n    this.setTokenOrProvider = async (tokenOrProvider, user, isAnonymous) => {\n      this.user = user;\n      this.isAnonymous = isAnonymous;\n      this.validateToken(tokenOrProvider);\n      if (isFunction(tokenOrProvider)) {\n        this.tokenProvider = tokenOrProvider;\n        this.type = 'provider';\n      }\n      if (typeof tokenOrProvider === 'string') {\n        this.token = tokenOrProvider;\n        this.type = 'static';\n      }\n      await this.loadToken();\n    };\n    /**\n     * Resets the token manager.\n     * Useful for client disconnection or switching user.\n     */\n    this.reset = () => {\n      this.token = undefined;\n      this.tokenProvider = undefined;\n      this.type = 'static';\n      this.user = undefined;\n      this.loadTokenPromise = null;\n    };\n    // Validates the user token.\n    this.validateToken = tokenOrProvider => {\n      // allow empty token for anon user\n      if (this.user && this.isAnonymous && !tokenOrProvider) return;\n      // Don't allow empty token for non-server side client.\n      if (!this.secret && !tokenOrProvider) {\n        throw new Error('User token can not be empty');\n      }\n      if (typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n        throw new Error('User token should either be a string or a function');\n      }\n      if (typeof tokenOrProvider === 'string') {\n        // Allow empty token for anonymous users\n        if (this.isAnonymous && tokenOrProvider === '') return;\n        const tokenUserId = getUserFromToken(tokenOrProvider);\n        if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || !this.isAnonymous && tokenUserId !== this.user.id)) {\n          throw new Error('userToken does not have a user_id or is not matching with user.id');\n        }\n      }\n    };\n    // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n    // case a function should wait.\n    this.tokenReady = () => this.loadTokenPromise;\n    // Fetches a token from tokenProvider function and sets in tokenManager.\n    // In case of static token, it will simply resolve to static token.\n    this.loadToken = () => {\n      this.loadTokenPromise = new Promise(async (resolve, reject) => {\n        if (this.type === 'static') {\n          return resolve(this.token);\n        }\n        if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n          try {\n            const token = await this.tokenProvider();\n            this.validateToken(token);\n            this.token = token;\n          } catch (e) {\n            return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n          }\n          resolve(this.token);\n        }\n      });\n      return this.loadTokenPromise;\n    };\n    // Returns a current token\n    this.getToken = () => {\n      if (this.token) {\n        return this.token;\n      }\n      if (this.user && !this.token) {\n        return this.token;\n      }\n      throw new Error(`User token is not set. Either client.connectUser wasn't called or client.disconnect was called`);\n    };\n    this.isStatic = () => this.type === 'static';\n    this.secret = secret;\n  }\n}\nconst getLocationHint = async (hintUrl = `https://hint.stream-io-video.com/`, timeout = 2000, maxAttempts = 3) => {\n  const logger = getLogger(['location-hint']);\n  let attempt = 0;\n  let locationHint = 'ERR';\n  do {\n    const abortController = new AbortController();\n    const timeoutId = setTimeout(() => abortController.abort(), timeout);\n    try {\n      const response = await fetch(hintUrl, {\n        method: 'HEAD',\n        signal: abortController.signal\n      });\n      const awsPop = response.headers.get('x-amz-cf-pop') || 'ERR';\n      logger('debug', `Location header: ${awsPop}`);\n      locationHint = awsPop.substring(0, 3); // AMS1-P2 -> AMS\n    } catch (e) {\n      logger('warn', `Failed to get location hint from ${hintUrl}`, e);\n      locationHint = 'ERR';\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  } while (locationHint === 'ERR' && ++attempt < maxAttempts);\n  return locationHint;\n};\nclass StreamClient {\n  /**\n   * Initialize a client.\n   *\n   * @param {string} key - the api key\n   * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {string} [options.secret] - the api secret\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   */\n  constructor(key, options) {\n    this.listeners = {};\n    this.getAuthType = () => {\n      return this.anonymous ? 'anonymous' : 'jwt';\n    };\n    this.setBaseURL = baseURL => {\n      this.baseURL = baseURL;\n      this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n    };\n    this.getLocationHint = async (hintUrl, timeout) => {\n      const hint = await this.locationHint;\n      if (!hint || hint === 'ERR') {\n        this.locationHint = getLocationHint(hintUrl ?? this.options.locationHintUrl, timeout ?? this.options.locationHintTimeout);\n        return this.locationHint;\n      }\n      return hint;\n    };\n    this._getConnectionID = () => this.wsConnection?.connectionID;\n    this._hasConnectionID = () => Boolean(this._getConnectionID());\n    /**\n     * connectUser - Set the current user and open a WebSocket connection\n     *\n     * @param user Data about this user. IE {name: \"john\"}\n     * @param {TokenOrProvider} tokenOrProvider Token or provider\n     *\n     * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n     */\n    this.connectUser = async (user, tokenOrProvider) => {\n      if (!user.id) {\n        throw new Error('The \"id\" field on the user is missing');\n      }\n      /**\n       * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n       * If the user id remains the same we don't throw error\n       */\n      if (this.userID === user.id && this.connectUserTask) {\n        this.logger('warn', 'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.');\n        return this.connectUserTask;\n      }\n      if (this.userID) {\n        throw new Error('Use client.disconnect() before trying to connect as a different user. connectUser was called twice.');\n      }\n      if ((this.secret || this.node) && !this.options.allowServerSideConnect) {\n        this.logger('warn', 'Please do not use connectUser server side. Use our @stream-io/node-sdk instead: https://getstream.io/video/docs/api/');\n      }\n      // we generate the client id client side\n      this.userID = user.id;\n      this.anonymous = false;\n      await this.tokenManager.setTokenOrProvider(tokenOrProvider, user, false);\n      this._setUser(user);\n      this.connectUserTask = this.openConnection();\n      try {\n        addConnectionEventListeners(this.updateNetworkConnectionStatus);\n        return await this.connectUserTask;\n      } catch (err) {\n        if (this.persistUserOnConnectionFailure) {\n          // cleanup client to allow the user to retry connectUser again\n          await this.closeConnection();\n        } else {\n          await this.disconnectUser();\n        }\n        throw err;\n      }\n    };\n    this._setUser = user => {\n      /**\n       * This one is used by the frontend. This is a copy of the current user object stored on backend.\n       * It contains reserved properties and own user properties which are not present in `this._user`.\n       */\n      this.user = user;\n      this.userID = user.id;\n      // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n      this._user = {\n        ...user\n      };\n    };\n    /**\n     * Disconnects the websocket connection, without removing the user set on client.\n     * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n     * to call client.openConnection to reconnect to websocket.\n     *\n     * This is mainly useful on mobile side. You can only receive push notifications\n     * if you don't have active websocket connection.\n     * So when your app goes to background, you can call `client.closeConnection`.\n     * And when app comes back to foreground, call `client.openConnection`.\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n    this.closeConnection = async timeout => {\n      await this.wsConnection?.disconnect(timeout);\n    };\n    /**\n     * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n     */\n    this.openConnection = async () => {\n      if (!this.userID) {\n        throw Error('UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead');\n      }\n      const wsPromise = this.wsPromiseSafe?.();\n      if (this.wsConnection?.isConnecting && wsPromise) {\n        this.logger('info', 'client:openConnection() - connection already in progress');\n        return await wsPromise;\n      }\n      if (this.wsConnection?.isHealthy && this._hasConnectionID()) {\n        this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists');\n        return;\n      }\n      this._setupConnectionIdPromise();\n      this.clientID = `${this.userID}--${generateUUIDv4()}`;\n      const newWsPromise = this.connect();\n      this.wsPromiseSafe = makeSafePromise(newWsPromise);\n      return await newWsPromise;\n    };\n    /**\n     * Disconnects the websocket and removes the user from client.\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n    this.disconnectUser = async timeout => {\n      this.logger('info', 'client:disconnect() - Disconnecting the client');\n      // remove the user specific fields\n      delete this.user;\n      delete this._user;\n      delete this.userID;\n      this.anonymous = false;\n      await this.closeConnection(timeout);\n      removeConnectionEventListeners(this.updateNetworkConnectionStatus);\n      this.tokenManager.reset();\n      this.connectionIdPromiseSafe = undefined;\n      this.rejectConnectionId = undefined;\n      this.resolveConnectionId = undefined;\n    };\n    this.connectGuestUser = async user => {\n      this.guestUserCreatePromise = this.doAxiosRequest('post', '/guest', {\n        user\n      }, {\n        publicEndpoint: true\n      });\n      const response = await this.guestUserCreatePromise;\n      this.guestUserCreatePromise.finally(() => this.guestUserCreatePromise = undefined);\n      return this.connectUser(response.user, response.access_token);\n    };\n    /**\n     * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n     */\n    this.connectAnonymousUser = async (user, tokenOrProvider) => {\n      addConnectionEventListeners(this.updateNetworkConnectionStatus);\n      this._setupConnectionIdPromise();\n      this.anonymous = true;\n      await this.tokenManager.setTokenOrProvider(tokenOrProvider, user, true);\n      this._setUser(user);\n      // some endpoints require a connection_id to be resolved.\n      // as anonymous users aren't allowed to open WS connections, we just\n      // resolve the connection_id here.\n      this.resolveConnectionId?.();\n    };\n    /**\n     * on - Listen to events on all channels and users your watching\n     *\n     * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n     *\n     * @param eventName The event type to listen for (optional)\n     * @param callback The callback to call\n     *\n     * @return  Returns a function which, when called, unsubscribes the event handler.\n     */\n    this.on = (eventName, callback) => {\n      if (!this.listeners[eventName]) {\n        this.listeners[eventName] = [];\n      }\n      this.logger('debug', `Adding listener for ${eventName} event`);\n      this.listeners[eventName]?.push(callback);\n      return () => {\n        this.off(eventName, callback);\n      };\n    };\n    /**\n     * off - Remove the event handler\n     */\n    this.off = (eventName, callback) => {\n      if (!this.listeners[eventName]) {\n        this.listeners[eventName] = [];\n      }\n      this.logger('debug', `Removing listener for ${eventName} event`);\n      this.listeners[eventName] = this.listeners[eventName]?.filter(value => value !== callback);\n    };\n    /**\n     * sets up the this.connectionIdPromise\n     */\n    this._setupConnectionIdPromise = () => {\n      /** a promise that is resolved once connection id is set */\n      this.connectionIdPromiseSafe = makeSafePromise(new Promise((resolve, reject) => {\n        this.resolveConnectionId = resolve;\n        this.rejectConnectionId = reject;\n      }));\n    };\n    this._logApiRequest = (type, url, data, config) => {\n      if (getLogLevel() !== 'trace') return;\n      this.logger('trace', `client: ${type} - Request - ${url}`, {\n        payload: data,\n        config\n      });\n    };\n    this._logApiResponse = (type, url, response) => {\n      if (getLogLevel() !== 'trace') return;\n      this.logger('trace', `client:${type} - Response - url: ${url} > status ${response.status}`, {\n        response\n      });\n    };\n    this._logApiError = (type, url, error) => {\n      this.logger('error', `client:${type} - Error - url: ${url}`, {\n        url,\n        error\n      });\n    };\n    this.doAxiosRequest = async (type, url, data, options = {}) => {\n      if (!options.publicEndpoint) {\n        await Promise.all([this.tokenManager.tokenReady(), this.guestUserCreatePromise]);\n        // we need to wait for presence of connection id before making requests\n        try {\n          await this.connectionIdPromise;\n        } catch {\n          // in case connection id was rejected\n          // reconnection maybe in progress\n          // we can wait for healthy connection to resolve, which rejects when 15s timeout is reached\n          await this.wsConnection?._waitForHealthy();\n          await this.connectionIdPromise;\n        }\n      }\n      const requestConfig = this._enrichAxiosOptions(options);\n      try {\n        let response;\n        this._logApiRequest(type, url, data, requestConfig);\n        switch (type) {\n          case 'get':\n            response = await this.axiosInstance.get(url, requestConfig);\n            break;\n          case 'delete':\n            response = await this.axiosInstance.delete(url, requestConfig);\n            break;\n          case 'post':\n            response = await this.axiosInstance.post(url, data, requestConfig);\n            break;\n          case 'put':\n            response = await this.axiosInstance.put(url, data, requestConfig);\n            break;\n          case 'patch':\n            response = await this.axiosInstance.patch(url, data, requestConfig);\n            break;\n          case 'options':\n            response = await this.axiosInstance.options(url, requestConfig);\n            break;\n          default:\n            throw new Error('Invalid request type');\n        }\n        this._logApiResponse(type, url, response);\n        this.consecutiveFailures = 0;\n        return this.handleResponse(response);\n      } catch (e /**TODO: generalize error types  */) {\n        e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n        this.consecutiveFailures += 1;\n        if (e.response) {\n          this._logApiError(type, url, e.response);\n          /** connection_fallback depends on this token expiration logic */\n          if (e.response.data.code === KnownCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n            if (this.consecutiveFailures > 1) {\n              await sleep(retryInterval(this.consecutiveFailures));\n            }\n            await this.tokenManager.loadToken();\n            return await this.doAxiosRequest(type, url, data, options);\n          }\n          return this.handleResponse(e.response);\n        } else {\n          this._logApiError(type, url, e);\n          throw e;\n        }\n      }\n    };\n    this.get = (url, params) => {\n      return this.doAxiosRequest('get', url, null, {\n        params\n      });\n    };\n    this.put = (url, data, params) => {\n      return this.doAxiosRequest('put', url, data, {\n        params\n      });\n    };\n    this.post = (url, data, params) => {\n      return this.doAxiosRequest('post', url, data, {\n        params\n      });\n    };\n    this.patch = (url, data, params) => {\n      return this.doAxiosRequest('patch', url, data, {\n        params\n      });\n    };\n    this.delete = (url, params) => {\n      return this.doAxiosRequest('delete', url, null, {\n        params\n      });\n    };\n    this.errorFromResponse = response => {\n      const {\n        data,\n        status\n      } = response;\n      const err = new ErrorFromResponse();\n      err.message = `Stream error code ${data.code}: ${data.message}`;\n      err.code = data.code;\n      err.unrecoverable = data.unrecoverable;\n      err.response = response;\n      err.status = status;\n      return err;\n    };\n    this.handleResponse = response => {\n      const data = response.data;\n      if (isErrorResponse(response)) {\n        throw this.errorFromResponse(response);\n      }\n      return data;\n    };\n    this.dispatchEvent = event => {\n      this.logger('debug', `Dispatching event: ${event.type}`, event);\n      if (!this.listeners) return;\n      // call generic listeners\n      for (const listener of this.listeners.all || []) {\n        listener(event);\n      }\n      // call type specific listeners\n      for (const listener of this.listeners[event.type] || []) {\n        listener(event);\n      }\n    };\n    /**\n     * @private\n     */\n    this.connect = async () => {\n      if (!this.userID || !this._user) {\n        throw Error('Call connectUser or connectAnonymousUser before starting the connection');\n      }\n      if (!this.wsBaseURL) throw Error('Websocket base url not set');\n      if (!this.clientID) throw Error('clientID is not set');\n      // The StableWSConnection handles all the reconnection logic.\n      this.wsConnection = new StableWSConnection(this);\n      this.logger('info', 'StreamClient.connect: this.wsConnection.connect()');\n      return await this.wsConnection.connect(this.defaultWSTimeout);\n    };\n    this.getUserAgent = () => {\n      if (!this.cachedUserAgent) {\n        const {\n          clientAppIdentifier = {}\n        } = this.options;\n        const {\n          sdkName = 'js',\n          sdkVersion = \"1.21.0\",\n          ...extras\n        } = clientAppIdentifier;\n        this.cachedUserAgent = [`stream-video-${sdkName}-v${sdkVersion}`, ...Object.entries(extras).map(([key, value]) => `${key}=${value}`), `client_bundle=${\"browser-esm\"}`].join('|');\n      }\n      return this.cachedUserAgent;\n    };\n    this._enrichAxiosOptions = (options = {\n      params: {},\n      headers: {},\n      config: {}\n    }) => {\n      const token = options.publicEndpoint && !this.user ? undefined : this._getToken();\n      const authorization = token ? {\n        Authorization: token\n      } : undefined;\n      if (!options.headers?.['x-client-request-id']) {\n        options.headers = {\n          ...options.headers,\n          'x-client-request-id': generateUUIDv4()\n        };\n      }\n      return {\n        params: {\n          user_id: this.userID,\n          connection_id: this._getConnectionID(),\n          api_key: this.key,\n          ...options.params\n        },\n        headers: {\n          ...authorization,\n          'stream-auth-type': options.publicEndpoint && !this.user ? 'anonymous' : this.getAuthType(),\n          'X-Stream-Client': this.getUserAgent(),\n          ...options.headers\n        },\n        ...options.config,\n        ...this.options.axiosRequestConfig\n      };\n    };\n    this._getToken = () => {\n      if (!this.tokenManager) return null;\n      return this.tokenManager.getToken();\n    };\n    this.updateNetworkConnectionStatus = event => {\n      if (event.type === 'offline') {\n        this.logger('debug', 'device went offline');\n        this.dispatchEvent({\n          type: 'network.changed',\n          online: false\n        });\n      } else if (event.type === 'online') {\n        this.logger('debug', 'device went online');\n        this.dispatchEvent({\n          type: 'network.changed',\n          online: true\n        });\n      }\n    };\n    // set the key\n    this.key = key;\n    // set the secret\n    this.secret = options?.secret;\n    // set the options... and figure out defaults...\n    const inputOptions = options ? options : {\n      browser: typeof window !== 'undefined'\n    };\n    this.browser = inputOptions.browser || typeof window !== 'undefined';\n    this.node = !this.browser;\n    if (this.browser) {\n      this.locationHint = getLocationHint(options?.locationHintUrl, options?.locationHintTimeout, options?.locationHintMaxAttempts);\n    }\n    this.options = {\n      timeout: 5000,\n      withCredentials: false,\n      // making sure cookies are not sent\n      ...inputOptions\n    };\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000\n      });\n    }\n    this.setBaseURL(this.options.baseURL || 'https://video.stream-io-api.com/video');\n    this.axiosInstance = axios.create({\n      ...this.options,\n      baseURL: this.baseURL\n    });\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromiseSafe = null;\n    this.connectUserTask = null;\n    // mapping between channel groups and configs\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n    // If it is a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    this.defaultWSTimeout = this.options.defaultWsTimeout ?? 15000;\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : () => null;\n  }\n  get connectionIdPromise() {\n    return this.connectionIdPromiseSafe?.();\n  }\n  get isConnectionIsPromisePending() {\n    return this.connectionIdPromiseSafe?.checkPending() ?? false;\n  }\n  get wsPromise() {\n    return this.wsPromiseSafe?.();\n  }\n}\n\n/**\n * Utility function to get the instance key.\n */\nconst getInstanceKey = (apiKey, user) => {\n  return `${apiKey}/${user.id}`;\n};\n/**\n * Utility function to get the client app identifier.\n */\nconst getClientAppIdentifier = options => {\n  const appId = options?.clientAppIdentifier || {};\n  const sdkInfo = getSdkInfo();\n  if (sdkInfo) {\n    // ensure the sdk name and version are set correctly,\n    // overriding any user-provided values\n    appId.sdkName = SdkType[sdkInfo.type].toLowerCase();\n    appId.sdkVersion = `${sdkInfo.major}.${sdkInfo.minor}.${sdkInfo.patch}`;\n  }\n  return appId;\n};\n/**\n * Creates a coordinator client.\n */\nconst createCoordinatorClient = (apiKey, options) => {\n  const clientAppIdentifier = getClientAppIdentifier(options);\n  const coordinatorLogger = getLogger(['coordinator']);\n  return new StreamClient(apiKey, {\n    persistUserOnConnectionFailure: true,\n    ...options,\n    clientAppIdentifier,\n    logger: coordinatorLogger\n  });\n};\n/**\n * Creates a token provider and allows integrators to provide\n * a static token and a token provider at the same time.\n *\n * When both of them are provided, this function will create an internal\n * token provider that will use the static token on the first invocation\n * and the token provider on the later invocations.\n */\nconst createTokenOrProvider = options => {\n  const {\n    token,\n    tokenProvider\n  } = options;\n  if (token && tokenProvider) {\n    let initialTokenUsed = false;\n    return async function wrappedTokenProvider() {\n      if (!initialTokenUsed) {\n        initialTokenUsed = true;\n        return token;\n      }\n      return tokenProvider();\n    };\n  }\n  return token || tokenProvider;\n};\n\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */\nclass StreamVideoClient {\n  constructor(apiKeyOrArgs, opts) {\n    this.effectsRegistered = false;\n    this.eventHandlersToUnregister = [];\n    this.connectionConcurrencyTag = Symbol('connectionConcurrencyTag');\n    this.registerClientInstance = (apiKey, user) => {\n      const instanceKey = getInstanceKey(apiKey, user);\n      if (StreamVideoClient._instances.has(instanceKey)) {\n        this.logger('warn', `A StreamVideoClient already exists for ${user.id}; Prefer using getOrCreateInstance method`);\n      }\n      StreamVideoClient._instances.set(instanceKey, this);\n    };\n    this.registerEffects = () => {\n      if (this.effectsRegistered) return;\n      this.eventHandlersToUnregister.push(this.on('connection.changed', event => {\n        if (!event.online) return;\n        const callsToReWatch = this.writeableStateStore.calls.filter(call => call.watching).map(call => call.cid);\n        if (callsToReWatch.length <= 0) return;\n        this.logger('info', `Rewatching calls ${callsToReWatch.join(', ')}`);\n        this.queryCalls({\n          watch: true,\n          filter_conditions: {\n            cid: {\n              $in: callsToReWatch\n            }\n          },\n          sort: [{\n            field: 'cid',\n            direction: 1\n          }]\n        }).catch(err => {\n          this.logger('error', 'Failed to re-watch calls', err);\n        });\n      }));\n      this.eventHandlersToUnregister.push(this.on('call.created', event => {\n        const {\n          call,\n          members\n        } = event;\n        if (this.state.connectedUser?.id === call.created_by.id) {\n          this.logger('warn', 'Received `call.created` sent by the current user');\n          return;\n        }\n        this.logger('info', `New call created and registered: ${call.cid}`);\n        const newCall = new Call({\n          streamClient: this.streamClient,\n          type: call.type,\n          id: call.id,\n          members,\n          clientStore: this.writeableStateStore\n        });\n        newCall.state.updateFromCallResponse(call);\n        this.writeableStateStore.registerCall(newCall);\n      }));\n      this.eventHandlersToUnregister.push(this.on('call.ring', async event => {\n        const {\n          call,\n          members\n        } = event;\n        if (this.state.connectedUser?.id === call.created_by.id) {\n          this.logger('debug', 'Received `call.ring` sent by the current user so ignoring the event');\n          return;\n        }\n        // if `call.created` was received before `call.ring`.\n        // the client already has the call instance and we just need to update the state\n        const theCall = this.writeableStateStore.findCall(call.type, call.id);\n        if (theCall) {\n          await theCall.updateFromRingingEvent(event);\n        } else {\n          // if client doesn't have the call instance, create the instance and fetch the latest state\n          // Note: related - we also have onRingingCall method to handle this case from push notifications\n          const newCallInstance = new Call({\n            streamClient: this.streamClient,\n            type: call.type,\n            id: call.id,\n            members,\n            clientStore: this.writeableStateStore,\n            ringing: true\n          });\n          await newCallInstance.get();\n        }\n      }));\n      this.effectsRegistered = true;\n    };\n    /**\n     * Connects the given user to the client.\n     * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n     * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n     *\n     * @param user the user to connect.\n     * @param tokenOrProvider a token or a function that returns a token.\n     */\n    this.connectUser = async (user, tokenOrProvider) => {\n      if (user.type === 'anonymous') {\n        user.id = '!anon';\n        return this.connectAnonymousUser(user, tokenOrProvider);\n      }\n      const connectUserResponse = await withoutConcurrency(this.connectionConcurrencyTag, async () => {\n        const client = this.streamClient;\n        const {\n          onConnectUserError,\n          persistUserOnConnectionFailure\n        } = client.options;\n        let {\n          maxConnectUserRetries = 5\n        } = client.options;\n        maxConnectUserRetries = Math.max(maxConnectUserRetries, 1);\n        const errorQueue = [];\n        for (let attempt = 0; attempt < maxConnectUserRetries; attempt++) {\n          try {\n            this.logger('trace', `Connecting user (${attempt})`, user);\n            return user.type === 'guest' ? await client.connectGuestUser(user) : await client.connectUser(user, tokenOrProvider);\n          } catch (err) {\n            this.logger('warn', `Failed to connect a user (${attempt})`, err);\n            errorQueue.push(err);\n            if (attempt === maxConnectUserRetries - 1) {\n              onConnectUserError?.(err, errorQueue);\n              throw err;\n            }\n            // we need to force to disconnect the user if the client is\n            // configured to persist the user on connection failure\n            if (persistUserOnConnectionFailure) {\n              await client.disconnectUser();\n            }\n            await sleep(retryInterval(attempt));\n          }\n        }\n      });\n      // connectUserResponse will be void if connectUser called twice for the same user\n      if (connectUserResponse?.me) {\n        this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n      }\n      this.registerEffects();\n      return connectUserResponse;\n    };\n    /**\n     * Disconnects the currently connected user from the client.\n     *\n     * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n    this.disconnectUser = async timeout => {\n      await withoutConcurrency(this.connectionConcurrencyTag, async () => {\n        const {\n          user,\n          key\n        } = this.streamClient;\n        if (!user) return;\n        await this.streamClient.disconnectUser(timeout);\n        if (user.id) {\n          StreamVideoClient._instances.delete(getInstanceKey(key, user));\n        }\n        this.eventHandlersToUnregister.forEach(unregister => unregister());\n        this.eventHandlersToUnregister = [];\n        this.effectsRegistered = false;\n        this.writeableStateStore.setConnectedUser(undefined);\n      });\n    };\n    /**\n     * You can subscribe to WebSocket events provided by the API.\n     * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n     * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n     *\n     * @param eventName the event name or 'all'.\n     * @param callback the callback which will be called when the event is emitted.\n     * @returns an unsubscribe function.\n     */\n    this.on = (eventName, callback) => {\n      return this.streamClient.on(eventName, callback);\n    };\n    /**\n     * Remove subscription for WebSocket events that were created by the `on` method.\n     *\n     * @param eventName the event name.\n     * @param callback the callback which was passed to the `on` method.\n     */\n    this.off = (eventName, callback) => {\n      return this.streamClient.off(eventName, callback);\n    };\n    /**\n     * Creates a new call.\n     *\n     * @param type the type of the call.\n     * @param id the id of the call.\n     */\n    this.call = (type, id) => {\n      return new Call({\n        streamClient: this.streamClient,\n        id: id,\n        type: type,\n        clientStore: this.writeableStateStore\n      });\n    };\n    /**\n     * Creates a new guest user with the given data.\n     *\n     * @param data the data for the guest user.\n     */\n    this.createGuestUser = async data => {\n      return this.streamClient.doAxiosRequest('post', '/guest', data, {\n        publicEndpoint: true\n      });\n    };\n    /**\n     * Will query the API for calls matching the given filters.\n     *\n     * @param data the query data.\n     */\n    this.queryCalls = async (data = {}) => {\n      const response = await this.streamClient.post('/calls', data);\n      const calls = [];\n      for (const c of response.calls) {\n        const call = new Call({\n          streamClient: this.streamClient,\n          id: c.call.id,\n          type: c.call.type,\n          members: c.members,\n          ownCapabilities: c.own_capabilities,\n          watching: data.watch,\n          clientStore: this.writeableStateStore\n        });\n        call.state.updateFromCallResponse(c.call);\n        await call.applyDeviceConfig(c.call.settings, false);\n        if (data.watch) {\n          await call.setup();\n          this.writeableStateStore.registerCall(call);\n        }\n        calls.push(call);\n      }\n      return {\n        ...response,\n        calls: calls\n      };\n    };\n    /**\n     * Retrieve the list of available call statistics reports matching a particular condition.\n     *\n     * @param data Filter and sort conditions for retrieving available call report summaries.\n     * @returns List with summary of available call reports matching the condition.\n     */\n    this.queryCallStats = async (data = {}) => {\n      return this.streamClient.post(`/call/stats`, data);\n    };\n    /**\n     * Retrieve the list of available reports aggregated from the call stats.\n     *\n     * @param data Specify filter conditions like from and to (within last 30 days) and the report types\n     * @returns Requested reports with (mostly) raw daily data for each report type requested\n     */\n    this.queryAggregateCallStats = async (data = {}) => {\n      return this.streamClient.post(`/stats`, data);\n    };\n    /**\n     * Returns a list of available data centers available for hosting calls.\n     */\n    this.edges = async () => {\n      return this.streamClient.get(`/edges`);\n    };\n    /**\n     * addDevice - Adds a push device for a user.\n     *\n     * @param {string} id the device id\n     * @param {string} push_provider the push provider name (eg. apn, firebase)\n     * @param {string} push_provider_name user provided push provider name\n     * @param {string} [userID] the user id (defaults to current user)\n     * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n     */\n    this.addDevice = async (id, push_provider, push_provider_name, userID, voip_token) => {\n      return await this.streamClient.post('/devices', {\n        id,\n        push_provider,\n        voip_token,\n        ...(userID != null ? {\n          user_id: userID\n        } : {}),\n        ...(push_provider_name != null ? {\n          push_provider_name\n        } : {})\n      });\n    };\n    /**\n     * addDevice - Adds a push device for a user.\n     *\n     * @param {string} id the device id\n     * @param {string} push_provider the push provider name (eg. apn, firebase)\n     * @param {string} push_provider_name user provided push provider name\n     * @param {string} [userID] the user id (defaults to current user)\n     */\n    this.addVoipDevice = async (id, push_provider, push_provider_name, userID) => {\n      return await this.addDevice(id, push_provider, push_provider_name, userID, true);\n    };\n    /**\n     * getDevices - Returns the devices associated with a current user\n     * @param {string} [userID] User ID. Only works on serverside\n     */\n    this.getDevices = async userID => {\n      return await this.streamClient.get('/devices', userID ? {\n        user_id: userID\n      } : {});\n    };\n    /**\n     * removeDevice - Removes the device with the given id.\n     *\n     * @param {string} id The device id\n     * @param {string} [userID] The user id. Only specify this for serverside requests\n     */\n    this.removeDevice = async (id, userID) => {\n      return await this.streamClient.delete('/devices', {\n        id,\n        ...(userID ? {\n          user_id: userID\n        } : {})\n      });\n    };\n    /**\n     * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n     * @param call_cid\n     * @returns\n     */\n    this.onRingingCall = async call_cid => {\n      // if we find the call and is already ringing, we don't need to create a new call\n      // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n      let call = this.state.calls.find(c => c.cid === call_cid && c.ringing);\n      if (!call) {\n        // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n        const [callType, callId] = call_cid.split(':');\n        call = new Call({\n          streamClient: this.streamClient,\n          type: callType,\n          id: callId,\n          clientStore: this.writeableStateStore,\n          ringing: true\n        });\n        await call.get();\n      }\n      return call;\n    };\n    /**\n     * Connects the given anonymous user to the client.\n     *\n     * @param user the user to connect.\n     * @param tokenOrProvider a token or a function that returns a token.\n     */\n    this.connectAnonymousUser = async (user, tokenOrProvider) => {\n      return withoutConcurrency(this.connectionConcurrencyTag, () => this.streamClient.connectAnonymousUser(user, tokenOrProvider));\n    };\n    const apiKey = typeof apiKeyOrArgs === 'string' ? apiKeyOrArgs : apiKeyOrArgs.apiKey;\n    const clientOptions = typeof apiKeyOrArgs === 'string' ? opts : apiKeyOrArgs.options;\n    if (clientOptions?.enableTimerWorker) enableTimerWorker();\n    const rootLogger = clientOptions?.logger || logToConsole;\n    setLogger(rootLogger, clientOptions?.logLevel || 'warn');\n    this.logger = getLogger(['client']);\n    this.streamClient = createCoordinatorClient(apiKey, clientOptions);\n    this.writeableStateStore = new StreamVideoWriteableStateStore();\n    this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(this.writeableStateStore);\n    if (typeof apiKeyOrArgs !== 'string' && apiKeyOrArgs.user) {\n      const user = apiKeyOrArgs.user;\n      if (user.type === 'anonymous') user.id = '!anon';\n      if (user.id) this.registerClientInstance(apiKey, user);\n      const tokenOrProvider = createTokenOrProvider(apiKeyOrArgs);\n      this.connectUser(user, tokenOrProvider).catch(err => {\n        this.logger('error', 'Failed to connect', err);\n      });\n    }\n  }\n  /**\n   * Gets or creates a StreamVideoClient instance based on the given options.\n   */\n  static getOrCreateInstance(args) {\n    const {\n      apiKey,\n      user,\n      token,\n      tokenProvider\n    } = args;\n    if (!user.id && user.type !== 'anonymous') {\n      throw new Error('user.id is required for a non-anonymous user');\n    }\n    if (!token && !tokenProvider && user.type !== 'anonymous' && user.type !== 'guest') {\n      throw new Error('tokenProvider or token is required for a authenticated users');\n    }\n    return StreamVideoClient._instances.get(getInstanceKey(apiKey, user)) || new StreamVideoClient(args);\n  }\n  /**\n   * Return the reactive state store, use this if you want to be notified about changes to the client state\n   */\n  get state() {\n    return this.readOnlyStateStore;\n  }\n}\nStreamVideoClient._instances = new Map();\nexport { AudioSettingsRequestDefaultDeviceEnum, AudioSettingsResponseDefaultDeviceEnum, browsers as Browsers, Call, CallState, CallType, CallTypes, CallingState, CameraManager, CameraManagerState, CreateDeviceRequestPushProviderEnum, DebounceType, DynascaleManager, ErrorFromResponse, FrameRecordingSettingsRequestModeEnum, FrameRecordingSettingsRequestQualityEnum, FrameRecordingSettingsResponseModeEnum, InputMediaDeviceManager, InputMediaDeviceManagerState, LayoutSettingsRequestNameEnum, MicrophoneManager, MicrophoneManagerState, NoiseCancellationSettingsModeEnum, OwnCapability, RTMPBroadcastRequestQualityEnum, RTMPSettingsRequestQualityEnum, RecordSettingsRequestModeEnum, RecordSettingsRequestQualityEnum, rxUtils as RxUtils, ScreenShareManager, ScreenShareState, events as SfuEvents, models as SfuModels, SpeakerManager, SpeakerState, StreamSfuClient, StreamVideoClient, StreamVideoReadOnlyStateStore, StreamVideoWriteableStateStore, TranscriptionSettingsRequestClosedCaptionModeEnum, TranscriptionSettingsRequestLanguageEnum, TranscriptionSettingsRequestModeEnum, TranscriptionSettingsResponseClosedCaptionModeEnum, TranscriptionSettingsResponseLanguageEnum, TranscriptionSettingsResponseModeEnum, VideoSettingsRequestCameraFacingEnum, VideoSettingsResponseCameraFacingEnum, ViewportTracker, VisibilityState, checkIfAudioOutputChangeSupported, combineComparators, conditional, createSoundDetector, defaultSortPreset, descending, deviceIds$, disposeOfMediaStream, dominantSpeaker, getAudioBrowserPermission, getAudioDevices, getAudioOutputDevices, getAudioStream, getClientDetails, getDeviceState, getLogLevel, getLogger, getScreenShareStream, getSdkInfo, getVideoBrowserPermission, getVideoDevices, getVideoStream, getWebRTCInfo, hasAudio, hasScreenShare, hasScreenShareAudio, hasVideo, isPinned, livestreamOrAudioRoomSortPreset, logLevels, logToConsole, name, noopComparator, paginatedLayoutSortPreset, pinned, publishingAudio, publishingVideo, reactionType, role, screenSharing, setDeviceInfo, setLogLevel, setLogger, setOSInfo, setPowerState, setSdkInfo, setThermalState, setWebRTCInfo, speakerLayoutSortPreset, speaking };\n"],
  "mappings": "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",
  "names": ["SDPUtils", "sdp", "version", "window", "undefined", "regexes", "version", "map", "UAParser", "ua", "sdp", "sdp", "window", "navigator", "name", "window", "navigator", "name", "window", "window", "name", "sdp", "shimGetDisplayMedia", "shimGetUserMedia", "shimOnTrack", "shimPeerConnection", "shimGetUserMedia", "window", "navigator", "shimGetDisplayMedia", "window", "shimOnTrack", "window", "shimPeerConnection", "shimGetUserMedia", "window", "shimGetUserMedia", "navigator", "RTCPeerConnection", "window", "SDPUtils", "version", "isFirefox", "sdp", "window", "logging", "adapter", "shimPeerConnection", "shimGetUserMedia", "shimOnTrack", "UnknownFieldHandler", "WireType", "TWO_PWR_32_DBL", "defaultsWrite", "defaultsRead", "ScalarType", "LongType", "RepeatType", "name", "map", "e", "jsonValue", "name", "name", "T", "name", "copy", "DeferredState", "__awaiter", "__awaiter", "__awaiter", "__awaiter", "TwirpErrorCode", "_a", "NullValue", "PeerType", "ConnectionQuality", "VideoQuality", "TrackType", "ErrorCode", "SdkType", "TrackUnpublishReason", "GoAwayReason", "CallEndedReason", "WebsocketReconnectStrategy", "AndroidThermalState", "AppleThermalState", "Error$Type", "ICETrickle$Type", "VisibilityState", "DebounceType", "logger", "level", "sdp", "CallingState", "patch", "name", "sfuClient", "state", "ownCapabilities", "type", "members", "client", "error", "options", "key", "sdkInfo", "apiKey"]
}
